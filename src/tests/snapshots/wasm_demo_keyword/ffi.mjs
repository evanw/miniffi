// This file was generated by miniffi v0.1.0. Do not edit.

export async function instantiate(bytes, imports) {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiate(bytes, { env });
    _ffi_exports = (await promise).instance.exports;
    return { memory: _ffi_exports.memory };
}

export async function instantiateStreaming(source, imports) {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiateStreaming(source, { env });
    _ffi_exports = (await promise).instance.exports;
    return { memory: _ffi_exports.memory };
}

export function rust_mem_leaked() {
    return _ffi_exports._ffi_fn_rust_mem_leaked();
}

export function test_alignas(alignas) {
    return _ffi_exports._ffi_fn_test_alignas(alignas);
}

export function test_alignof(alignof) {
    return _ffi_exports._ffi_fn_test_alignof(alignof);
}

export function test_and(and) {
    return _ffi_exports._ffi_fn_test_and(and);
}

export function test_and_eq(and_eq) {
    return _ffi_exports._ffi_fn_test_and_eq(and_eq);
}

export function test_asm(asm) {
    return _ffi_exports._ffi_fn_test_asm(asm);
}

export function test_associatedtype(associatedtype) {
    return _ffi_exports._ffi_fn_test_associatedtype(associatedtype);
}

export function test_associativity(associativity) {
    return _ffi_exports._ffi_fn_test_associativity(associativity);
}

export function test_atomic_cancel(atomic_cancel) {
    return _ffi_exports._ffi_fn_test_atomic_cancel(atomic_cancel);
}

export function test_atomic_commit(atomic_commit) {
    return _ffi_exports._ffi_fn_test_atomic_commit(atomic_commit);
}

export function test_atomic_noexcept(atomic_noexcept) {
    return _ffi_exports._ffi_fn_test_atomic_noexcept(atomic_noexcept);
}

export function test_auto(auto) {
    return _ffi_exports._ffi_fn_test_auto(auto);
}

export function test_bitand(bitand) {
    return _ffi_exports._ffi_fn_test_bitand(bitand);
}

export function test_bitor(bitor) {
    return _ffi_exports._ffi_fn_test_bitor(bitor);
}

export function test_bool(bool) {
    return _ffi_exports._ffi_fn_test_bool(bool);
}

export function test_boolean(boolean2) {
    return _ffi_exports._ffi_fn_test_boolean(boolean2);
}

export function test_borrowing(borrowing) {
    return _ffi_exports._ffi_fn_test_borrowing(borrowing);
}

export function test_byte(byte2) {
    return _ffi_exports._ffi_fn_test_byte(byte2);
}

export function test_case(case2) {
    return _ffi_exports._ffi_fn_test_case(case2);
}

export function test_catch(catch2) {
    return _ffi_exports._ffi_fn_test_catch(catch2);
}

export function test_char(char2) {
    return _ffi_exports._ffi_fn_test_char(char2);
}

export function test_char16_t(char16_t) {
    return _ffi_exports._ffi_fn_test_char16_t(char16_t);
}

export function test_char32_t(char32_t) {
    return _ffi_exports._ffi_fn_test_char32_t(char32_t);
}

export function test_char8_t(char8_t) {
    return _ffi_exports._ffi_fn_test_char8_t(char8_t);
}

export function test_class(class2) {
    return _ffi_exports._ffi_fn_test_class(class2);
}

export function test_co_await(co_await) {
    return _ffi_exports._ffi_fn_test_co_await(co_await);
}

export function test_co_return(co_return) {
    return _ffi_exports._ffi_fn_test_co_return(co_return);
}

export function test_co_yield(co_yield) {
    return _ffi_exports._ffi_fn_test_co_yield(co_yield);
}

export function test_compl(compl) {
    return _ffi_exports._ffi_fn_test_compl(compl);
}

export function test_concept(concept) {
    return _ffi_exports._ffi_fn_test_concept(concept);
}

export function test_const_cast(const_cast) {
    return _ffi_exports._ffi_fn_test_const_cast(const_cast);
}

export function test_consteval(consteval) {
    return _ffi_exports._ffi_fn_test_consteval(consteval);
}

export function test_constexpr(constexpr) {
    return _ffi_exports._ffi_fn_test_constexpr(constexpr);
}

export function test_constinit(constinit) {
    return _ffi_exports._ffi_fn_test_constinit(constinit);
}

export function test_consuming(consuming) {
    return _ffi_exports._ffi_fn_test_consuming(consuming);
}

export function test_contract_assert(contract_assert) {
    return _ffi_exports._ffi_fn_test_contract_assert(contract_assert);
}

export function test_convenience(convenience) {
    return _ffi_exports._ffi_fn_test_convenience(convenience);
}

export function test_debugger(debugger2) {
    return _ffi_exports._ffi_fn_test_debugger(debugger2);
}

export function test_decltype(decltype) {
    return _ffi_exports._ffi_fn_test_decltype(decltype);
}

export function test_default(default2) {
    return _ffi_exports._ffi_fn_test_default(default2);
}

export function test_defer(defer) {
    return _ffi_exports._ffi_fn_test_defer(defer);
}

export function test_deinit(deinit) {
    return _ffi_exports._ffi_fn_test_deinit(deinit);
}

export function test_delete(delete2) {
    return _ffi_exports._ffi_fn_test_delete(delete2);
}

export function test_double(double2) {
    return _ffi_exports._ffi_fn_test_double(double2);
}

export function test_dynamic(dynamic) {
    return _ffi_exports._ffi_fn_test_dynamic(dynamic);
}

export function test_dynamic_cast(dynamic_cast) {
    return _ffi_exports._ffi_fn_test_dynamic_cast(dynamic_cast);
}

export function test_explicit(explicit) {
    return _ffi_exports._ffi_fn_test_explicit(explicit);
}

export function test_export(export2) {
    return _ffi_exports._ffi_fn_test_export(export2);
}

export function test_extends(extends2) {
    return _ffi_exports._ffi_fn_test_extends(extends2);
}

export function test_extension(extension) {
    return _ffi_exports._ffi_fn_test_extension(extension);
}

export function test_fallthrough(fallthrough) {
    return _ffi_exports._ffi_fn_test_fallthrough(fallthrough);
}

export function test_fileprivate(fileprivate) {
    return _ffi_exports._ffi_fn_test_fileprivate(fileprivate);
}

export function test_finally(finally2) {
    return _ffi_exports._ffi_fn_test_finally(finally2);
}

export function test_float(float2) {
    return _ffi_exports._ffi_fn_test_float(float2);
}

export function test_friend(friend) {
    return _ffi_exports._ffi_fn_test_friend(friend);
}

export function test_func(func) {
    return _ffi_exports._ffi_fn_test_func(func);
}

export function test_function(function2) {
    return _ffi_exports._ffi_fn_test_function(function2);
}

export function test_get(get) {
    return _ffi_exports._ffi_fn_test_get(get);
}

export function test_goto(goto2) {
    return _ffi_exports._ffi_fn_test_goto(goto2);
}

export function test_guard(guard) {
    return _ffi_exports._ffi_fn_test_guard(guard);
}

export function test_implements(implements2) {
    return _ffi_exports._ffi_fn_test_implements(implements2);
}

export function test_import(import2) {
    return _ffi_exports._ffi_fn_test_import(import2);
}

export function test_indirect(indirect) {
    return _ffi_exports._ffi_fn_test_indirect(indirect);
}

export function test_infix(infix) {
    return _ffi_exports._ffi_fn_test_infix(infix);
}

export function test_init(init) {
    return _ffi_exports._ffi_fn_test_init(init);
}

export function test_inline(inline) {
    return _ffi_exports._ffi_fn_test_inline(inline);
}

export function test_inout(inout) {
    return _ffi_exports._ffi_fn_test_inout(inout);
}

export function test_instanceof(instanceof2) {
    return _ffi_exports._ffi_fn_test_instanceof(instanceof2);
}

export function test_int(int2) {
    return _ffi_exports._ffi_fn_test_int(int2);
}

export function test_interface(interface2) {
    return _ffi_exports._ffi_fn_test_interface(interface2);
}

export function test_internal(internal) {
    return _ffi_exports._ffi_fn_test_internal(internal);
}

export function test_is(is) {
    return _ffi_exports._ffi_fn_test_is(is);
}

export function test_lazy(lazy) {
    return _ffi_exports._ffi_fn_test_lazy(lazy);
}

export function test_left(left) {
    return _ffi_exports._ffi_fn_test_left(left);
}

export function test_long(long2) {
    return _ffi_exports._ffi_fn_test_long(long2);
}

export function test_mutable(mutable) {
    return _ffi_exports._ffi_fn_test_mutable(mutable);
}

export function test_mutating(mutating) {
    return _ffi_exports._ffi_fn_test_mutating(mutating);
}

export function test_namespace(namespace) {
    return _ffi_exports._ffi_fn_test_namespace(namespace);
}

export function test_native(native2) {
    return _ffi_exports._ffi_fn_test_native(native2);
}

export function test_new(new2) {
    return _ffi_exports._ffi_fn_test_new(new2);
}

export function test_nil(nil) {
    return _ffi_exports._ffi_fn_test_nil(nil);
}

export function test_noexcept(noexcept) {
    return _ffi_exports._ffi_fn_test_noexcept(noexcept);
}

export function test_none(none) {
    return _ffi_exports._ffi_fn_test_none(none);
}

export function test_nonisolated(nonisolated) {
    return _ffi_exports._ffi_fn_test_nonisolated(nonisolated);
}

export function test_nonmutating(nonmutating) {
    return _ffi_exports._ffi_fn_test_nonmutating(nonmutating);
}

export function test_not(not) {
    return _ffi_exports._ffi_fn_test_not(not);
}

export function test_not_eq(not_eq) {
    return _ffi_exports._ffi_fn_test_not_eq(not_eq);
}

export function test_null(null2) {
    return _ffi_exports._ffi_fn_test_null(null2);
}

export function test_nullptr(nullptr) {
    return _ffi_exports._ffi_fn_test_nullptr(nullptr);
}

export function test_open(open) {
    return _ffi_exports._ffi_fn_test_open(open);
}

export function test_operator(operator) {
    return _ffi_exports._ffi_fn_test_operator(operator);
}

export function test_optional(optional) {
    return _ffi_exports._ffi_fn_test_optional(optional);
}

export function test_or(or) {
    return _ffi_exports._ffi_fn_test_or(or);
}

export function test_or_eq(or_eq) {
    return _ffi_exports._ffi_fn_test_or_eq(or_eq);
}

export function test_package(package2) {
    return _ffi_exports._ffi_fn_test_package(package2);
}

export function test_postfix(postfix) {
    return _ffi_exports._ffi_fn_test_postfix(postfix);
}

export function test_precedence(precedence) {
    return _ffi_exports._ffi_fn_test_precedence(precedence);
}

export function test_precedencegroup(precedencegroup) {
    return _ffi_exports._ffi_fn_test_precedencegroup(precedencegroup);
}

export function test_prefix(prefix) {
    return _ffi_exports._ffi_fn_test_prefix(prefix);
}

export function test_private(private2) {
    return _ffi_exports._ffi_fn_test_private(private2);
}

export function test_protected(protected2) {
    return _ffi_exports._ffi_fn_test_protected(protected2);
}

export function test_protocol(protocol) {
    return _ffi_exports._ffi_fn_test_protocol(protocol);
}

export function test_public(public2) {
    return _ffi_exports._ffi_fn_test_public(public2);
}

export function test_reflexpr(reflexpr) {
    return _ffi_exports._ffi_fn_test_reflexpr(reflexpr);
}

export function test_register(register) {
    return _ffi_exports._ffi_fn_test_register(register);
}

export function test_reinterpret_cast(reinterpret_cast) {
    return _ffi_exports._ffi_fn_test_reinterpret_cast(reinterpret_cast);
}

export function test_repeat(repeat) {
    return _ffi_exports._ffi_fn_test_repeat(repeat);
}

export function test_required(required) {
    return _ffi_exports._ffi_fn_test_required(required);
}

export function test_requires(requires) {
    return _ffi_exports._ffi_fn_test_requires(requires);
}

export function test_rethrows(rethrows) {
    return _ffi_exports._ffi_fn_test_rethrows(rethrows);
}

export function test_right(right) {
    return _ffi_exports._ffi_fn_test_right(right);
}

export function test_set(set) {
    return _ffi_exports._ffi_fn_test_set(set);
}

export function test_short(short2) {
    return _ffi_exports._ffi_fn_test_short(short2);
}

export function test_signed(signed) {
    return _ffi_exports._ffi_fn_test_signed(signed);
}

export function test_sizeof(sizeof) {
    return _ffi_exports._ffi_fn_test_sizeof(sizeof);
}

export function test_some(some) {
    return _ffi_exports._ffi_fn_test_some(some);
}

export function test_static_assert(static_assert) {
    return _ffi_exports._ffi_fn_test_static_assert(static_assert);
}

export function test_static_cast(static_cast) {
    return _ffi_exports._ffi_fn_test_static_cast(static_cast);
}

export function test_subscript(subscript) {
    return _ffi_exports._ffi_fn_test_subscript(subscript);
}

export function test_switch(switch2) {
    return _ffi_exports._ffi_fn_test_switch(switch2);
}

export function test_synchronized(synchronized2) {
    return _ffi_exports._ffi_fn_test_synchronized(synchronized2);
}

export function test_template(template) {
    return _ffi_exports._ffi_fn_test_template(template);
}

export function test_this(this2) {
    return _ffi_exports._ffi_fn_test_this(this2);
}

export function test_thread_local(thread_local) {
    return _ffi_exports._ffi_fn_test_thread_local(thread_local);
}

export function test_throw(throw2) {
    return _ffi_exports._ffi_fn_test_throw(throw2);
}

export function test_throws(throws2) {
    return _ffi_exports._ffi_fn_test_throws(throws2);
}

export function test_transient(transient2) {
    return _ffi_exports._ffi_fn_test_transient(transient2);
}

export function test_typealias(typealias) {
    return _ffi_exports._ffi_fn_test_typealias(typealias);
}

export function test_typedef(typedef) {
    return _ffi_exports._ffi_fn_test_typedef(typedef);
}

export function test_typeid(typeid) {
    return _ffi_exports._ffi_fn_test_typeid(typeid);
}

export function test_typename(typename) {
    return _ffi_exports._ffi_fn_test_typename(typename);
}

export function test_undefined(undefined2) {
    return _ffi_exports._ffi_fn_test_undefined(undefined2);
}

export function test_union(union) {
    return _ffi_exports._ffi_fn_test_union(union);
}

export function test_unowned(unowned) {
    return _ffi_exports._ffi_fn_test_unowned(unowned);
}

export function test_unsigned(unsigned) {
    return _ffi_exports._ffi_fn_test_unsigned(unsigned);
}

export function test_using(using) {
    return _ffi_exports._ffi_fn_test_using(using);
}

export function test_var(var2) {
    return _ffi_exports._ffi_fn_test_var(var2);
}

export function test_void(void2) {
    return _ffi_exports._ffi_fn_test_void(void2);
}

export function test_volatile(volatile2) {
    return _ffi_exports._ffi_fn_test_volatile(volatile2);
}

export function test_wchar_t(wchar_t) {
    return _ffi_exports._ffi_fn_test_wchar_t(wchar_t);
}

export function test_weak(weak) {
    return _ffi_exports._ffi_fn_test_weak(weak);
}

export function test_with(with2) {
    return _ffi_exports._ffi_fn_test_with(with2);
}

export function test_xor(xor) {
    return _ffi_exports._ffi_fn_test_xor(xor);
}

export function test_xor_eq(xor_eq) {
    return _ffi_exports._ffi_fn_test_xor_eq(xor_eq);
}

let _ffi_exports;

const _ffi_imports = {};
