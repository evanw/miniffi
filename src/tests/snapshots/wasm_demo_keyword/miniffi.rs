// This file was generated by miniffi v0.1.0. Do not edit.

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_rust_mem_leaked() -> usize {
    rust_mem_leaked()
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_alignas(alignas: i32) -> i32 {
    test_alignas(alignas)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_alignof(alignof: i32) -> i32 {
    test_alignof(alignof)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_and(and: i32) -> i32 {
    test_and(and)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_and_eq(and_eq: i32) -> i32 {
    test_and_eq(and_eq)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_asm(asm: i32) -> i32 {
    test_asm(asm)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_associatedtype(associatedtype: i32) -> i32 {
    test_associatedtype(associatedtype)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_associativity(associativity: i32) -> i32 {
    test_associativity(associativity)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_atomic_cancel(atomic_cancel: i32) -> i32 {
    test_atomic_cancel(atomic_cancel)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_atomic_commit(atomic_commit: i32) -> i32 {
    test_atomic_commit(atomic_commit)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_atomic_noexcept(atomic_noexcept: i32) -> i32 {
    test_atomic_noexcept(atomic_noexcept)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_auto(auto: i32) -> i32 {
    test_auto(auto)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_bitand(bitand: i32) -> i32 {
    test_bitand(bitand)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_bitor(bitor: i32) -> i32 {
    test_bitor(bitor)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_bool(bool: i32) -> i32 {
    test_bool(bool)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_boolean(boolean2: i32) -> i32 {
    test_boolean(boolean2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_borrowing(borrowing: i32) -> i32 {
    test_borrowing(borrowing)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_byte(byte2: i32) -> i32 {
    test_byte(byte2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_case(case2: i32) -> i32 {
    test_case(case2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_catch(catch2: i32) -> i32 {
    test_catch(catch2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_char(char2: i32) -> i32 {
    test_char(char2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_char16_t(char16_t: i32) -> i32 {
    test_char16_t(char16_t)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_char32_t(char32_t: i32) -> i32 {
    test_char32_t(char32_t)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_char8_t(char8_t: i32) -> i32 {
    test_char8_t(char8_t)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_class(class2: i32) -> i32 {
    test_class(class2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_co_await(co_await: i32) -> i32 {
    test_co_await(co_await)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_co_return(co_return: i32) -> i32 {
    test_co_return(co_return)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_co_yield(co_yield: i32) -> i32 {
    test_co_yield(co_yield)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_compl(compl: i32) -> i32 {
    test_compl(compl)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_concept(concept: i32) -> i32 {
    test_concept(concept)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_const_cast(const_cast: i32) -> i32 {
    test_const_cast(const_cast)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_consteval(consteval: i32) -> i32 {
    test_consteval(consteval)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_constexpr(constexpr: i32) -> i32 {
    test_constexpr(constexpr)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_constinit(constinit: i32) -> i32 {
    test_constinit(constinit)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_consuming(consuming: i32) -> i32 {
    test_consuming(consuming)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_contract_assert(contract_assert: i32) -> i32 {
    test_contract_assert(contract_assert)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_convenience(convenience: i32) -> i32 {
    test_convenience(convenience)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_debugger(debugger2: i32) -> i32 {
    test_debugger(debugger2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_decltype(decltype: i32) -> i32 {
    test_decltype(decltype)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_default(default2: i32) -> i32 {
    test_default(default2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_defer(defer: i32) -> i32 {
    test_defer(defer)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_deinit(deinit: i32) -> i32 {
    test_deinit(deinit)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_delete(delete2: i32) -> i32 {
    test_delete(delete2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_double(double2: i32) -> i32 {
    test_double(double2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_dynamic(dynamic: i32) -> i32 {
    test_dynamic(dynamic)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_dynamic_cast(dynamic_cast: i32) -> i32 {
    test_dynamic_cast(dynamic_cast)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_explicit(explicit: i32) -> i32 {
    test_explicit(explicit)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_export(export2: i32) -> i32 {
    test_export(export2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_extends(extends2: i32) -> i32 {
    test_extends(extends2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_extension(extension: i32) -> i32 {
    test_extension(extension)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_fallthrough(fallthrough: i32) -> i32 {
    test_fallthrough(fallthrough)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_fileprivate(fileprivate: i32) -> i32 {
    test_fileprivate(fileprivate)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_finally(finally2: i32) -> i32 {
    test_finally(finally2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_float(float2: i32) -> i32 {
    test_float(float2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_friend(friend: i32) -> i32 {
    test_friend(friend)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_func(func: i32) -> i32 {
    test_func(func)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_function(function2: i32) -> i32 {
    test_function(function2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_get(get: i32) -> i32 {
    test_get(get)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_goto(goto2: i32) -> i32 {
    test_goto(goto2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_guard(guard: i32) -> i32 {
    test_guard(guard)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_implements(implements2: i32) -> i32 {
    test_implements(implements2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_import(import2: i32) -> i32 {
    test_import(import2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_indirect(indirect: i32) -> i32 {
    test_indirect(indirect)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_infix(infix: i32) -> i32 {
    test_infix(infix)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_init(init: i32) -> i32 {
    test_init(init)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_inline(inline: i32) -> i32 {
    test_inline(inline)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_inout(inout: i32) -> i32 {
    test_inout(inout)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_instanceof(instanceof2: i32) -> i32 {
    test_instanceof(instanceof2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_int(int2: i32) -> i32 {
    test_int(int2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_interface(interface2: i32) -> i32 {
    test_interface(interface2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_internal(internal: i32) -> i32 {
    test_internal(internal)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_is(is: i32) -> i32 {
    test_is(is)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_lazy(lazy: i32) -> i32 {
    test_lazy(lazy)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_left(left: i32) -> i32 {
    test_left(left)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_long(long2: i32) -> i32 {
    test_long(long2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_mutable(mutable: i32) -> i32 {
    test_mutable(mutable)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_mutating(mutating: i32) -> i32 {
    test_mutating(mutating)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_namespace(namespace: i32) -> i32 {
    test_namespace(namespace)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_native(native2: i32) -> i32 {
    test_native(native2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_new(new2: i32) -> i32 {
    test_new(new2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_nil(nil: i32) -> i32 {
    test_nil(nil)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_noexcept(noexcept: i32) -> i32 {
    test_noexcept(noexcept)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_none(none: i32) -> i32 {
    test_none(none)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_nonisolated(nonisolated: i32) -> i32 {
    test_nonisolated(nonisolated)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_nonmutating(nonmutating: i32) -> i32 {
    test_nonmutating(nonmutating)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_not(not: i32) -> i32 {
    test_not(not)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_not_eq(not_eq: i32) -> i32 {
    test_not_eq(not_eq)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_null(null2: i32) -> i32 {
    test_null(null2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_nullptr(nullptr: i32) -> i32 {
    test_nullptr(nullptr)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_open(open: i32) -> i32 {
    test_open(open)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_operator(operator: i32) -> i32 {
    test_operator(operator)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_optional(optional: i32) -> i32 {
    test_optional(optional)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_or(or: i32) -> i32 {
    test_or(or)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_or_eq(or_eq: i32) -> i32 {
    test_or_eq(or_eq)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_package(package2: i32) -> i32 {
    test_package(package2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_postfix(postfix: i32) -> i32 {
    test_postfix(postfix)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_precedence(precedence: i32) -> i32 {
    test_precedence(precedence)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_precedencegroup(precedencegroup: i32) -> i32 {
    test_precedencegroup(precedencegroup)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_prefix(prefix: i32) -> i32 {
    test_prefix(prefix)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_private(private2: i32) -> i32 {
    test_private(private2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_protected(protected2: i32) -> i32 {
    test_protected(protected2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_protocol(protocol: i32) -> i32 {
    test_protocol(protocol)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_public(public2: i32) -> i32 {
    test_public(public2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_reflexpr(reflexpr: i32) -> i32 {
    test_reflexpr(reflexpr)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_register(register: i32) -> i32 {
    test_register(register)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_reinterpret_cast(reinterpret_cast: i32) -> i32 {
    test_reinterpret_cast(reinterpret_cast)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_repeat(repeat: i32) -> i32 {
    test_repeat(repeat)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_required(required: i32) -> i32 {
    test_required(required)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_requires(requires: i32) -> i32 {
    test_requires(requires)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_rethrows(rethrows: i32) -> i32 {
    test_rethrows(rethrows)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_right(right: i32) -> i32 {
    test_right(right)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_set(set: i32) -> i32 {
    test_set(set)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_short(short2: i32) -> i32 {
    test_short(short2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_signed(signed: i32) -> i32 {
    test_signed(signed)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_sizeof(sizeof: i32) -> i32 {
    test_sizeof(sizeof)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_some(some: i32) -> i32 {
    test_some(some)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_static_assert(static_assert: i32) -> i32 {
    test_static_assert(static_assert)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_static_cast(static_cast: i32) -> i32 {
    test_static_cast(static_cast)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_subscript(subscript: i32) -> i32 {
    test_subscript(subscript)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_switch(switch2: i32) -> i32 {
    test_switch(switch2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_synchronized(synchronized2: i32) -> i32 {
    test_synchronized(synchronized2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_template(template: i32) -> i32 {
    test_template(template)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_this(this2: i32) -> i32 {
    test_this(this2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_thread_local(thread_local: i32) -> i32 {
    test_thread_local(thread_local)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_throw(throw2: i32) -> i32 {
    test_throw(throw2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_throws(throws2: i32) -> i32 {
    test_throws(throws2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_transient(transient2: i32) -> i32 {
    test_transient(transient2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_typealias(typealias: i32) -> i32 {
    test_typealias(typealias)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_typedef(typedef: i32) -> i32 {
    test_typedef(typedef)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_typeid(typeid: i32) -> i32 {
    test_typeid(typeid)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_typename(typename: i32) -> i32 {
    test_typename(typename)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_undefined(undefined2: i32) -> i32 {
    test_undefined(undefined2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_union(union: i32) -> i32 {
    test_union(union)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_unowned(unowned: i32) -> i32 {
    test_unowned(unowned)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_unsigned(unsigned: i32) -> i32 {
    test_unsigned(unsigned)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_using(using: i32) -> i32 {
    test_using(using)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_var(var2: i32) -> i32 {
    test_var(var2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_void(void2: i32) -> i32 {
    test_void(void2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_volatile(volatile2: i32) -> i32 {
    test_volatile(volatile2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_wchar_t(wchar_t: i32) -> i32 {
    test_wchar_t(wchar_t)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_weak(weak: i32) -> i32 {
    test_weak(weak)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_with(with2: i32) -> i32 {
    test_with(with2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_xor(xor: i32) -> i32 {
    test_xor(xor)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_xor_eq(xor_eq: i32) -> i32 {
    test_xor_eq(xor_eq)
}
