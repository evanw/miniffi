// This file was generated by miniffi v0.1.0. Do not edit.

export function instantiate(bytes: BufferSource, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }>;
export function instantiateStreaming(source: Response | PromiseLike<Response>, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }>;

export function rust_mem_leaked(): number;
export function test_alignas(alignas: number): number;
export function test_alignof(alignof: number): number;
export function test_and(and: number): number;
export function test_and_eq(and_eq: number): number;
export function test_asm(asm: number): number;
export function test_associatedtype(associatedtype: number): number;
export function test_associativity(associativity: number): number;
export function test_atomic_cancel(atomic_cancel: number): number;
export function test_atomic_commit(atomic_commit: number): number;
export function test_atomic_noexcept(atomic_noexcept: number): number;
export function test_auto(auto: number): number;
export function test_bitand(bitand: number): number;
export function test_bitor(bitor: number): number;
export function test_bool(bool: number): number;
export function test_boolean(boolean2: number): number;
export function test_borrowing(borrowing: number): number;
export function test_byte(byte2: number): number;
export function test_case(case2: number): number;
export function test_catch(catch2: number): number;
export function test_char(char2: number): number;
export function test_char16_t(char16_t: number): number;
export function test_char32_t(char32_t: number): number;
export function test_char8_t(char8_t: number): number;
export function test_class(class2: number): number;
export function test_co_await(co_await: number): number;
export function test_co_return(co_return: number): number;
export function test_co_yield(co_yield: number): number;
export function test_compl(compl: number): number;
export function test_concept(concept: number): number;
export function test_const_cast(const_cast: number): number;
export function test_consteval(consteval: number): number;
export function test_constexpr(constexpr: number): number;
export function test_constinit(constinit: number): number;
export function test_consuming(consuming: number): number;
export function test_contract_assert(contract_assert: number): number;
export function test_convenience(convenience: number): number;
export function test_debugger(debugger2: number): number;
export function test_decltype(decltype: number): number;
export function test_default(default2: number): number;
export function test_defer(defer: number): number;
export function test_deinit(deinit: number): number;
export function test_delete(delete2: number): number;
export function test_double(double2: number): number;
export function test_dynamic(dynamic: number): number;
export function test_dynamic_cast(dynamic_cast: number): number;
export function test_explicit(explicit: number): number;
export function test_export(export2: number): number;
export function test_extends(extends2: number): number;
export function test_extension(extension: number): number;
export function test_fallthrough(fallthrough: number): number;
export function test_fileprivate(fileprivate: number): number;
export function test_finally(finally2: number): number;
export function test_float(float2: number): number;
export function test_friend(friend: number): number;
export function test_func(func: number): number;
export function test_function(function2: number): number;
export function test_get(get: number): number;
export function test_goto(goto2: number): number;
export function test_guard(guard: number): number;
export function test_implements(implements2: number): number;
export function test_import(import2: number): number;
export function test_indirect(indirect: number): number;
export function test_infix(infix: number): number;
export function test_init(init: number): number;
export function test_inline(inline: number): number;
export function test_inout(inout: number): number;
export function test_instanceof(instanceof2: number): number;
export function test_int(int2: number): number;
export function test_interface(interface2: number): number;
export function test_internal(internal: number): number;
export function test_is(is: number): number;
export function test_lazy(lazy: number): number;
export function test_left(left: number): number;
export function test_long(long2: number): number;
export function test_mutable(mutable: number): number;
export function test_mutating(mutating: number): number;
export function test_namespace(namespace: number): number;
export function test_native(native2: number): number;
export function test_new(new2: number): number;
export function test_nil(nil: number): number;
export function test_noexcept(noexcept: number): number;
export function test_none(none: number): number;
export function test_nonisolated(nonisolated: number): number;
export function test_nonmutating(nonmutating: number): number;
export function test_not(not: number): number;
export function test_not_eq(not_eq: number): number;
export function test_null(null2: number): number;
export function test_nullptr(nullptr: number): number;
export function test_open(open: number): number;
export function test_operator(operator: number): number;
export function test_optional(optional: number): number;
export function test_or(or: number): number;
export function test_or_eq(or_eq: number): number;
export function test_package(package2: number): number;
export function test_postfix(postfix: number): number;
export function test_precedence(precedence: number): number;
export function test_precedencegroup(precedencegroup: number): number;
export function test_prefix(prefix: number): number;
export function test_private(private2: number): number;
export function test_protected(protected2: number): number;
export function test_protocol(protocol: number): number;
export function test_public(public2: number): number;
export function test_reflexpr(reflexpr: number): number;
export function test_register(register: number): number;
export function test_reinterpret_cast(reinterpret_cast: number): number;
export function test_repeat(repeat: number): number;
export function test_required(required: number): number;
export function test_requires(requires: number): number;
export function test_rethrows(rethrows: number): number;
export function test_right(right: number): number;
export function test_set(set: number): number;
export function test_short(short2: number): number;
export function test_signed(signed: number): number;
export function test_sizeof(sizeof: number): number;
export function test_some(some: number): number;
export function test_static_assert(static_assert: number): number;
export function test_static_cast(static_cast: number): number;
export function test_subscript(subscript: number): number;
export function test_switch(switch2: number): number;
export function test_synchronized(synchronized2: number): number;
export function test_template(template: number): number;
export function test_this(this2: number): number;
export function test_thread_local(thread_local: number): number;
export function test_throw(throw2: number): number;
export function test_throws(throws2: number): number;
export function test_transient(transient2: number): number;
export function test_typealias(typealias: number): number;
export function test_typedef(typedef: number): number;
export function test_typeid(typeid: number): number;
export function test_typename(typename: number): number;
export function test_undefined(undefined2: number): number;
export function test_union(union: number): number;
export function test_unowned(unowned: number): number;
export function test_unsigned(unsigned: number): number;
export function test_using(using: number): number;
export function test_var(var2: number): number;
export function test_void(void2: number): number;
export function test_volatile(volatile2: number): number;
export function test_wchar_t(wchar_t: number): number;
export function test_weak(weak: number): number;
export function test_with(with2: number): number;
export function test_xor(xor: number): number;
export function test_xor_eq(xor_eq: number): number;
