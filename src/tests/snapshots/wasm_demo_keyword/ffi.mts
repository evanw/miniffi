// This file was generated by miniffi v0.1.0. Do not edit.

export async function instantiate(bytes: BufferSource, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }> {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiate(bytes, { env });
    _ffi_exports = (await promise).instance.exports as any;
    return { memory: _ffi_exports.memory };
}

export async function instantiateStreaming(source: Response | PromiseLike<Response>, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }> {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiateStreaming(source, { env });
    _ffi_exports = (await promise).instance.exports as any;
    return { memory: _ffi_exports.memory };
}

export function rust_mem_leaked(): number {
    return _ffi_exports._ffi_fn_rust_mem_leaked();
}

export function test_alignas(alignas: number): number {
    return _ffi_exports._ffi_fn_test_alignas(alignas);
}

export function test_alignof(alignof: number): number {
    return _ffi_exports._ffi_fn_test_alignof(alignof);
}

export function test_and(and: number): number {
    return _ffi_exports._ffi_fn_test_and(and);
}

export function test_and_eq(and_eq: number): number {
    return _ffi_exports._ffi_fn_test_and_eq(and_eq);
}

export function test_asm(asm: number): number {
    return _ffi_exports._ffi_fn_test_asm(asm);
}

export function test_associatedtype(associatedtype: number): number {
    return _ffi_exports._ffi_fn_test_associatedtype(associatedtype);
}

export function test_associativity(associativity: number): number {
    return _ffi_exports._ffi_fn_test_associativity(associativity);
}

export function test_atomic_cancel(atomic_cancel: number): number {
    return _ffi_exports._ffi_fn_test_atomic_cancel(atomic_cancel);
}

export function test_atomic_commit(atomic_commit: number): number {
    return _ffi_exports._ffi_fn_test_atomic_commit(atomic_commit);
}

export function test_atomic_noexcept(atomic_noexcept: number): number {
    return _ffi_exports._ffi_fn_test_atomic_noexcept(atomic_noexcept);
}

export function test_auto(auto: number): number {
    return _ffi_exports._ffi_fn_test_auto(auto);
}

export function test_bitand(bitand: number): number {
    return _ffi_exports._ffi_fn_test_bitand(bitand);
}

export function test_bitor(bitor: number): number {
    return _ffi_exports._ffi_fn_test_bitor(bitor);
}

export function test_bool(bool: number): number {
    return _ffi_exports._ffi_fn_test_bool(bool);
}

export function test_boolean(boolean2: number): number {
    return _ffi_exports._ffi_fn_test_boolean(boolean2);
}

export function test_borrowing(borrowing: number): number {
    return _ffi_exports._ffi_fn_test_borrowing(borrowing);
}

export function test_byte(byte2: number): number {
    return _ffi_exports._ffi_fn_test_byte(byte2);
}

export function test_case(case2: number): number {
    return _ffi_exports._ffi_fn_test_case(case2);
}

export function test_catch(catch2: number): number {
    return _ffi_exports._ffi_fn_test_catch(catch2);
}

export function test_char(char2: number): number {
    return _ffi_exports._ffi_fn_test_char(char2);
}

export function test_char16_t(char16_t: number): number {
    return _ffi_exports._ffi_fn_test_char16_t(char16_t);
}

export function test_char32_t(char32_t: number): number {
    return _ffi_exports._ffi_fn_test_char32_t(char32_t);
}

export function test_char8_t(char8_t: number): number {
    return _ffi_exports._ffi_fn_test_char8_t(char8_t);
}

export function test_class(class2: number): number {
    return _ffi_exports._ffi_fn_test_class(class2);
}

export function test_co_await(co_await: number): number {
    return _ffi_exports._ffi_fn_test_co_await(co_await);
}

export function test_co_return(co_return: number): number {
    return _ffi_exports._ffi_fn_test_co_return(co_return);
}

export function test_co_yield(co_yield: number): number {
    return _ffi_exports._ffi_fn_test_co_yield(co_yield);
}

export function test_compl(compl: number): number {
    return _ffi_exports._ffi_fn_test_compl(compl);
}

export function test_concept(concept: number): number {
    return _ffi_exports._ffi_fn_test_concept(concept);
}

export function test_const_cast(const_cast: number): number {
    return _ffi_exports._ffi_fn_test_const_cast(const_cast);
}

export function test_consteval(consteval: number): number {
    return _ffi_exports._ffi_fn_test_consteval(consteval);
}

export function test_constexpr(constexpr: number): number {
    return _ffi_exports._ffi_fn_test_constexpr(constexpr);
}

export function test_constinit(constinit: number): number {
    return _ffi_exports._ffi_fn_test_constinit(constinit);
}

export function test_consuming(consuming: number): number {
    return _ffi_exports._ffi_fn_test_consuming(consuming);
}

export function test_contract_assert(contract_assert: number): number {
    return _ffi_exports._ffi_fn_test_contract_assert(contract_assert);
}

export function test_convenience(convenience: number): number {
    return _ffi_exports._ffi_fn_test_convenience(convenience);
}

export function test_debugger(debugger2: number): number {
    return _ffi_exports._ffi_fn_test_debugger(debugger2);
}

export function test_decltype(decltype: number): number {
    return _ffi_exports._ffi_fn_test_decltype(decltype);
}

export function test_default(default2: number): number {
    return _ffi_exports._ffi_fn_test_default(default2);
}

export function test_defer(defer: number): number {
    return _ffi_exports._ffi_fn_test_defer(defer);
}

export function test_deinit(deinit: number): number {
    return _ffi_exports._ffi_fn_test_deinit(deinit);
}

export function test_delete(delete2: number): number {
    return _ffi_exports._ffi_fn_test_delete(delete2);
}

export function test_double(double2: number): number {
    return _ffi_exports._ffi_fn_test_double(double2);
}

export function test_dynamic(dynamic: number): number {
    return _ffi_exports._ffi_fn_test_dynamic(dynamic);
}

export function test_dynamic_cast(dynamic_cast: number): number {
    return _ffi_exports._ffi_fn_test_dynamic_cast(dynamic_cast);
}

export function test_explicit(explicit: number): number {
    return _ffi_exports._ffi_fn_test_explicit(explicit);
}

export function test_export(export2: number): number {
    return _ffi_exports._ffi_fn_test_export(export2);
}

export function test_extends(extends2: number): number {
    return _ffi_exports._ffi_fn_test_extends(extends2);
}

export function test_extension(extension: number): number {
    return _ffi_exports._ffi_fn_test_extension(extension);
}

export function test_fallthrough(fallthrough: number): number {
    return _ffi_exports._ffi_fn_test_fallthrough(fallthrough);
}

export function test_fileprivate(fileprivate: number): number {
    return _ffi_exports._ffi_fn_test_fileprivate(fileprivate);
}

export function test_finally(finally2: number): number {
    return _ffi_exports._ffi_fn_test_finally(finally2);
}

export function test_float(float2: number): number {
    return _ffi_exports._ffi_fn_test_float(float2);
}

export function test_friend(friend: number): number {
    return _ffi_exports._ffi_fn_test_friend(friend);
}

export function test_func(func: number): number {
    return _ffi_exports._ffi_fn_test_func(func);
}

export function test_function(function2: number): number {
    return _ffi_exports._ffi_fn_test_function(function2);
}

export function test_get(get: number): number {
    return _ffi_exports._ffi_fn_test_get(get);
}

export function test_goto(goto2: number): number {
    return _ffi_exports._ffi_fn_test_goto(goto2);
}

export function test_guard(guard: number): number {
    return _ffi_exports._ffi_fn_test_guard(guard);
}

export function test_implements(implements2: number): number {
    return _ffi_exports._ffi_fn_test_implements(implements2);
}

export function test_import(import2: number): number {
    return _ffi_exports._ffi_fn_test_import(import2);
}

export function test_indirect(indirect: number): number {
    return _ffi_exports._ffi_fn_test_indirect(indirect);
}

export function test_infix(infix: number): number {
    return _ffi_exports._ffi_fn_test_infix(infix);
}

export function test_init(init: number): number {
    return _ffi_exports._ffi_fn_test_init(init);
}

export function test_inline(inline: number): number {
    return _ffi_exports._ffi_fn_test_inline(inline);
}

export function test_inout(inout: number): number {
    return _ffi_exports._ffi_fn_test_inout(inout);
}

export function test_instanceof(instanceof2: number): number {
    return _ffi_exports._ffi_fn_test_instanceof(instanceof2);
}

export function test_int(int2: number): number {
    return _ffi_exports._ffi_fn_test_int(int2);
}

export function test_interface(interface2: number): number {
    return _ffi_exports._ffi_fn_test_interface(interface2);
}

export function test_internal(internal: number): number {
    return _ffi_exports._ffi_fn_test_internal(internal);
}

export function test_is(is: number): number {
    return _ffi_exports._ffi_fn_test_is(is);
}

export function test_lazy(lazy: number): number {
    return _ffi_exports._ffi_fn_test_lazy(lazy);
}

export function test_left(left: number): number {
    return _ffi_exports._ffi_fn_test_left(left);
}

export function test_long(long2: number): number {
    return _ffi_exports._ffi_fn_test_long(long2);
}

export function test_mutable(mutable: number): number {
    return _ffi_exports._ffi_fn_test_mutable(mutable);
}

export function test_mutating(mutating: number): number {
    return _ffi_exports._ffi_fn_test_mutating(mutating);
}

export function test_namespace(namespace: number): number {
    return _ffi_exports._ffi_fn_test_namespace(namespace);
}

export function test_native(native2: number): number {
    return _ffi_exports._ffi_fn_test_native(native2);
}

export function test_new(new2: number): number {
    return _ffi_exports._ffi_fn_test_new(new2);
}

export function test_nil(nil: number): number {
    return _ffi_exports._ffi_fn_test_nil(nil);
}

export function test_noexcept(noexcept: number): number {
    return _ffi_exports._ffi_fn_test_noexcept(noexcept);
}

export function test_none(none: number): number {
    return _ffi_exports._ffi_fn_test_none(none);
}

export function test_nonisolated(nonisolated: number): number {
    return _ffi_exports._ffi_fn_test_nonisolated(nonisolated);
}

export function test_nonmutating(nonmutating: number): number {
    return _ffi_exports._ffi_fn_test_nonmutating(nonmutating);
}

export function test_not(not: number): number {
    return _ffi_exports._ffi_fn_test_not(not);
}

export function test_not_eq(not_eq: number): number {
    return _ffi_exports._ffi_fn_test_not_eq(not_eq);
}

export function test_null(null2: number): number {
    return _ffi_exports._ffi_fn_test_null(null2);
}

export function test_nullptr(nullptr: number): number {
    return _ffi_exports._ffi_fn_test_nullptr(nullptr);
}

export function test_open(open: number): number {
    return _ffi_exports._ffi_fn_test_open(open);
}

export function test_operator(operator: number): number {
    return _ffi_exports._ffi_fn_test_operator(operator);
}

export function test_optional(optional: number): number {
    return _ffi_exports._ffi_fn_test_optional(optional);
}

export function test_or(or: number): number {
    return _ffi_exports._ffi_fn_test_or(or);
}

export function test_or_eq(or_eq: number): number {
    return _ffi_exports._ffi_fn_test_or_eq(or_eq);
}

export function test_package(package2: number): number {
    return _ffi_exports._ffi_fn_test_package(package2);
}

export function test_postfix(postfix: number): number {
    return _ffi_exports._ffi_fn_test_postfix(postfix);
}

export function test_precedence(precedence: number): number {
    return _ffi_exports._ffi_fn_test_precedence(precedence);
}

export function test_precedencegroup(precedencegroup: number): number {
    return _ffi_exports._ffi_fn_test_precedencegroup(precedencegroup);
}

export function test_prefix(prefix: number): number {
    return _ffi_exports._ffi_fn_test_prefix(prefix);
}

export function test_private(private2: number): number {
    return _ffi_exports._ffi_fn_test_private(private2);
}

export function test_protected(protected2: number): number {
    return _ffi_exports._ffi_fn_test_protected(protected2);
}

export function test_protocol(protocol: number): number {
    return _ffi_exports._ffi_fn_test_protocol(protocol);
}

export function test_public(public2: number): number {
    return _ffi_exports._ffi_fn_test_public(public2);
}

export function test_reflexpr(reflexpr: number): number {
    return _ffi_exports._ffi_fn_test_reflexpr(reflexpr);
}

export function test_register(register: number): number {
    return _ffi_exports._ffi_fn_test_register(register);
}

export function test_reinterpret_cast(reinterpret_cast: number): number {
    return _ffi_exports._ffi_fn_test_reinterpret_cast(reinterpret_cast);
}

export function test_repeat(repeat: number): number {
    return _ffi_exports._ffi_fn_test_repeat(repeat);
}

export function test_required(required: number): number {
    return _ffi_exports._ffi_fn_test_required(required);
}

export function test_requires(requires: number): number {
    return _ffi_exports._ffi_fn_test_requires(requires);
}

export function test_rethrows(rethrows: number): number {
    return _ffi_exports._ffi_fn_test_rethrows(rethrows);
}

export function test_right(right: number): number {
    return _ffi_exports._ffi_fn_test_right(right);
}

export function test_set(set: number): number {
    return _ffi_exports._ffi_fn_test_set(set);
}

export function test_short(short2: number): number {
    return _ffi_exports._ffi_fn_test_short(short2);
}

export function test_signed(signed: number): number {
    return _ffi_exports._ffi_fn_test_signed(signed);
}

export function test_sizeof(sizeof: number): number {
    return _ffi_exports._ffi_fn_test_sizeof(sizeof);
}

export function test_some(some: number): number {
    return _ffi_exports._ffi_fn_test_some(some);
}

export function test_static_assert(static_assert: number): number {
    return _ffi_exports._ffi_fn_test_static_assert(static_assert);
}

export function test_static_cast(static_cast: number): number {
    return _ffi_exports._ffi_fn_test_static_cast(static_cast);
}

export function test_subscript(subscript: number): number {
    return _ffi_exports._ffi_fn_test_subscript(subscript);
}

export function test_switch(switch2: number): number {
    return _ffi_exports._ffi_fn_test_switch(switch2);
}

export function test_synchronized(synchronized2: number): number {
    return _ffi_exports._ffi_fn_test_synchronized(synchronized2);
}

export function test_template(template: number): number {
    return _ffi_exports._ffi_fn_test_template(template);
}

export function test_this(this2: number): number {
    return _ffi_exports._ffi_fn_test_this(this2);
}

export function test_thread_local(thread_local: number): number {
    return _ffi_exports._ffi_fn_test_thread_local(thread_local);
}

export function test_throw(throw2: number): number {
    return _ffi_exports._ffi_fn_test_throw(throw2);
}

export function test_throws(throws2: number): number {
    return _ffi_exports._ffi_fn_test_throws(throws2);
}

export function test_transient(transient2: number): number {
    return _ffi_exports._ffi_fn_test_transient(transient2);
}

export function test_typealias(typealias: number): number {
    return _ffi_exports._ffi_fn_test_typealias(typealias);
}

export function test_typedef(typedef: number): number {
    return _ffi_exports._ffi_fn_test_typedef(typedef);
}

export function test_typeid(typeid: number): number {
    return _ffi_exports._ffi_fn_test_typeid(typeid);
}

export function test_typename(typename: number): number {
    return _ffi_exports._ffi_fn_test_typename(typename);
}

export function test_undefined(undefined2: number): number {
    return _ffi_exports._ffi_fn_test_undefined(undefined2);
}

export function test_union(union: number): number {
    return _ffi_exports._ffi_fn_test_union(union);
}

export function test_unowned(unowned: number): number {
    return _ffi_exports._ffi_fn_test_unowned(unowned);
}

export function test_unsigned(unsigned: number): number {
    return _ffi_exports._ffi_fn_test_unsigned(unsigned);
}

export function test_using(using: number): number {
    return _ffi_exports._ffi_fn_test_using(using);
}

export function test_var(var2: number): number {
    return _ffi_exports._ffi_fn_test_var(var2);
}

export function test_void(void2: number): number {
    return _ffi_exports._ffi_fn_test_void(void2);
}

export function test_volatile(volatile2: number): number {
    return _ffi_exports._ffi_fn_test_volatile(volatile2);
}

export function test_wchar_t(wchar_t: number): number {
    return _ffi_exports._ffi_fn_test_wchar_t(wchar_t);
}

export function test_weak(weak: number): number {
    return _ffi_exports._ffi_fn_test_weak(weak);
}

export function test_with(with2: number): number {
    return _ffi_exports._ffi_fn_test_with(with2);
}

export function test_xor(xor: number): number {
    return _ffi_exports._ffi_fn_test_xor(xor);
}

export function test_xor_eq(xor_eq: number): number {
    return _ffi_exports._ffi_fn_test_xor_eq(xor_eq);
}

let _ffi_exports: {
    memory: WebAssembly.Memory,
    _ffi_fn_rust_mem_leaked: () => number,
    _ffi_fn_test_alignas: (alignas: number) => number,
    _ffi_fn_test_alignof: (alignof: number) => number,
    _ffi_fn_test_and: (and: number) => number,
    _ffi_fn_test_and_eq: (and_eq: number) => number,
    _ffi_fn_test_asm: (asm: number) => number,
    _ffi_fn_test_associatedtype: (associatedtype: number) => number,
    _ffi_fn_test_associativity: (associativity: number) => number,
    _ffi_fn_test_atomic_cancel: (atomic_cancel: number) => number,
    _ffi_fn_test_atomic_commit: (atomic_commit: number) => number,
    _ffi_fn_test_atomic_noexcept: (atomic_noexcept: number) => number,
    _ffi_fn_test_auto: (auto: number) => number,
    _ffi_fn_test_bitand: (bitand: number) => number,
    _ffi_fn_test_bitor: (bitor: number) => number,
    _ffi_fn_test_bool: (bool: number) => number,
    _ffi_fn_test_boolean: (boolean2: number) => number,
    _ffi_fn_test_borrowing: (borrowing: number) => number,
    _ffi_fn_test_byte: (byte2: number) => number,
    _ffi_fn_test_case: (case2: number) => number,
    _ffi_fn_test_catch: (catch2: number) => number,
    _ffi_fn_test_char: (char2: number) => number,
    _ffi_fn_test_char16_t: (char16_t: number) => number,
    _ffi_fn_test_char32_t: (char32_t: number) => number,
    _ffi_fn_test_char8_t: (char8_t: number) => number,
    _ffi_fn_test_class: (class2: number) => number,
    _ffi_fn_test_co_await: (co_await: number) => number,
    _ffi_fn_test_co_return: (co_return: number) => number,
    _ffi_fn_test_co_yield: (co_yield: number) => number,
    _ffi_fn_test_compl: (compl: number) => number,
    _ffi_fn_test_concept: (concept: number) => number,
    _ffi_fn_test_const_cast: (const_cast: number) => number,
    _ffi_fn_test_consteval: (consteval: number) => number,
    _ffi_fn_test_constexpr: (constexpr: number) => number,
    _ffi_fn_test_constinit: (constinit: number) => number,
    _ffi_fn_test_consuming: (consuming: number) => number,
    _ffi_fn_test_contract_assert: (contract_assert: number) => number,
    _ffi_fn_test_convenience: (convenience: number) => number,
    _ffi_fn_test_debugger: (debugger2: number) => number,
    _ffi_fn_test_decltype: (decltype: number) => number,
    _ffi_fn_test_default: (default2: number) => number,
    _ffi_fn_test_defer: (defer: number) => number,
    _ffi_fn_test_deinit: (deinit: number) => number,
    _ffi_fn_test_delete: (delete2: number) => number,
    _ffi_fn_test_double: (double2: number) => number,
    _ffi_fn_test_dynamic: (dynamic: number) => number,
    _ffi_fn_test_dynamic_cast: (dynamic_cast: number) => number,
    _ffi_fn_test_explicit: (explicit: number) => number,
    _ffi_fn_test_export: (export2: number) => number,
    _ffi_fn_test_extends: (extends2: number) => number,
    _ffi_fn_test_extension: (extension: number) => number,
    _ffi_fn_test_fallthrough: (fallthrough: number) => number,
    _ffi_fn_test_fileprivate: (fileprivate: number) => number,
    _ffi_fn_test_finally: (finally2: number) => number,
    _ffi_fn_test_float: (float2: number) => number,
    _ffi_fn_test_friend: (friend: number) => number,
    _ffi_fn_test_func: (func: number) => number,
    _ffi_fn_test_function: (function2: number) => number,
    _ffi_fn_test_get: (get: number) => number,
    _ffi_fn_test_goto: (goto2: number) => number,
    _ffi_fn_test_guard: (guard: number) => number,
    _ffi_fn_test_implements: (implements2: number) => number,
    _ffi_fn_test_import: (import2: number) => number,
    _ffi_fn_test_indirect: (indirect: number) => number,
    _ffi_fn_test_infix: (infix: number) => number,
    _ffi_fn_test_init: (init: number) => number,
    _ffi_fn_test_inline: (inline: number) => number,
    _ffi_fn_test_inout: (inout: number) => number,
    _ffi_fn_test_instanceof: (instanceof2: number) => number,
    _ffi_fn_test_int: (int2: number) => number,
    _ffi_fn_test_interface: (interface2: number) => number,
    _ffi_fn_test_internal: (internal: number) => number,
    _ffi_fn_test_is: (is: number) => number,
    _ffi_fn_test_lazy: (lazy: number) => number,
    _ffi_fn_test_left: (left: number) => number,
    _ffi_fn_test_long: (long2: number) => number,
    _ffi_fn_test_mutable: (mutable: number) => number,
    _ffi_fn_test_mutating: (mutating: number) => number,
    _ffi_fn_test_namespace: (namespace: number) => number,
    _ffi_fn_test_native: (native2: number) => number,
    _ffi_fn_test_new: (new2: number) => number,
    _ffi_fn_test_nil: (nil: number) => number,
    _ffi_fn_test_noexcept: (noexcept: number) => number,
    _ffi_fn_test_none: (none: number) => number,
    _ffi_fn_test_nonisolated: (nonisolated: number) => number,
    _ffi_fn_test_nonmutating: (nonmutating: number) => number,
    _ffi_fn_test_not: (not: number) => number,
    _ffi_fn_test_not_eq: (not_eq: number) => number,
    _ffi_fn_test_null: (null2: number) => number,
    _ffi_fn_test_nullptr: (nullptr: number) => number,
    _ffi_fn_test_open: (open: number) => number,
    _ffi_fn_test_operator: (operator: number) => number,
    _ffi_fn_test_optional: (optional: number) => number,
    _ffi_fn_test_or: (or: number) => number,
    _ffi_fn_test_or_eq: (or_eq: number) => number,
    _ffi_fn_test_package: (package2: number) => number,
    _ffi_fn_test_postfix: (postfix: number) => number,
    _ffi_fn_test_precedence: (precedence: number) => number,
    _ffi_fn_test_precedencegroup: (precedencegroup: number) => number,
    _ffi_fn_test_prefix: (prefix: number) => number,
    _ffi_fn_test_private: (private2: number) => number,
    _ffi_fn_test_protected: (protected2: number) => number,
    _ffi_fn_test_protocol: (protocol: number) => number,
    _ffi_fn_test_public: (public2: number) => number,
    _ffi_fn_test_reflexpr: (reflexpr: number) => number,
    _ffi_fn_test_register: (register: number) => number,
    _ffi_fn_test_reinterpret_cast: (reinterpret_cast: number) => number,
    _ffi_fn_test_repeat: (repeat: number) => number,
    _ffi_fn_test_required: (required: number) => number,
    _ffi_fn_test_requires: (requires: number) => number,
    _ffi_fn_test_rethrows: (rethrows: number) => number,
    _ffi_fn_test_right: (right: number) => number,
    _ffi_fn_test_set: (set: number) => number,
    _ffi_fn_test_short: (short2: number) => number,
    _ffi_fn_test_signed: (signed: number) => number,
    _ffi_fn_test_sizeof: (sizeof: number) => number,
    _ffi_fn_test_some: (some: number) => number,
    _ffi_fn_test_static_assert: (static_assert: number) => number,
    _ffi_fn_test_static_cast: (static_cast: number) => number,
    _ffi_fn_test_subscript: (subscript: number) => number,
    _ffi_fn_test_switch: (switch2: number) => number,
    _ffi_fn_test_synchronized: (synchronized2: number) => number,
    _ffi_fn_test_template: (template: number) => number,
    _ffi_fn_test_this: (this2: number) => number,
    _ffi_fn_test_thread_local: (thread_local: number) => number,
    _ffi_fn_test_throw: (throw2: number) => number,
    _ffi_fn_test_throws: (throws2: number) => number,
    _ffi_fn_test_transient: (transient2: number) => number,
    _ffi_fn_test_typealias: (typealias: number) => number,
    _ffi_fn_test_typedef: (typedef: number) => number,
    _ffi_fn_test_typeid: (typeid: number) => number,
    _ffi_fn_test_typename: (typename: number) => number,
    _ffi_fn_test_undefined: (undefined2: number) => number,
    _ffi_fn_test_union: (union: number) => number,
    _ffi_fn_test_unowned: (unowned: number) => number,
    _ffi_fn_test_unsigned: (unsigned: number) => number,
    _ffi_fn_test_using: (using: number) => number,
    _ffi_fn_test_var: (var2: number) => number,
    _ffi_fn_test_void: (void2: number) => number,
    _ffi_fn_test_volatile: (volatile2: number) => number,
    _ffi_fn_test_wchar_t: (wchar_t: number) => number,
    _ffi_fn_test_weak: (weak: number) => number,
    _ffi_fn_test_with: (with2: number) => number,
    _ffi_fn_test_xor: (xor: number) => number,
    _ffi_fn_test_xor_eq: (xor_eq: number) => number,
};

const _ffi_imports = {};
