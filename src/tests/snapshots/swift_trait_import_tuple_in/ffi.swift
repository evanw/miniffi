// This file was generated by miniffi v0.1.0. Do not edit.

protocol TupleIn: AnyObject {
    func empty_tuple(_ x: Int32, _ foo: (), _ y: Int32) -> Int32
    func single_element_tuple(_ x: Int32, _ y: Int32) -> Int32
    func multiply_pairs(_ ab: (Float32, Float32), _ cd: (Float32, Float32)) -> Float32
}

func rust_mem_leaked() -> UInt {
    return _ffi_fn_rust_mem_leaked()
}

func set_empty_tuple(_ tuple_in: TupleIn) -> Int32 {
    return _ffi_fn_set_empty_tuple(UnsafeRawPointer(Unmanaged.passRetained(tuple_in as AnyObject).toOpaque()))
}

func set_single_element_tuple(_ tuple_in: TupleIn) -> Int32 {
    return _ffi_fn_set_single_element_tuple(UnsafeRawPointer(Unmanaged.passRetained(tuple_in as AnyObject).toOpaque()))
}

func set_multiply_pairs(_ tuple_in: TupleIn) -> Float32 {
    return _ffi_fn_set_multiply_pairs(UnsafeRawPointer(Unmanaged.passRetained(tuple_in as AnyObject).toOpaque()))
}

@_cdecl("_ffi_swift_TupleIn__empty_tuple")
func _ffi_swift_TupleIn__empty_tuple(_self: UnsafeRawPointer?, x: Int32, y: Int32) -> Int32 {
    let _self = Unmanaged<AnyObject>.fromOpaque(_self!).takeUnretainedValue() as! TupleIn
    return _self.empty_tuple(x, (), y)
}

@_cdecl("_ffi_swift_TupleIn__multiply_pairs")
func _ffi_swift_TupleIn__multiply_pairs(_self: UnsafeRawPointer?, ab_0: Float32, ab_1: Float32, cd_0: Float32, cd_1: Float32) -> Float32 {
    let _self = Unmanaged<AnyObject>.fromOpaque(_self!).takeUnretainedValue() as! TupleIn
    return _self.multiply_pairs((ab_0, ab_1), (cd_0, cd_1))
}

@_cdecl("_ffi_swift_TupleIn__single_element_tuple")
func _ffi_swift_TupleIn__single_element_tuple(_self: UnsafeRawPointer?, x_0: Int32, y_0: Int32) -> Int32 {
    let _self = Unmanaged<AnyObject>.fromOpaque(_self!).takeUnretainedValue() as! TupleIn
    return _self.single_element_tuple(x_0, y_0)
}

@_cdecl("_ffi_swift_drop")
func _ffi_swift_drop(ptr: UnsafeRawPointer?) {
    _ = Unmanaged<AnyObject>.fromOpaque(ptr!).takeRetainedValue()
}
