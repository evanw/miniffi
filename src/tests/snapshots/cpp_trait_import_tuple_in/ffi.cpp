// This file was generated by miniffi v0.1.0. Do not edit.

#include "ffi.h"

extern "C" {

uintptr_t _ffi_fn_rust_mem_leaked();
int32_t _ffi_fn_set_empty_tuple(const void* tuple_in_ptr);
float _ffi_fn_set_multiply_pairs(const void* tuple_in_ptr);
int32_t _ffi_fn_set_single_element_tuple(const void* tuple_in_ptr);

} // extern "C"

extern "C" {

int32_t _ffi_cpp_Rc_TupleIn__empty_tuple(std::shared_ptr<rust::TupleIn>* _self, int32_t x, int32_t y) {
    auto foo = std::tuple<>();
    return _self->get()->empty_tuple(x, std::move(foo), y);
}

float _ffi_cpp_Rc_TupleIn__multiply_pairs(std::shared_ptr<rust::TupleIn>* _self, float ab_0, float ab_1, float cd_0, float cd_1) {
    auto ab = std::make_tuple(ab_0, ab_1);
    auto cd = std::make_tuple(cd_0, cd_1);
    return _self->get()->multiply_pairs(std::move(ab), std::move(cd));
}

int32_t _ffi_cpp_Rc_TupleIn__single_element_tuple(std::shared_ptr<rust::TupleIn>* _self, int32_t x_0, int32_t y_0) {
    auto x = x_0;
    auto y = y_0;
    return _self->get()->single_element_tuple(std::move(x), std::move(y));
}

void _ffi_cpp_drop_Rc_TupleIn(std::shared_ptr<rust::TupleIn>* self) {
    delete self;
}

} // extern "C"

uintptr_t rust::rust_mem_leaked() {
    return _ffi_fn_rust_mem_leaked();
}

int32_t rust::set_empty_tuple(std::shared_ptr<rust::TupleIn> tuple_in) {
    auto tuple_in_ptr = new std::shared_ptr<rust::TupleIn>(tuple_in);
    return _ffi_fn_set_empty_tuple(tuple_in_ptr);
}

float rust::set_multiply_pairs(std::shared_ptr<rust::TupleIn> tuple_in) {
    auto tuple_in_ptr = new std::shared_ptr<rust::TupleIn>(tuple_in);
    return _ffi_fn_set_multiply_pairs(tuple_in_ptr);
}

int32_t rust::set_single_element_tuple(std::shared_ptr<rust::TupleIn> tuple_in) {
    auto tuple_in_ptr = new std::shared_ptr<rust::TupleIn>(tuple_in);
    return _ffi_fn_set_single_element_tuple(tuple_in_ptr);
}
