// This file was generated by miniffi v0.1.0. Do not edit.

#pragma once

#include <memory>
#include <stdint.h>
#include <tuple>

namespace rust {

struct TupleIn {
    virtual ~TupleIn() {}
    virtual int32_t empty_tuple(int32_t x, std::tuple<> foo, int32_t y) = 0;
    virtual int32_t single_element_tuple(std::tuple<int32_t> x, std::tuple<int32_t> y) = 0;
    virtual float multiply_pairs(std::tuple<float, float> ab, std::tuple<float, float> cd) = 0;
};

uintptr_t rust_mem_leaked();

int32_t set_empty_tuple(std::shared_ptr<TupleIn> tuple_in);

int32_t set_single_element_tuple(std::shared_ptr<TupleIn> tuple_in);

float set_multiply_pairs(std::shared_ptr<TupleIn> tuple_in);

} // namespace rust
