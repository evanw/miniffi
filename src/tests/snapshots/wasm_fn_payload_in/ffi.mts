// This file was generated by miniffi v0.1.0. Do not edit.

export async function instantiate(bytes: BufferSource, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }> {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiate(bytes, { env });
    _ffi_exports = (await promise).instance.exports as any;
    return { memory: _ffi_exports.memory };
}

export async function instantiateStreaming(source: Response | PromiseLike<Response>, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }> {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiateStreaming(source, { env });
    _ffi_exports = (await promise).instance.exports as any;
    return { memory: _ffi_exports.memory };
}

export type Foo =
    | { readonly $: "Empty" }
    | { readonly $: "Single", 0: number }
    | { readonly $: "Point", x: number, y: number }
    | { readonly $: "Nested", 0: Foo }

export function rust_mem_leaked(): number {
    return _ffi_exports._ffi_fn_rust_mem_leaked();
}

export function set_tests(tests: Foo[]): boolean {
    let buf = _ffi_new_WriteBuf();
    let tests_len = tests.length;
    _ffi_vec_Foo_to_rust(tests, buf);
    let ret = _ffi_exports._ffi_fn_set_tests(_ffi_buf_to_rust(buf), tests_len);
    return !!ret;
}

let _ffi_new_WriteBuf = (): _ffi_WriteBuf => ({ u8: new Uint8Array(16), dv: null, off: 0 });
let _ffi_u8: Uint8Array;

interface _ffi_WriteBuf {
    u8: Uint8Array,
    dv: DataView | null,
    off: number,
}

function _ffi_box_Foo_to_rust(val: Foo, buf: _ffi_WriteBuf): void {
    _ffi_enum_Foo_to_rust(val, buf);
}

function _ffi_update_u8(): Uint8Array {
    let buffer = _ffi_exports.memory.buffer;
    if (!_ffi_u8 || _ffi_u8.buffer !== buffer) _ffi_u8 = new Uint8Array(buffer);
    return _ffi_u8;
}

function _ffi_buf_to_rust({ u8, off }: _ffi_WriteBuf): number {
    let ptr = _ffi_exports._ffi_alloc(off);
    _ffi_update_u8().set(u8.length > off ? u8.subarray(0, off) : u8, ptr);
    return ptr;
}

function _ffi_enum_Foo_to_rust(val: Foo, buf: _ffi_WriteBuf): void {
    switch (val.$) {
        case "Empty":
            _ffi_write_i32(buf, 0);
            break;
        case "Single":
            _ffi_write_i32(buf, 1);
            _ffi_write_i32(buf, val[0]);
            break;
        case "Point":
            _ffi_write_i32(buf, 2);
            _ffi_write_i32(buf, val.x);
            _ffi_write_i32(buf, val.y);
            break;
        case "Nested":
            _ffi_write_i32(buf, 3);
            _ffi_box_Foo_to_rust(val[0], buf);
            break;
        default:
            throw TypeError("Invalid value for enum \"Foo\"");
    }
}

function _ffi_vec_Foo_to_rust(items: Foo[], buf: _ffi_WriteBuf): void {
    for (const item of items) {
        _ffi_enum_Foo_to_rust(item, buf);
    }
}

function _ffi_grow(buf: _ffi_WriteBuf, n: number): number {
    let off = buf.off;
    let u8 = buf.u8;
    if (off + n > u8.length) {
        (buf.u8 = new Uint8Array((off + n) << 1)).set(u8);
        buf.dv = null;
    }
    buf.off += n;
    if (!buf.dv) buf.dv = new DataView(buf.u8.buffer);
    return off;
}

function _ffi_write_i32(buf: _ffi_WriteBuf, val: number): void {
    let ptr = _ffi_grow(buf, 4);
    buf.dv!.setInt32(ptr, val, true);
}

let _ffi_exports: {
    memory: WebAssembly.Memory,
    _ffi_fn_rust_mem_leaked: () => number,
    _ffi_fn_set_tests: (buf_ptr: number, tests_len: number) => boolean,
    _ffi_alloc: (len: number) => number,
};

const _ffi_imports = {};
