// This file was generated by miniffi v0.1.0. Do not edit.

#[unsafe(no_mangle)]
extern "C" fn _ffi_Rc_Exported__run(_self: *const u8, imported_ptr: *const u8) -> i32 {
    let _self = unsafe { &*(_self as *const std::rc::Rc<dyn Exported>) };
    _self.run(std::rc::Rc::new(_ffi_rs_Imported(imported_ptr)))
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_get_counter() -> u32 {
    get_counter()
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_get_exported() -> *const u8 {
    Box::into_raw(Box::new(get_exported())) as *const u8
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_rust_mem_leaked() -> usize {
    rust_mem_leaked()
}

#[allow(non_camel_case_types)]
struct _ffi_rs_Imported(*const u8);

impl Drop for _ffi_rs_Imported {
    fn drop(&mut self) {
        unsafe extern "C" { fn _ffi_swift_drop(_: *const u8); }
        unsafe { _ffi_swift_drop(self.0) };
    }
}

impl Imported for _ffi_rs_Imported {
    fn add(&self, x: i32, y: i32) -> i32 {
        unsafe extern "C" { fn _ffi_swift_Imported__add(_: *const u8, x: i32, y: i32) -> i32; }
        unsafe { _ffi_swift_Imported__add(self.0, x, y) }
    }
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_rs_drop_Rc_Exported(ptr: *const u8) {
    drop(unsafe { Box::from_raw(ptr as *mut std::rc::Rc<dyn Exported>) });
}
