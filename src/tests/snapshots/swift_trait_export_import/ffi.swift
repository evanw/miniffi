// This file was generated by miniffi v0.1.0. Do not edit.

protocol Imported: AnyObject {
    func add(_ x: Int32, _ y: Int32) -> Int32
}

protocol Exported: AnyObject {
    func run(_ imported: Imported) -> Int32
}

func rust_mem_leaked() -> UInt {
    return _ffi_fn_rust_mem_leaked()
}

func get_exported() -> Exported {
    let ret_ptr = _ffi_fn_get_exported()
    return _ffi_Rc_Exported(ret_ptr)
}

func get_counter() -> UInt32 {
    return _ffi_fn_get_counter()
}

private class _ffi_Rc_Exported : Exported {
    private var _ffi: UnsafeRawPointer?

    init(_ ptr: UnsafeRawPointer?) {
        _ffi = ptr
    }

    deinit {
        _ffi_rs_drop_Rc_Exported(_ffi)
    }

    func run(_ imported: Imported) -> Int32 {
        return _ffi_Rc_Exported__run(_ffi, UnsafeRawPointer(Unmanaged.passRetained(imported as AnyObject).toOpaque()))
    }
}

@_cdecl("_ffi_swift_Imported__add")
func _ffi_swift_Imported__add(_self: UnsafeRawPointer?, x: Int32, y: Int32) -> Int32 {
    let _self = Unmanaged<AnyObject>.fromOpaque(_self!).takeUnretainedValue() as! Imported
    return _self.add(x, y)
}

@_cdecl("_ffi_swift_drop")
func _ffi_swift_drop(ptr: UnsafeRawPointer?) {
    _ = Unmanaged<AnyObject>.fromOpaque(ptr!).takeRetainedValue()
}
