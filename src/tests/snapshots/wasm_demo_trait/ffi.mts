// This file was generated by miniffi v0.1.0. Do not edit.

export async function instantiate(bytes: BufferSource, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }> {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiate(bytes, { env });
    _ffi_exports = (await promise).instance.exports as any;
    return { memory: _ffi_exports.memory };
}

export async function instantiateStreaming(source: Response | PromiseLike<Response>, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }> {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiateStreaming(source, { env });
    _ffi_exports = (await promise).instance.exports as any;
    return { memory: _ffi_exports.memory };
}

export interface Trait {
    get(): number;
}

export interface Example {
    box_ptr: Trait,
    rc_ptr: Trait,
    text: string,
    vec_box: Trait[],
    vec_rc: Trait[],
}

export function rust_mem_leaked(): number {
    return _ffi_exports._ffi_fn_rust_mem_leaked();
}

export function test(vec: Example[]): Example[] {
    let buf = _ffi_new_WriteBuf();
    let vec_len = vec.length;
    _ffi_vec_Example_to_rust(vec, buf);
    let multi_ret = _ffi_exports._ffi_fn_test(_ffi_buf_to_rust(buf), vec_len);
    let buf_ptr2 = _ffi_update_dv().getInt32(multi_ret, true);
    let buf_cap = _ffi_dv.getUint32(multi_ret + 4, true);
    let ret_len = _ffi_dv.getUint32(multi_ret + 8, true);
    let buf2 = _ffi_new_ReadBuf(buf_ptr2);
    let ret = _ffi_vec_Example_from_rust(ret_len, buf2);
    _ffi_exports._ffi_dealloc(buf_ptr2, buf_cap);
    return ret;
}

let _ffi_len = 0;
let _ffi_dv: DataView;
let _ffi_new_ReadBuf = (off: number): _ffi_ReadBuf => ({ dv: _ffi_update_dv(), off });
let _ffi_new_WriteBuf = (): _ffi_WriteBuf => ({ u8: new Uint8Array(16), dv: null, off: 0 });
let _ffi_reg_Box_Trait = new FinalizationRegistry((ptr: number) => _ffi_exports._ffi_rs_drop_Box_Trait(ptr));
let _ffi_reg_Rc_Trait = new FinalizationRegistry((ptr: number) => _ffi_exports._ffi_rs_drop_Rc_Trait(ptr));
let _ffi_u8: Uint8Array;
let _ffi_handles: Map<number, any> = /* @__PURE__ */ new Map;
let _ffi_next_handle = 0;
let _ffi_decoder = /* @__PURE__ */ new TextDecoder;
let _ffi_encoder = /* @__PURE__ */ new TextEncoder;

interface _ffi_ReadBuf {
    dv: DataView,
    off: number,
}

function _ffi_update_dv(): DataView {
    let buffer = _ffi_exports.memory.buffer;
    if (!_ffi_dv || _ffi_dv.buffer !== buffer) _ffi_dv = new DataView(buffer);
    return _ffi_dv;
}

interface _ffi_WriteBuf {
    u8: Uint8Array,
    dv: DataView | null,
    off: number,
}

const _ffi_Box_Trait = class Trait implements Trait {
    declare readonly _: number;

    constructor(_: number) {
        Object.defineProperty(this, "_", { value: _ });
        _ffi_reg_Box_Trait.register(this, _);
    }

    get(): number {
        return _ffi_exports._ffi_Box_Trait__get(this._);
    }
};

const _ffi_Rc_Trait = class Trait implements Trait {
    declare readonly _: number;

    constructor(_: number) {
        Object.defineProperty(this, "_", { value: _ });
        _ffi_reg_Rc_Trait.register(this, _);
    }

    get(): number {
        return _ffi_exports._ffi_Rc_Trait__get(this._);
    }
};

function _ffi_update_u8(): Uint8Array {
    let buffer = _ffi_exports.memory.buffer;
    if (!_ffi_u8 || _ffi_u8.buffer !== buffer) _ffi_u8 = new Uint8Array(buffer);
    return _ffi_u8;
}

function _ffi_buf_to_rust({ u8, off }: _ffi_WriteBuf): number {
    let ptr = _ffi_exports._ffi_alloc(off);
    _ffi_update_u8().set(u8.length > off ? u8.subarray(0, off) : u8, ptr);
    return ptr;
}

function _ffi_handle_alloc(obj: any): number {
    _ffi_handles.set(++_ffi_next_handle, obj);
    return _ffi_next_handle;
}

function _ffi_read_i32(buf: _ffi_ReadBuf): number {
    let val = buf.dv.getInt32(buf.off, true);
    buf.off += 4;
    return val;
}

function _ffi_read_u32(buf: _ffi_ReadBuf): number {
    let val = buf.dv.getUint32(buf.off, true);
    buf.off += 4;
    return val;
}

function _ffi_string_from_rust(ptr: number, len: number, cap: number): string {
    let str = _ffi_decoder.decode(new Uint8Array(_ffi_exports.memory.buffer, ptr, len));
    _ffi_exports._ffi_dealloc(ptr, cap);
    return str;
}

function _ffi_string_to_rust(str: string): number {
    let buf = _ffi_encoder.encode(str);
    let ptr = _ffi_exports._ffi_alloc(_ffi_len = buf.length);
    _ffi_update_u8().set(buf, ptr);
    return ptr;
}

function _ffi_vec_Example_from_rust(len: number, buf: _ffi_ReadBuf): Example[] {
    let items: Example[] = [];
    while (items.length < len) {
        items.push({
            box_ptr: new _ffi_Box_Trait(_ffi_read_i32(buf)),
            rc_ptr: new _ffi_Rc_Trait(_ffi_read_i32(buf)),
            text: _ffi_string_from_rust(_ffi_read_i32(buf), _ffi_read_u32(buf), _ffi_read_u32(buf)),
            vec_box: _ffi_vec_box_dyn_Trait_from_rust(_ffi_read_u32(buf), buf),
            vec_rc: _ffi_vec_rc_dyn_Trait_from_rust(_ffi_read_u32(buf), buf)
        });
    }
    return items;
}

function _ffi_vec_Example_to_rust(items: Example[], buf: _ffi_WriteBuf): void {
    for (const item of items) {
        _ffi_write_i32(buf, _ffi_handle_alloc(item.box_ptr));
        _ffi_write_i32(buf, _ffi_handle_alloc(item.rc_ptr));
        let item_text_ptr = _ffi_string_to_rust(item.text), item_text_len = _ffi_len;
        _ffi_write_i32(buf, item_text_ptr);
        _ffi_write_i32(buf, item_text_len);
        _ffi_write_i32(buf, item.vec_box.length);
        _ffi_vec_box_dyn_Trait_to_rust(item.vec_box, buf);
        _ffi_write_i32(buf, item.vec_rc.length);
        _ffi_vec_rc_dyn_Trait_to_rust(item.vec_rc, buf);
    }
}

function _ffi_vec_box_dyn_Trait_from_rust(len: number, buf: _ffi_ReadBuf): Trait[] {
    let items: Trait[] = [];
    while (items.length < len) {
        items.push(new _ffi_Box_Trait(_ffi_read_i32(buf)));
    }
    return items;
}

function _ffi_vec_box_dyn_Trait_to_rust(items: Trait[], buf: _ffi_WriteBuf): void {
    for (const item of items) {
        _ffi_write_i32(buf, _ffi_handle_alloc(item));
    }
}

function _ffi_vec_rc_dyn_Trait_from_rust(len: number, buf: _ffi_ReadBuf): Trait[] {
    let items: Trait[] = [];
    while (items.length < len) {
        items.push(new _ffi_Rc_Trait(_ffi_read_i32(buf)));
    }
    return items;
}

function _ffi_vec_rc_dyn_Trait_to_rust(items: Trait[], buf: _ffi_WriteBuf): void {
    for (const item of items) {
        _ffi_write_i32(buf, _ffi_handle_alloc(item));
    }
}

function _ffi_grow(buf: _ffi_WriteBuf, n: number): number {
    let off = buf.off;
    let u8 = buf.u8;
    if (off + n > u8.length) {
        (buf.u8 = new Uint8Array((off + n) << 1)).set(u8);
        buf.dv = null;
    }
    buf.off += n;
    if (!buf.dv) buf.dv = new DataView(buf.u8.buffer);
    return off;
}

function _ffi_write_i32(buf: _ffi_WriteBuf, val: number): void {
    let ptr = _ffi_grow(buf, 4);
    buf.dv!.setInt32(ptr, val, true);
}

let _ffi_exports: {
    memory: WebAssembly.Memory,
    _ffi_Box_Trait__get: (_self: number) => number,
    _ffi_Rc_Trait__get: (_self: number) => number,
    _ffi_dealloc: (ptr: number, capacity: number) => void,
    _ffi_fn_rust_mem_leaked: () => number,
    _ffi_fn_test: (buf_ptr: number, vec_len: number) => number,
    _ffi_rs_drop_Box_Trait: (ptr: number) => void,
    _ffi_rs_drop_Rc_Trait: (ptr: number) => void,
    _ffi_alloc: (len: number) => number,
};

const _ffi_imports = {
    _ffi_js_Trait__get(self: number): number {
        return _ffi_handles.get(self).get();
    },

    _ffi_js_drop(handle: number): void {
        _ffi_handles.delete(handle);
    },
};
