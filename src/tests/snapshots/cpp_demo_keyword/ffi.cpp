// This file was generated by miniffi v0.1.0. Do not edit.

#include "ffi.h"

extern "C" {

uintptr_t _ffi_fn_rust_mem_leaked();
int32_t _ffi_fn_test_alignas(int32_t alignas2);
int32_t _ffi_fn_test_alignof(int32_t alignof2);
int32_t _ffi_fn_test_and(int32_t and2);
int32_t _ffi_fn_test_and_eq(int32_t and_eq2);
int32_t _ffi_fn_test_asm(int32_t asm2);
int32_t _ffi_fn_test_associatedtype(int32_t associatedtype);
int32_t _ffi_fn_test_associativity(int32_t associativity);
int32_t _ffi_fn_test_atomic_cancel(int32_t atomic_cancel2);
int32_t _ffi_fn_test_atomic_commit(int32_t atomic_commit2);
int32_t _ffi_fn_test_atomic_noexcept(int32_t atomic_noexcept2);
int32_t _ffi_fn_test_auto(int32_t auto2);
int32_t _ffi_fn_test_bitand(int32_t bitand2);
int32_t _ffi_fn_test_bitor(int32_t bitor2);
int32_t _ffi_fn_test_bool(int32_t bool2);
int32_t _ffi_fn_test_boolean(int32_t boolean);
int32_t _ffi_fn_test_borrowing(int32_t borrowing);
int32_t _ffi_fn_test_byte(int32_t byte);
int32_t _ffi_fn_test_case(int32_t case2);
int32_t _ffi_fn_test_catch(int32_t catch2);
int32_t _ffi_fn_test_char(int32_t char2);
int32_t _ffi_fn_test_char16_t(int32_t char16_t2);
int32_t _ffi_fn_test_char32_t(int32_t char32_t2);
int32_t _ffi_fn_test_char8_t(int32_t char8_t2);
int32_t _ffi_fn_test_class(int32_t class2);
int32_t _ffi_fn_test_co_await(int32_t co_await2);
int32_t _ffi_fn_test_co_return(int32_t co_return2);
int32_t _ffi_fn_test_co_yield(int32_t co_yield2);
int32_t _ffi_fn_test_compl(int32_t compl2);
int32_t _ffi_fn_test_concept(int32_t concept2);
int32_t _ffi_fn_test_const_cast(int32_t const_cast2);
int32_t _ffi_fn_test_consteval(int32_t consteval2);
int32_t _ffi_fn_test_constexpr(int32_t constexpr2);
int32_t _ffi_fn_test_constinit(int32_t constinit2);
int32_t _ffi_fn_test_consuming(int32_t consuming);
int32_t _ffi_fn_test_contract_assert(int32_t contract_assert2);
int32_t _ffi_fn_test_convenience(int32_t convenience);
int32_t _ffi_fn_test_debugger(int32_t debugger);
int32_t _ffi_fn_test_decltype(int32_t decltype2);
int32_t _ffi_fn_test_default(int32_t default2);
int32_t _ffi_fn_test_defer(int32_t defer);
int32_t _ffi_fn_test_deinit(int32_t deinit);
int32_t _ffi_fn_test_delete(int32_t delete2);
int32_t _ffi_fn_test_double(int32_t double2);
int32_t _ffi_fn_test_dynamic(int32_t dynamic);
int32_t _ffi_fn_test_dynamic_cast(int32_t dynamic_cast2);
int32_t _ffi_fn_test_explicit(int32_t explicit2);
int32_t _ffi_fn_test_export(int32_t export2);
int32_t _ffi_fn_test_extends(int32_t extends);
int32_t _ffi_fn_test_extension(int32_t extension);
int32_t _ffi_fn_test_fallthrough(int32_t fallthrough);
int32_t _ffi_fn_test_fileprivate(int32_t fileprivate);
int32_t _ffi_fn_test_finally(int32_t finally);
int32_t _ffi_fn_test_float(int32_t float2);
int32_t _ffi_fn_test_friend(int32_t friend2);
int32_t _ffi_fn_test_func(int32_t func);
int32_t _ffi_fn_test_function(int32_t function);
int32_t _ffi_fn_test_get(int32_t get);
int32_t _ffi_fn_test_goto(int32_t goto2);
int32_t _ffi_fn_test_guard(int32_t guard);
int32_t _ffi_fn_test_implements(int32_t implements);
int32_t _ffi_fn_test_import(int32_t import);
int32_t _ffi_fn_test_indirect(int32_t indirect);
int32_t _ffi_fn_test_infix(int32_t infix);
int32_t _ffi_fn_test_init(int32_t init);
int32_t _ffi_fn_test_inline(int32_t inline2);
int32_t _ffi_fn_test_inout(int32_t inout);
int32_t _ffi_fn_test_instanceof(int32_t instanceof);
int32_t _ffi_fn_test_int(int32_t int2);
int32_t _ffi_fn_test_interface(int32_t interface);
int32_t _ffi_fn_test_internal(int32_t internal);
int32_t _ffi_fn_test_is(int32_t is);
int32_t _ffi_fn_test_lazy(int32_t lazy);
int32_t _ffi_fn_test_left(int32_t left);
int32_t _ffi_fn_test_long(int32_t long2);
int32_t _ffi_fn_test_mutable(int32_t mutable2);
int32_t _ffi_fn_test_mutating(int32_t mutating);
int32_t _ffi_fn_test_namespace(int32_t namespace2);
int32_t _ffi_fn_test_native(int32_t native);
int32_t _ffi_fn_test_new(int32_t new2);
int32_t _ffi_fn_test_nil(int32_t nil);
int32_t _ffi_fn_test_noexcept(int32_t noexcept2);
int32_t _ffi_fn_test_none(int32_t none);
int32_t _ffi_fn_test_nonisolated(int32_t nonisolated);
int32_t _ffi_fn_test_nonmutating(int32_t nonmutating);
int32_t _ffi_fn_test_not(int32_t not2);
int32_t _ffi_fn_test_not_eq(int32_t not_eq2);
int32_t _ffi_fn_test_null(int32_t null);
int32_t _ffi_fn_test_nullptr(int32_t nullptr2);
int32_t _ffi_fn_test_open(int32_t open);
int32_t _ffi_fn_test_operator(int32_t operator2);
int32_t _ffi_fn_test_optional(int32_t optional);
int32_t _ffi_fn_test_or(int32_t or2);
int32_t _ffi_fn_test_or_eq(int32_t or_eq2);
int32_t _ffi_fn_test_package(int32_t package);
int32_t _ffi_fn_test_postfix(int32_t postfix);
int32_t _ffi_fn_test_precedence(int32_t precedence);
int32_t _ffi_fn_test_precedencegroup(int32_t precedencegroup);
int32_t _ffi_fn_test_prefix(int32_t prefix);
int32_t _ffi_fn_test_private(int32_t private2);
int32_t _ffi_fn_test_protected(int32_t protected2);
int32_t _ffi_fn_test_protocol(int32_t protocol);
int32_t _ffi_fn_test_public(int32_t public2);
int32_t _ffi_fn_test_reflexpr(int32_t reflexpr2);
int32_t _ffi_fn_test_register(int32_t register2);
int32_t _ffi_fn_test_reinterpret_cast(int32_t reinterpret_cast2);
int32_t _ffi_fn_test_repeat(int32_t repeat);
int32_t _ffi_fn_test_required(int32_t required);
int32_t _ffi_fn_test_requires(int32_t requires2);
int32_t _ffi_fn_test_rethrows(int32_t rethrows);
int32_t _ffi_fn_test_right(int32_t right);
int32_t _ffi_fn_test_set(int32_t set);
int32_t _ffi_fn_test_short(int32_t short2);
int32_t _ffi_fn_test_signed(int32_t signed2);
int32_t _ffi_fn_test_sizeof(int32_t sizeof2);
int32_t _ffi_fn_test_some(int32_t some);
int32_t _ffi_fn_test_static_assert(int32_t static_assert2);
int32_t _ffi_fn_test_static_cast(int32_t static_cast2);
int32_t _ffi_fn_test_subscript(int32_t subscript);
int32_t _ffi_fn_test_switch(int32_t switch2);
int32_t _ffi_fn_test_synchronized(int32_t synchronized2);
int32_t _ffi_fn_test_template(int32_t template2);
int32_t _ffi_fn_test_this(int32_t this2);
int32_t _ffi_fn_test_thread_local(int32_t thread_local2);
int32_t _ffi_fn_test_throw(int32_t throw2);
int32_t _ffi_fn_test_throws(int32_t throws);
int32_t _ffi_fn_test_transient(int32_t transient);
int32_t _ffi_fn_test_typealias(int32_t typealias);
int32_t _ffi_fn_test_typedef(int32_t typedef2);
int32_t _ffi_fn_test_typeid(int32_t typeid2);
int32_t _ffi_fn_test_typename(int32_t typename2);
int32_t _ffi_fn_test_undefined(int32_t undefined);
int32_t _ffi_fn_test_union(int32_t union2);
int32_t _ffi_fn_test_unowned(int32_t unowned);
int32_t _ffi_fn_test_unsigned(int32_t unsigned2);
int32_t _ffi_fn_test_using(int32_t using2);
int32_t _ffi_fn_test_var(int32_t var);
int32_t _ffi_fn_test_void(int32_t void2);
int32_t _ffi_fn_test_volatile(int32_t volatile2);
int32_t _ffi_fn_test_wchar_t(int32_t wchar_t2);
int32_t _ffi_fn_test_weak(int32_t weak);
int32_t _ffi_fn_test_with(int32_t with);
int32_t _ffi_fn_test_xor(int32_t xor2);
int32_t _ffi_fn_test_xor_eq(int32_t xor_eq2);

} // extern "C"

uintptr_t rust::rust_mem_leaked() {
    return _ffi_fn_rust_mem_leaked();
}

int32_t rust::test_alignas(int32_t alignas2) {
    return _ffi_fn_test_alignas(alignas2);
}

int32_t rust::test_alignof(int32_t alignof2) {
    return _ffi_fn_test_alignof(alignof2);
}

int32_t rust::test_and(int32_t and2) {
    return _ffi_fn_test_and(and2);
}

int32_t rust::test_and_eq(int32_t and_eq2) {
    return _ffi_fn_test_and_eq(and_eq2);
}

int32_t rust::test_asm(int32_t asm2) {
    return _ffi_fn_test_asm(asm2);
}

int32_t rust::test_associatedtype(int32_t associatedtype) {
    return _ffi_fn_test_associatedtype(associatedtype);
}

int32_t rust::test_associativity(int32_t associativity) {
    return _ffi_fn_test_associativity(associativity);
}

int32_t rust::test_atomic_cancel(int32_t atomic_cancel2) {
    return _ffi_fn_test_atomic_cancel(atomic_cancel2);
}

int32_t rust::test_atomic_commit(int32_t atomic_commit2) {
    return _ffi_fn_test_atomic_commit(atomic_commit2);
}

int32_t rust::test_atomic_noexcept(int32_t atomic_noexcept2) {
    return _ffi_fn_test_atomic_noexcept(atomic_noexcept2);
}

int32_t rust::test_auto(int32_t auto2) {
    return _ffi_fn_test_auto(auto2);
}

int32_t rust::test_bitand(int32_t bitand2) {
    return _ffi_fn_test_bitand(bitand2);
}

int32_t rust::test_bitor(int32_t bitor2) {
    return _ffi_fn_test_bitor(bitor2);
}

int32_t rust::test_bool(int32_t bool2) {
    return _ffi_fn_test_bool(bool2);
}

int32_t rust::test_boolean(int32_t boolean) {
    return _ffi_fn_test_boolean(boolean);
}

int32_t rust::test_borrowing(int32_t borrowing) {
    return _ffi_fn_test_borrowing(borrowing);
}

int32_t rust::test_byte(int32_t byte) {
    return _ffi_fn_test_byte(byte);
}

int32_t rust::test_case(int32_t case2) {
    return _ffi_fn_test_case(case2);
}

int32_t rust::test_catch(int32_t catch2) {
    return _ffi_fn_test_catch(catch2);
}

int32_t rust::test_char(int32_t char2) {
    return _ffi_fn_test_char(char2);
}

int32_t rust::test_char16_t(int32_t char16_t2) {
    return _ffi_fn_test_char16_t(char16_t2);
}

int32_t rust::test_char32_t(int32_t char32_t2) {
    return _ffi_fn_test_char32_t(char32_t2);
}

int32_t rust::test_char8_t(int32_t char8_t2) {
    return _ffi_fn_test_char8_t(char8_t2);
}

int32_t rust::test_class(int32_t class2) {
    return _ffi_fn_test_class(class2);
}

int32_t rust::test_co_await(int32_t co_await2) {
    return _ffi_fn_test_co_await(co_await2);
}

int32_t rust::test_co_return(int32_t co_return2) {
    return _ffi_fn_test_co_return(co_return2);
}

int32_t rust::test_co_yield(int32_t co_yield2) {
    return _ffi_fn_test_co_yield(co_yield2);
}

int32_t rust::test_compl(int32_t compl2) {
    return _ffi_fn_test_compl(compl2);
}

int32_t rust::test_concept(int32_t concept2) {
    return _ffi_fn_test_concept(concept2);
}

int32_t rust::test_const_cast(int32_t const_cast2) {
    return _ffi_fn_test_const_cast(const_cast2);
}

int32_t rust::test_consteval(int32_t consteval2) {
    return _ffi_fn_test_consteval(consteval2);
}

int32_t rust::test_constexpr(int32_t constexpr2) {
    return _ffi_fn_test_constexpr(constexpr2);
}

int32_t rust::test_constinit(int32_t constinit2) {
    return _ffi_fn_test_constinit(constinit2);
}

int32_t rust::test_consuming(int32_t consuming) {
    return _ffi_fn_test_consuming(consuming);
}

int32_t rust::test_contract_assert(int32_t contract_assert2) {
    return _ffi_fn_test_contract_assert(contract_assert2);
}

int32_t rust::test_convenience(int32_t convenience) {
    return _ffi_fn_test_convenience(convenience);
}

int32_t rust::test_debugger(int32_t debugger) {
    return _ffi_fn_test_debugger(debugger);
}

int32_t rust::test_decltype(int32_t decltype2) {
    return _ffi_fn_test_decltype(decltype2);
}

int32_t rust::test_default(int32_t default2) {
    return _ffi_fn_test_default(default2);
}

int32_t rust::test_defer(int32_t defer) {
    return _ffi_fn_test_defer(defer);
}

int32_t rust::test_deinit(int32_t deinit) {
    return _ffi_fn_test_deinit(deinit);
}

int32_t rust::test_delete(int32_t delete2) {
    return _ffi_fn_test_delete(delete2);
}

int32_t rust::test_double(int32_t double2) {
    return _ffi_fn_test_double(double2);
}

int32_t rust::test_dynamic(int32_t dynamic) {
    return _ffi_fn_test_dynamic(dynamic);
}

int32_t rust::test_dynamic_cast(int32_t dynamic_cast2) {
    return _ffi_fn_test_dynamic_cast(dynamic_cast2);
}

int32_t rust::test_explicit(int32_t explicit2) {
    return _ffi_fn_test_explicit(explicit2);
}

int32_t rust::test_export(int32_t export2) {
    return _ffi_fn_test_export(export2);
}

int32_t rust::test_extends(int32_t extends) {
    return _ffi_fn_test_extends(extends);
}

int32_t rust::test_extension(int32_t extension) {
    return _ffi_fn_test_extension(extension);
}

int32_t rust::test_fallthrough(int32_t fallthrough) {
    return _ffi_fn_test_fallthrough(fallthrough);
}

int32_t rust::test_fileprivate(int32_t fileprivate) {
    return _ffi_fn_test_fileprivate(fileprivate);
}

int32_t rust::test_finally(int32_t finally) {
    return _ffi_fn_test_finally(finally);
}

int32_t rust::test_float(int32_t float2) {
    return _ffi_fn_test_float(float2);
}

int32_t rust::test_friend(int32_t friend2) {
    return _ffi_fn_test_friend(friend2);
}

int32_t rust::test_func(int32_t func) {
    return _ffi_fn_test_func(func);
}

int32_t rust::test_function(int32_t function) {
    return _ffi_fn_test_function(function);
}

int32_t rust::test_get(int32_t get) {
    return _ffi_fn_test_get(get);
}

int32_t rust::test_goto(int32_t goto2) {
    return _ffi_fn_test_goto(goto2);
}

int32_t rust::test_guard(int32_t guard) {
    return _ffi_fn_test_guard(guard);
}

int32_t rust::test_implements(int32_t implements) {
    return _ffi_fn_test_implements(implements);
}

int32_t rust::test_import(int32_t import) {
    return _ffi_fn_test_import(import);
}

int32_t rust::test_indirect(int32_t indirect) {
    return _ffi_fn_test_indirect(indirect);
}

int32_t rust::test_infix(int32_t infix) {
    return _ffi_fn_test_infix(infix);
}

int32_t rust::test_init(int32_t init) {
    return _ffi_fn_test_init(init);
}

int32_t rust::test_inline(int32_t inline2) {
    return _ffi_fn_test_inline(inline2);
}

int32_t rust::test_inout(int32_t inout) {
    return _ffi_fn_test_inout(inout);
}

int32_t rust::test_instanceof(int32_t instanceof) {
    return _ffi_fn_test_instanceof(instanceof);
}

int32_t rust::test_int(int32_t int2) {
    return _ffi_fn_test_int(int2);
}

int32_t rust::test_interface(int32_t interface) {
    return _ffi_fn_test_interface(interface);
}

int32_t rust::test_internal(int32_t internal) {
    return _ffi_fn_test_internal(internal);
}

int32_t rust::test_is(int32_t is) {
    return _ffi_fn_test_is(is);
}

int32_t rust::test_lazy(int32_t lazy) {
    return _ffi_fn_test_lazy(lazy);
}

int32_t rust::test_left(int32_t left) {
    return _ffi_fn_test_left(left);
}

int32_t rust::test_long(int32_t long2) {
    return _ffi_fn_test_long(long2);
}

int32_t rust::test_mutable(int32_t mutable2) {
    return _ffi_fn_test_mutable(mutable2);
}

int32_t rust::test_mutating(int32_t mutating) {
    return _ffi_fn_test_mutating(mutating);
}

int32_t rust::test_namespace(int32_t namespace2) {
    return _ffi_fn_test_namespace(namespace2);
}

int32_t rust::test_native(int32_t native) {
    return _ffi_fn_test_native(native);
}

int32_t rust::test_new(int32_t new2) {
    return _ffi_fn_test_new(new2);
}

int32_t rust::test_nil(int32_t nil) {
    return _ffi_fn_test_nil(nil);
}

int32_t rust::test_noexcept(int32_t noexcept2) {
    return _ffi_fn_test_noexcept(noexcept2);
}

int32_t rust::test_none(int32_t none) {
    return _ffi_fn_test_none(none);
}

int32_t rust::test_nonisolated(int32_t nonisolated) {
    return _ffi_fn_test_nonisolated(nonisolated);
}

int32_t rust::test_nonmutating(int32_t nonmutating) {
    return _ffi_fn_test_nonmutating(nonmutating);
}

int32_t rust::test_not(int32_t not2) {
    return _ffi_fn_test_not(not2);
}

int32_t rust::test_not_eq(int32_t not_eq2) {
    return _ffi_fn_test_not_eq(not_eq2);
}

int32_t rust::test_null(int32_t null) {
    return _ffi_fn_test_null(null);
}

int32_t rust::test_nullptr(int32_t nullptr2) {
    return _ffi_fn_test_nullptr(nullptr2);
}

int32_t rust::test_open(int32_t open) {
    return _ffi_fn_test_open(open);
}

int32_t rust::test_operator(int32_t operator2) {
    return _ffi_fn_test_operator(operator2);
}

int32_t rust::test_optional(int32_t optional) {
    return _ffi_fn_test_optional(optional);
}

int32_t rust::test_or(int32_t or2) {
    return _ffi_fn_test_or(or2);
}

int32_t rust::test_or_eq(int32_t or_eq2) {
    return _ffi_fn_test_or_eq(or_eq2);
}

int32_t rust::test_package(int32_t package) {
    return _ffi_fn_test_package(package);
}

int32_t rust::test_postfix(int32_t postfix) {
    return _ffi_fn_test_postfix(postfix);
}

int32_t rust::test_precedence(int32_t precedence) {
    return _ffi_fn_test_precedence(precedence);
}

int32_t rust::test_precedencegroup(int32_t precedencegroup) {
    return _ffi_fn_test_precedencegroup(precedencegroup);
}

int32_t rust::test_prefix(int32_t prefix) {
    return _ffi_fn_test_prefix(prefix);
}

int32_t rust::test_private(int32_t private2) {
    return _ffi_fn_test_private(private2);
}

int32_t rust::test_protected(int32_t protected2) {
    return _ffi_fn_test_protected(protected2);
}

int32_t rust::test_protocol(int32_t protocol) {
    return _ffi_fn_test_protocol(protocol);
}

int32_t rust::test_public(int32_t public2) {
    return _ffi_fn_test_public(public2);
}

int32_t rust::test_reflexpr(int32_t reflexpr2) {
    return _ffi_fn_test_reflexpr(reflexpr2);
}

int32_t rust::test_register(int32_t register2) {
    return _ffi_fn_test_register(register2);
}

int32_t rust::test_reinterpret_cast(int32_t reinterpret_cast2) {
    return _ffi_fn_test_reinterpret_cast(reinterpret_cast2);
}

int32_t rust::test_repeat(int32_t repeat) {
    return _ffi_fn_test_repeat(repeat);
}

int32_t rust::test_required(int32_t required) {
    return _ffi_fn_test_required(required);
}

int32_t rust::test_requires(int32_t requires2) {
    return _ffi_fn_test_requires(requires2);
}

int32_t rust::test_rethrows(int32_t rethrows) {
    return _ffi_fn_test_rethrows(rethrows);
}

int32_t rust::test_right(int32_t right) {
    return _ffi_fn_test_right(right);
}

int32_t rust::test_set(int32_t set) {
    return _ffi_fn_test_set(set);
}

int32_t rust::test_short(int32_t short2) {
    return _ffi_fn_test_short(short2);
}

int32_t rust::test_signed(int32_t signed2) {
    return _ffi_fn_test_signed(signed2);
}

int32_t rust::test_sizeof(int32_t sizeof2) {
    return _ffi_fn_test_sizeof(sizeof2);
}

int32_t rust::test_some(int32_t some) {
    return _ffi_fn_test_some(some);
}

int32_t rust::test_static_assert(int32_t static_assert2) {
    return _ffi_fn_test_static_assert(static_assert2);
}

int32_t rust::test_static_cast(int32_t static_cast2) {
    return _ffi_fn_test_static_cast(static_cast2);
}

int32_t rust::test_subscript(int32_t subscript) {
    return _ffi_fn_test_subscript(subscript);
}

int32_t rust::test_switch(int32_t switch2) {
    return _ffi_fn_test_switch(switch2);
}

int32_t rust::test_synchronized(int32_t synchronized2) {
    return _ffi_fn_test_synchronized(synchronized2);
}

int32_t rust::test_template(int32_t template2) {
    return _ffi_fn_test_template(template2);
}

int32_t rust::test_this(int32_t this2) {
    return _ffi_fn_test_this(this2);
}

int32_t rust::test_thread_local(int32_t thread_local2) {
    return _ffi_fn_test_thread_local(thread_local2);
}

int32_t rust::test_throw(int32_t throw2) {
    return _ffi_fn_test_throw(throw2);
}

int32_t rust::test_throws(int32_t throws) {
    return _ffi_fn_test_throws(throws);
}

int32_t rust::test_transient(int32_t transient) {
    return _ffi_fn_test_transient(transient);
}

int32_t rust::test_typealias(int32_t typealias) {
    return _ffi_fn_test_typealias(typealias);
}

int32_t rust::test_typedef(int32_t typedef2) {
    return _ffi_fn_test_typedef(typedef2);
}

int32_t rust::test_typeid(int32_t typeid2) {
    return _ffi_fn_test_typeid(typeid2);
}

int32_t rust::test_typename(int32_t typename2) {
    return _ffi_fn_test_typename(typename2);
}

int32_t rust::test_undefined(int32_t undefined) {
    return _ffi_fn_test_undefined(undefined);
}

int32_t rust::test_union(int32_t union2) {
    return _ffi_fn_test_union(union2);
}

int32_t rust::test_unowned(int32_t unowned) {
    return _ffi_fn_test_unowned(unowned);
}

int32_t rust::test_unsigned(int32_t unsigned2) {
    return _ffi_fn_test_unsigned(unsigned2);
}

int32_t rust::test_using(int32_t using2) {
    return _ffi_fn_test_using(using2);
}

int32_t rust::test_var(int32_t var) {
    return _ffi_fn_test_var(var);
}

int32_t rust::test_void(int32_t void2) {
    return _ffi_fn_test_void(void2);
}

int32_t rust::test_volatile(int32_t volatile2) {
    return _ffi_fn_test_volatile(volatile2);
}

int32_t rust::test_wchar_t(int32_t wchar_t2) {
    return _ffi_fn_test_wchar_t(wchar_t2);
}

int32_t rust::test_weak(int32_t weak) {
    return _ffi_fn_test_weak(weak);
}

int32_t rust::test_with(int32_t with) {
    return _ffi_fn_test_with(with);
}

int32_t rust::test_xor(int32_t xor2) {
    return _ffi_fn_test_xor(xor2);
}

int32_t rust::test_xor_eq(int32_t xor_eq2) {
    return _ffi_fn_test_xor_eq(xor_eq2);
}
