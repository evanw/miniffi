// This file was generated by miniffi v0.1.0. Do not edit.

export async function instantiate(bytes: BufferSource, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }> {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiate(bytes, { env });
    _ffi_exports = (await promise).instance.exports as any;
    return { memory: _ffi_exports.memory };
}

export async function instantiateStreaming(source: Response | PromiseLike<Response>, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }> {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiateStreaming(source, { env });
    _ffi_exports = (await promise).instance.exports as any;
    return { memory: _ffi_exports.memory };
}

export function rust_mem_leaked(): number {
    return _ffi_exports._ffi_fn_rust_mem_leaked();
}

export function reset(): void {
    _ffi_exports._ffi_fn_reset();
}

export function get_string_len(): number {
    return _ffi_exports._ffi_fn_get_string_len();
}

export function get_string(): string {
    let multi_ret = _ffi_exports._ffi_fn_get_string();
    let ret_ptr = _ffi_update_dv().getInt32(multi_ret, true);
    let ret_len = _ffi_dv.getUint32(multi_ret + 4, true);
    let ret_cap = _ffi_dv.getUint32(multi_ret + 8, true);
    return _ffi_string_from_rust(ret_ptr, ret_len, ret_cap);
}

export function set_string(x: string): void {
    let x_ptr = _ffi_string_to_rust(x), x_len = _ffi_len;
    _ffi_exports._ffi_fn_set_string(x_ptr, x_len);
}

export function set_str(x: string): void {
    let x_ptr = _ffi_string_to_rust(x), x_len = _ffi_len;
    _ffi_exports._ffi_fn_set_str(x_ptr, x_len);
}

let _ffi_len = 0;
let _ffi_decoder = /* @__PURE__ */ new TextDecoder;
let _ffi_encoder = /* @__PURE__ */ new TextEncoder;
let _ffi_u8: Uint8Array;
let _ffi_dv: DataView;

function _ffi_string_from_rust(ptr: number, len: number, cap: number): string {
    let str = _ffi_decoder.decode(new Uint8Array(_ffi_exports.memory.buffer, ptr, len));
    _ffi_exports._ffi_dealloc(ptr, cap);
    return str;
}

function _ffi_update_u8(): Uint8Array {
    let buffer = _ffi_exports.memory.buffer;
    if (!_ffi_u8 || _ffi_u8.buffer !== buffer) _ffi_u8 = new Uint8Array(buffer);
    return _ffi_u8;
}

function _ffi_string_to_rust(str: string): number {
    let buf = _ffi_encoder.encode(str);
    let ptr = _ffi_exports._ffi_alloc(_ffi_len = buf.length);
    _ffi_update_u8().set(buf, ptr);
    return ptr;
}

function _ffi_update_dv(): DataView {
    let buffer = _ffi_exports.memory.buffer;
    if (!_ffi_dv || _ffi_dv.buffer !== buffer) _ffi_dv = new DataView(buffer);
    return _ffi_dv;
}

let _ffi_exports: {
    memory: WebAssembly.Memory,
    _ffi_fn_get_string: () => number,
    _ffi_fn_get_string_len: () => number,
    _ffi_fn_reset: () => void,
    _ffi_fn_rust_mem_leaked: () => number,
    _ffi_fn_set_str: (x_ptr: number, x_len: number) => void,
    _ffi_fn_set_string: (x_ptr: number, x_len: number) => void,
    _ffi_dealloc: (ptr: number, capacity: number) => void,
    _ffi_alloc: (len: number) => number,
};

const _ffi_imports = {};
