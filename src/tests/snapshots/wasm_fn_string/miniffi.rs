// This file was generated by miniffi v0.1.0. Do not edit.

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_get_string() -> *const _ffi_ret_ptr_2_usize {
    let (ret_ptr, ret_len, ret_cap) = _ffi_string_to_host(get_string());
    unsafe { _FFI_RET_PTR_2_USIZE = _ffi_ret_ptr_2_usize(ret_ptr, ret_len, ret_cap) };
    &raw const _FFI_RET_PTR_2_USIZE
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_get_string_len() -> i32 {
    get_string_len()
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_reset() {
    reset();
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_rust_mem_leaked() -> usize {
    rust_mem_leaked()
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_set_str(x_ptr: *const u8, x_len: usize) {
    set_str(&_ffi_string_from_host(x_ptr, x_len));
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_set_string(x_ptr: *const u8, x_len: usize) {
    set_string(_ffi_string_from_host(x_ptr, x_len));
}

#[repr(C)]
struct _ffi_ret_ptr_2_usize(*const u8, usize, usize);
static mut _FFI_RET_PTR_2_USIZE: _ffi_ret_ptr_2_usize = _ffi_ret_ptr_2_usize(std::ptr::null(), 0, 0);

#[unsafe(no_mangle)]
extern "C" fn _ffi_alloc(len: usize) -> *const u8 {
    Box::into_raw(Box::<[u8]>::new_uninit_slice(len)) as *const u8
}

fn _ffi_string_from_host(ptr: *const u8, len: usize) -> String {
    unsafe { String::from_raw_parts(ptr as *mut u8, len, len) }
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_dealloc(ptr: *mut u8, capacity: usize) {
    drop(unsafe { Vec::from_raw_parts(ptr, 0, capacity) });
}

fn _ffi_string_to_host(buf: String) -> (*const u8, usize, usize) {
    let buf = std::mem::ManuallyDrop::new(buf.into_bytes());
    (buf.as_ptr(), buf.len(), buf.capacity())
}
