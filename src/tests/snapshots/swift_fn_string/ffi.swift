// This file was generated by miniffi v0.1.0. Do not edit.

func rust_mem_leaked() -> UInt {
    return _ffi_fn_rust_mem_leaked()
}

func reset() {
    _ffi_fn_reset()
}

func get_string_len() -> Int32 {
    return _ffi_fn_get_string_len()
}

func get_string() -> String {
    let multi_ret = _ffi_fn_get_string()
    let ret_ptr = multi_ret._0
    let ret_len = multi_ret._1
    let ret_cap = multi_ret._2
    return _ffi_string_from_rust(ret_ptr, Int(ret_len), ret_cap)
}

func set_string(_ x: String) {
    let (x_ptr, x_len) = _ffi_string_to_rust(x);
    _ffi_fn_set_string(x_ptr, x_len)
}

func set_str(_ x: String) {
    let (x_ptr, x_len) = _ffi_string_to_rust(x);
    _ffi_fn_set_str(x_ptr, x_len)
}

private func _ffi_string_from_rust(_ ptr: UnsafeRawPointer?, _ len: Int, _ cap: UInt) -> String {
    let buf = UnsafeBufferPointer(start: ptr!.assumingMemoryBound(to: UInt8.self), count: len)
    let str = String(decoding: buf, as: UTF8.self)
    _ffi_dealloc(ptr, cap)
    return str
}

private func _ffi_string_to_rust(_ str: String) -> (UnsafeRawPointer?, UInt) {
    var str = str
    return str.withUTF8 { str in
        let buf = UnsafeMutableRawBufferPointer(start: _ffi_alloc(str.count), count: str.count)
        buf.copyMemory(from: UnsafeRawBufferPointer(start: str.baseAddress, count: str.count))
        return (UnsafeRawPointer(buf.baseAddress), UInt(buf.count))
    }
}
