// This file was generated by miniffi v0.1.0. Do not edit.

#[unsafe(no_mangle)]
extern "C" fn _ffi_Rc_Adder__add(_self: *const u8, x: i32, y: i32) -> i32 {
    let _self = unsafe { &*(_self as *const std::rc::Rc<dyn Adder>) };
    _self.add(x, y)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_Rc_Getter__get_adder(_self: *const u8) -> *const u8 {
    let _self = unsafe { &*(_self as *const std::rc::Rc<dyn Getter>) };
    Box::into_raw(Box::new(_self.get_adder())) as *const u8
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_drop_Rc_Adder(ptr: *const u8) {
    drop(unsafe { Box::from_raw(ptr as *mut std::rc::Rc<dyn Adder>) });
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_drop_Rc_Getter(ptr: *const u8) {
    drop(unsafe { Box::from_raw(ptr as *mut std::rc::Rc<dyn Getter>) });
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_get_adder_counter() -> u32 {
    get_adder_counter()
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_get_getter() -> *const u8 {
    Box::into_raw(Box::new(get_getter())) as *const u8
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_get_getter_counter() -> u32 {
    get_getter_counter()
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_rust_mem_leaked() -> usize {
    rust_mem_leaked()
}
