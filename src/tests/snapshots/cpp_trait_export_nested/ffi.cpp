// This file was generated by miniffi v0.1.0. Do not edit.

#include "ffi.h"

extern "C" {

void _ffi_drop_Rc_Adder(const void* ptr);
void _ffi_drop_Rc_Getter(const void* ptr);
int32_t _ffi_Rc_Adder__add(const void* _self, int32_t x, int32_t y);
const void* _ffi_Rc_Getter__get_adder(const void* _self);
uint32_t _ffi_fn_get_adder_counter();
const void* _ffi_fn_get_getter();
uint32_t _ffi_fn_get_getter_counter();
uintptr_t _ffi_fn_rust_mem_leaked();

} // extern "C"

namespace {

struct _ffi_Rc_Adder final : rust::Adder {
    _ffi_Rc_Adder(const void* ptr) : _self(ptr) {}
    virtual ~_ffi_Rc_Adder() { _ffi_drop_Rc_Adder(_self); }
    virtual int32_t add(int32_t x, int32_t y);
    const void* _self;
};

struct _ffi_Rc_Getter final : rust::Getter {
    _ffi_Rc_Getter(const void* ptr) : _self(ptr) {}
    virtual ~_ffi_Rc_Getter() { _ffi_drop_Rc_Getter(_self); }
    virtual std::shared_ptr<rust::Adder> get_adder();
    const void* _self;
};

} // namespace

int32_t _ffi_Rc_Adder::add(int32_t x, int32_t y) {
    return _ffi_Rc_Adder__add(_self, x, y);
}

std::shared_ptr<rust::Adder> _ffi_Rc_Getter::get_adder() {
    auto ret_ptr = _ffi_Rc_Getter__get_adder(_self);
    return std::make_shared<_ffi_Rc_Adder>(ret_ptr);
}

uint32_t rust::get_adder_counter() {
    return _ffi_fn_get_adder_counter();
}

std::shared_ptr<rust::Getter> rust::get_getter() {
    auto ret_ptr = _ffi_fn_get_getter();
    return std::make_shared<_ffi_Rc_Getter>(ret_ptr);
}

uint32_t rust::get_getter_counter() {
    return _ffi_fn_get_getter_counter();
}

uintptr_t rust::rust_mem_leaked() {
    return _ffi_fn_rust_mem_leaked();
}
