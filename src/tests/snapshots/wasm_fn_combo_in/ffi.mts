// This file was generated by miniffi v0.1.0. Do not edit.

export async function instantiate(bytes: BufferSource, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }> {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiate(bytes, { env });
    _ffi_exports = (await promise).instance.exports as any;
    return { memory: _ffi_exports.memory };
}

export async function instantiateStreaming(source: Response | PromiseLike<Response>, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }> {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiateStreaming(source, { env });
    _ffi_exports = (await promise).instance.exports as any;
    return { memory: _ffi_exports.memory };
}

export interface Foo {
    x: [Bar, Bar[]],
    y: [undefined, [number], [number, boolean]][],
}

export interface Bar {
    x: number,
    y: Foo[],
}

export function rust_mem_leaked(): number {
    return _ffi_exports._ffi_fn_rust_mem_leaked();
}

export function check_combo(foo: Foo): string {
    let buf = _ffi_new_WriteBuf();
    let foo_x_0_y_len = foo.x[0].y.length;
    _ffi_vec_Foo_to_rust(foo.x[0].y, buf);
    let foo_x_1_len = foo.x[1].length;
    _ffi_vec_Bar_to_rust(foo.x[1], buf);
    let foo_y_len = foo.y.length;
    _ffi_vec__i32_f32_bool_to_rust(foo.y, buf);
    let multi_ret = _ffi_exports._ffi_fn_check_combo(foo.x[0].x, _ffi_buf_to_rust(buf), foo_x_0_y_len, foo_x_1_len, foo_y_len);
    let ret_ptr = _ffi_update_dv().getInt32(multi_ret, true);
    let ret_len = _ffi_dv.getUint32(multi_ret + 4, true);
    let ret_cap = _ffi_dv.getUint32(multi_ret + 8, true);
    return _ffi_string_from_rust(ret_ptr, ret_len, ret_cap);
}

let _ffi_new_WriteBuf = (): _ffi_WriteBuf => ({ u8: new Uint8Array(16), dv: null, off: 0 });
let _ffi_u8: Uint8Array;
let _ffi_decoder = /* @__PURE__ */ new TextDecoder;
let _ffi_dv: DataView;

interface _ffi_WriteBuf {
    u8: Uint8Array,
    dv: DataView | null,
    off: number,
}

function _ffi_update_u8(): Uint8Array {
    let buffer = _ffi_exports.memory.buffer;
    if (!_ffi_u8 || _ffi_u8.buffer !== buffer) _ffi_u8 = new Uint8Array(buffer);
    return _ffi_u8;
}

function _ffi_buf_to_rust({ u8, off }: _ffi_WriteBuf): number {
    let ptr = _ffi_exports._ffi_alloc(off);
    _ffi_update_u8().set(u8.length > off ? u8.subarray(0, off) : u8, ptr);
    return ptr;
}

function _ffi_string_from_rust(ptr: number, len: number, cap: number): string {
    let str = _ffi_decoder.decode(new Uint8Array(_ffi_exports.memory.buffer, ptr, len));
    _ffi_exports._ffi_dealloc(ptr, cap);
    return str;
}

function _ffi_update_dv(): DataView {
    let buffer = _ffi_exports.memory.buffer;
    if (!_ffi_dv || _ffi_dv.buffer !== buffer) _ffi_dv = new DataView(buffer);
    return _ffi_dv;
}

function _ffi_vec_Bar_to_rust(items: Bar[], buf: _ffi_WriteBuf): void {
    for (const item of items) {
        _ffi_write_i32(buf, item.x);
        _ffi_write_i32(buf, item.y.length);
        _ffi_vec_Foo_to_rust(item.y, buf);
    }
}

function _ffi_vec_Foo_to_rust(items: Foo[], buf: _ffi_WriteBuf): void {
    for (const item of items) {
        _ffi_write_i32(buf, item.x[0].x);
        _ffi_write_i32(buf, item.x[0].y.length);
        _ffi_vec_Foo_to_rust(item.x[0].y, buf);
        _ffi_write_i32(buf, item.x[1].length);
        _ffi_vec_Bar_to_rust(item.x[1], buf);
        _ffi_write_i32(buf, item.y.length);
        _ffi_vec__i32_f32_bool_to_rust(item.y, buf);
    }
}

function _ffi_vec__i32_f32_bool_to_rust(items: [undefined, [number], [number, boolean]][], buf: _ffi_WriteBuf): void {
    for (const item of items) {
        _ffi_write_i32(buf, item[1][0]);
        _ffi_write_f32(buf, item[2][0]);
        _ffi_write_i8(buf, +(item[2][1]));
    }
}

function _ffi_grow(buf: _ffi_WriteBuf, n: number): number {
    let off = buf.off;
    let u8 = buf.u8;
    if (off + n > u8.length) {
        (buf.u8 = new Uint8Array((off + n) << 1)).set(u8);
        buf.dv = null;
    }
    buf.off += n;
    if (!buf.dv) buf.dv = new DataView(buf.u8.buffer);
    return off;
}

function _ffi_write_f32(buf: _ffi_WriteBuf, val: number): void {
    let ptr = _ffi_grow(buf, 4);
    buf.dv!.setFloat32(ptr, val, true);
}

function _ffi_write_i32(buf: _ffi_WriteBuf, val: number): void {
    let ptr = _ffi_grow(buf, 4);
    buf.dv!.setInt32(ptr, val, true);
}

function _ffi_write_i8(buf: _ffi_WriteBuf, val: number): void {
    let ptr = _ffi_grow(buf, 1);
    buf.dv!.setInt8(ptr, val);
}

let _ffi_exports: {
    memory: WebAssembly.Memory,
    _ffi_fn_check_combo: (foo_x_0_x: number, buf_ptr: number, foo_x_0_y_len: number, foo_x_1_len: number, foo_y_len: number) => number,
    _ffi_fn_rust_mem_leaked: () => number,
    _ffi_alloc: (len: number) => number,
    _ffi_dealloc: (ptr: number, capacity: number) => void,
};

const _ffi_imports = {};
