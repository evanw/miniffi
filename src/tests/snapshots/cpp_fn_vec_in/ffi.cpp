// This file was generated by miniffi v0.1.0. Do not edit.

#include "ffi.h"

struct _ffi_ret_ptr_2_usize {
    const char* _0;
    uintptr_t _1;
    uintptr_t _2;
};

extern "C" {

_ffi_ret_ptr_2_usize _ffi_fn_check_nested(const void* buf_ptr, uintptr_t values_len);
void _ffi_dealloc(const void* ptr, uintptr_t capacity);
void* _ffi_alloc(uintptr_t len);
uintptr_t _ffi_fn_rust_mem_leaked();
float _ffi_fn_sum_f32(const void* buf_ptr, uintptr_t values_len);
double _ffi_fn_sum_f64(const void* buf_ptr, uintptr_t values_len);
int16_t _ffi_fn_sum_i16(const void* buf_ptr, uintptr_t values_len);
int32_t _ffi_fn_sum_i32(const void* buf_ptr, uintptr_t values_len);
int64_t _ffi_fn_sum_i64(const void* buf_ptr, uintptr_t values_len);
int8_t _ffi_fn_sum_i8(const void* buf_ptr, uintptr_t values_len);
intptr_t _ffi_fn_sum_isize(const void* buf_ptr, uintptr_t values_len);
uint16_t _ffi_fn_sum_u16(const void* buf_ptr, uintptr_t values_len);
uint32_t _ffi_fn_sum_u32(const void* buf_ptr, uintptr_t values_len);
uint64_t _ffi_fn_sum_u64(const void* buf_ptr, uintptr_t values_len);
uint8_t _ffi_fn_sum_u8(const void* buf_ptr, uintptr_t values_len);
uintptr_t _ffi_fn_sum_usize(const void* buf_ptr, uintptr_t values_len);

} // extern "C"

namespace {

std::string _ffi_string_from_rust(const char* ptr, uintptr_t len, uintptr_t cap) {
    std::string str(ptr, len);
    _ffi_dealloc(ptr, cap);
    return str;
}

const void* _ffi_vec_to_rust(const std::vector<uint8_t>& vec) {
    return memcpy(_ffi_alloc(vec.size()), vec.data(), vec.size());
}

template <typename T>
void _ffi_write(T val, std::vector<uint8_t> &buf) {
    buf.insert(buf.end(), (const uint8_t*)&val, (const uint8_t*)&val + sizeof(T));
}

void _ffi_vec_i32_to_rust(std::vector<int32_t>&& items, std::vector<uint8_t>& buf) {
    for (auto&& item : items) {
        _ffi_write(item, buf);
    }
}

void _ffi_vec_vec_i32_to_rust(std::vector<std::vector<int32_t>>&& items, std::vector<uint8_t>& buf) {
    for (auto&& item : items) {
        auto item_len = item.size();
        _ffi_write(item_len, buf);
        _ffi_vec_i32_to_rust(std::move(item), buf);
    }
}

void _ffi_vec_f32_to_rust(std::vector<float>&& items, std::vector<uint8_t>& buf) {
    for (auto&& item : items) {
        _ffi_write(item, buf);
    }
}

void _ffi_vec_f64_to_rust(std::vector<double>&& items, std::vector<uint8_t>& buf) {
    for (auto&& item : items) {
        _ffi_write(item, buf);
    }
}

void _ffi_vec_i16_to_rust(std::vector<int16_t>&& items, std::vector<uint8_t>& buf) {
    for (auto&& item : items) {
        _ffi_write(item, buf);
    }
}

void _ffi_vec_i64_to_rust(std::vector<int64_t>&& items, std::vector<uint8_t>& buf) {
    for (auto&& item : items) {
        _ffi_write(item, buf);
    }
}

void _ffi_vec_i8_to_rust(std::vector<int8_t>&& items, std::vector<uint8_t>& buf) {
    for (auto&& item : items) {
        _ffi_write(item, buf);
    }
}

void _ffi_vec_isize_to_rust(std::vector<intptr_t>&& items, std::vector<uint8_t>& buf) {
    for (auto&& item : items) {
        _ffi_write(item, buf);
    }
}

void _ffi_vec_u16_to_rust(std::vector<uint16_t>&& items, std::vector<uint8_t>& buf) {
    for (auto&& item : items) {
        _ffi_write(item, buf);
    }
}

void _ffi_vec_u32_to_rust(std::vector<uint32_t>&& items, std::vector<uint8_t>& buf) {
    for (auto&& item : items) {
        _ffi_write(item, buf);
    }
}

void _ffi_vec_u64_to_rust(std::vector<uint64_t>&& items, std::vector<uint8_t>& buf) {
    for (auto&& item : items) {
        _ffi_write(item, buf);
    }
}

void _ffi_vec_u8_to_rust(std::vector<uint8_t>&& items, std::vector<uint8_t>& buf) {
    for (auto&& item : items) {
        _ffi_write(item, buf);
    }
}

void _ffi_vec_usize_to_rust(std::vector<uintptr_t>&& items, std::vector<uint8_t>& buf) {
    for (auto&& item : items) {
        _ffi_write(item, buf);
    }
}

} // namespace

std::string rust::check_nested(std::vector<std::vector<int32_t>> values) {
    std::vector<uint8_t> buf;
    auto values_len = values.size();
    _ffi_vec_vec_i32_to_rust(std::move(values), buf);
    auto buf_ptr = _ffi_vec_to_rust(buf);
    auto multi_ret = _ffi_fn_check_nested(buf_ptr, values_len);
    auto ret_ptr = multi_ret._0;
    auto ret_len = multi_ret._1;
    auto ret_cap = multi_ret._2;
    return _ffi_string_from_rust(ret_ptr, ret_len, ret_cap);
}

uintptr_t rust::rust_mem_leaked() {
    return _ffi_fn_rust_mem_leaked();
}

float rust::sum_f32(std::vector<float> values) {
    std::vector<uint8_t> buf;
    auto values_len = values.size();
    _ffi_vec_f32_to_rust(std::move(values), buf);
    auto buf_ptr = _ffi_vec_to_rust(buf);
    return _ffi_fn_sum_f32(buf_ptr, values_len);
}

double rust::sum_f64(std::vector<double> values) {
    std::vector<uint8_t> buf;
    auto values_len = values.size();
    _ffi_vec_f64_to_rust(std::move(values), buf);
    auto buf_ptr = _ffi_vec_to_rust(buf);
    return _ffi_fn_sum_f64(buf_ptr, values_len);
}

int16_t rust::sum_i16(std::vector<int16_t> values) {
    std::vector<uint8_t> buf;
    auto values_len = values.size();
    _ffi_vec_i16_to_rust(std::move(values), buf);
    auto buf_ptr = _ffi_vec_to_rust(buf);
    return _ffi_fn_sum_i16(buf_ptr, values_len);
}

int32_t rust::sum_i32(std::vector<int32_t> values) {
    std::vector<uint8_t> buf;
    auto values_len = values.size();
    _ffi_vec_i32_to_rust(std::move(values), buf);
    auto buf_ptr = _ffi_vec_to_rust(buf);
    return _ffi_fn_sum_i32(buf_ptr, values_len);
}

int64_t rust::sum_i64(std::vector<int64_t> values) {
    std::vector<uint8_t> buf;
    auto values_len = values.size();
    _ffi_vec_i64_to_rust(std::move(values), buf);
    auto buf_ptr = _ffi_vec_to_rust(buf);
    return _ffi_fn_sum_i64(buf_ptr, values_len);
}

int8_t rust::sum_i8(std::vector<int8_t> values) {
    std::vector<uint8_t> buf;
    auto values_len = values.size();
    _ffi_vec_i8_to_rust(std::move(values), buf);
    auto buf_ptr = _ffi_vec_to_rust(buf);
    return _ffi_fn_sum_i8(buf_ptr, values_len);
}

intptr_t rust::sum_isize(std::vector<intptr_t> values) {
    std::vector<uint8_t> buf;
    auto values_len = values.size();
    _ffi_vec_isize_to_rust(std::move(values), buf);
    auto buf_ptr = _ffi_vec_to_rust(buf);
    return _ffi_fn_sum_isize(buf_ptr, values_len);
}

uint16_t rust::sum_u16(std::vector<uint16_t> values) {
    std::vector<uint8_t> buf;
    auto values_len = values.size();
    _ffi_vec_u16_to_rust(std::move(values), buf);
    auto buf_ptr = _ffi_vec_to_rust(buf);
    return _ffi_fn_sum_u16(buf_ptr, values_len);
}

uint32_t rust::sum_u32(std::vector<uint32_t> values) {
    std::vector<uint8_t> buf;
    auto values_len = values.size();
    _ffi_vec_u32_to_rust(std::move(values), buf);
    auto buf_ptr = _ffi_vec_to_rust(buf);
    return _ffi_fn_sum_u32(buf_ptr, values_len);
}

uint64_t rust::sum_u64(std::vector<uint64_t> values) {
    std::vector<uint8_t> buf;
    auto values_len = values.size();
    _ffi_vec_u64_to_rust(std::move(values), buf);
    auto buf_ptr = _ffi_vec_to_rust(buf);
    return _ffi_fn_sum_u64(buf_ptr, values_len);
}

uint8_t rust::sum_u8(std::vector<uint8_t> values) {
    std::vector<uint8_t> buf;
    auto values_len = values.size();
    _ffi_vec_u8_to_rust(std::move(values), buf);
    auto buf_ptr = _ffi_vec_to_rust(buf);
    return _ffi_fn_sum_u8(buf_ptr, values_len);
}

uintptr_t rust::sum_usize(std::vector<uintptr_t> values) {
    std::vector<uint8_t> buf;
    auto values_len = values.size();
    _ffi_vec_usize_to_rust(std::move(values), buf);
    auto buf_ptr = _ffi_vec_to_rust(buf);
    return _ffi_fn_sum_usize(buf_ptr, values_len);
}
