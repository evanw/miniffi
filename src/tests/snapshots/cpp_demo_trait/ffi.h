// This file was generated by miniffi v0.1.0. Do not edit.

#pragma once

#include <stdint.h>
#include <vector>
#include <memory>
#include <string>

namespace rust {

struct Trait;

struct Example {
    std::unique_ptr<Trait> box_ptr;
    std::shared_ptr<Trait> rc_ptr;
    std::string text;
    std::vector<std::unique_ptr<Trait>> vec_box;
    std::vector<std::shared_ptr<Trait>> vec_rc;
};

struct Trait {
    virtual ~Trait() {}
    virtual int32_t get() = 0;
};

uintptr_t rust_mem_leaked();

std::vector<Example> test(std::vector<Example> vec);

} // namespace rust
