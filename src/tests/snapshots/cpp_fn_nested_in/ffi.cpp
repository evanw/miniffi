// This file was generated by miniffi v0.1.0. Do not edit.

#include "ffi.h"

extern "C" {

uintptr_t _ffi_fn_rust_mem_leaked();
int32_t _ffi_fn_test(int32_t x_0, const void* x_1_ptr_ptr, const void* buf_ptr, uintptr_t x_2_len);
void* _ffi_alloc(uintptr_t len);

} // extern "C"

namespace {

template <typename T>
void _ffi_write(T val, std::vector<uint8_t> &buf) {
    buf.insert(buf.end(), (const uint8_t*)&val, (const uint8_t*)&val + sizeof(T));
}

void _ffi_vec_i32_Foo_to_rust(std::vector<std::tuple<int32_t, rust::Foo>>&& items, std::vector<uint8_t>& buf) {
    for (auto&& item : items) {
        _ffi_write(std::get<0>(item), buf);
        (void)std::get<1>(item).empty;
        auto item_1_ptr_ptr = new std::shared_ptr<rust::Bar>(std::get<1>(item).ptr);
        _ffi_write(item_1_ptr_ptr, buf);
    }
}

const void* _ffi_vec_to_rust(const std::vector<uint8_t>& vec) {
    return memcpy(_ffi_alloc(vec.size()), vec.data(), vec.size());
}

} // namespace

extern "C" {

int32_t _ffi_cpp_Rc_Bar__get(std::shared_ptr<rust::Bar>* _self) {
    return _self->get()->get();
}

void _ffi_cpp_drop_Rc_Bar(std::shared_ptr<rust::Bar>* self) {
    delete self;
}

} // extern "C"

uintptr_t rust::rust_mem_leaked() {
    return _ffi_fn_rust_mem_leaked();
}

int32_t rust::test(std::tuple<int32_t, rust::Foo, std::vector<std::tuple<int32_t, rust::Foo>>> x) {
    (void)std::get<1>(x).empty;
    auto x_1_ptr_ptr = new std::shared_ptr<rust::Bar>(std::get<1>(x).ptr);
    std::vector<uint8_t> buf;
    auto x_2_len = std::get<2>(x).size();
    _ffi_vec_i32_Foo_to_rust(std::move(std::get<2>(x)), buf);
    auto buf_ptr = _ffi_vec_to_rust(buf);
    return _ffi_fn_test(std::get<0>(x), x_1_ptr_ptr, buf_ptr, x_2_len);
}
