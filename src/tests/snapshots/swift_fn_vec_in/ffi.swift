// This file was generated by miniffi v0.1.0. Do not edit.

func rust_mem_leaked() -> UInt {
    return _ffi_fn_rust_mem_leaked()
}

func sum_u8(_ values: [UInt8]) -> UInt8 {
    var buf = ContiguousArray<UInt8>()
    let values_len = UInt(values.count)
    _ffi_vec_u8_to_rust(values, &buf)
    return _ffi_fn_sum_u8(_ffi_vec_to_rust(buf), values_len)
}

func sum_u16(_ values: [UInt16]) -> UInt16 {
    var buf = ContiguousArray<UInt8>()
    let values_len = UInt(values.count)
    _ffi_vec_u16_to_rust(values, &buf)
    return _ffi_fn_sum_u16(_ffi_vec_to_rust(buf), values_len)
}

func sum_u32(_ values: [UInt32]) -> UInt32 {
    var buf = ContiguousArray<UInt8>()
    let values_len = UInt(values.count)
    _ffi_vec_u32_to_rust(values, &buf)
    return _ffi_fn_sum_u32(_ffi_vec_to_rust(buf), values_len)
}

func sum_usize(_ values: [UInt]) -> UInt {
    var buf = ContiguousArray<UInt8>()
    let values_len = UInt(values.count)
    _ffi_vec_usize_to_rust(values, &buf)
    return _ffi_fn_sum_usize(_ffi_vec_to_rust(buf), values_len)
}

func sum_u64(_ values: [UInt64]) -> UInt64 {
    var buf = ContiguousArray<UInt8>()
    let values_len = UInt(values.count)
    _ffi_vec_u64_to_rust(values, &buf)
    return _ffi_fn_sum_u64(_ffi_vec_to_rust(buf), values_len)
}

func sum_i8(_ values: [Int8]) -> Int8 {
    var buf = ContiguousArray<UInt8>()
    let values_len = UInt(values.count)
    _ffi_vec_i8_to_rust(values, &buf)
    return _ffi_fn_sum_i8(_ffi_vec_to_rust(buf), values_len)
}

func sum_i16(_ values: [Int16]) -> Int16 {
    var buf = ContiguousArray<UInt8>()
    let values_len = UInt(values.count)
    _ffi_vec_i16_to_rust(values, &buf)
    return _ffi_fn_sum_i16(_ffi_vec_to_rust(buf), values_len)
}

func sum_i32(_ values: [Int32]) -> Int32 {
    var buf = ContiguousArray<UInt8>()
    let values_len = UInt(values.count)
    _ffi_vec_i32_to_rust(values, &buf)
    return _ffi_fn_sum_i32(_ffi_vec_to_rust(buf), values_len)
}

func sum_isize(_ values: [Int]) -> Int {
    var buf = ContiguousArray<UInt8>()
    let values_len = UInt(values.count)
    _ffi_vec_isize_to_rust(values, &buf)
    return _ffi_fn_sum_isize(_ffi_vec_to_rust(buf), values_len)
}

func sum_i64(_ values: [Int64]) -> Int64 {
    var buf = ContiguousArray<UInt8>()
    let values_len = UInt(values.count)
    _ffi_vec_i64_to_rust(values, &buf)
    return _ffi_fn_sum_i64(_ffi_vec_to_rust(buf), values_len)
}

func sum_f32(_ values: [Float32]) -> Float32 {
    var buf = ContiguousArray<UInt8>()
    let values_len = UInt(values.count)
    _ffi_vec_f32_to_rust(values, &buf)
    return _ffi_fn_sum_f32(_ffi_vec_to_rust(buf), values_len)
}

func sum_f64(_ values: [Float64]) -> Float64 {
    var buf = ContiguousArray<UInt8>()
    let values_len = UInt(values.count)
    _ffi_vec_f64_to_rust(values, &buf)
    return _ffi_fn_sum_f64(_ffi_vec_to_rust(buf), values_len)
}

func check_nested(_ values: [[Int32]]) -> String {
    var buf = ContiguousArray<UInt8>()
    let values_len = UInt(values.count)
    _ffi_vec_vec_i32_to_rust(values, &buf)
    let multi_ret = _ffi_fn_check_nested(_ffi_vec_to_rust(buf), values_len)
    let ret_ptr = multi_ret._0
    let ret_len = multi_ret._1
    let ret_cap = multi_ret._2
    return _ffi_string_from_rust(ret_ptr, Int(ret_len), ret_cap)
}

private func _ffi_string_from_rust(_ ptr: UnsafeRawPointer?, _ len: Int, _ cap: UInt) -> String {
    let buf = UnsafeBufferPointer(start: ptr!.assumingMemoryBound(to: UInt8.self), count: len)
    let str = String(decoding: buf, as: UTF8.self)
    _ffi_dealloc(ptr, cap)
    return str
}

private func _ffi_vec_f32_to_rust(_ items: [Float32], _ buf: inout ContiguousArray<UInt8>) {
    for item in items {
        _ffi_write(item, &buf)
    }
}

private func _ffi_vec_f64_to_rust(_ items: [Float64], _ buf: inout ContiguousArray<UInt8>) {
    for item in items {
        _ffi_write(item, &buf)
    }
}

private func _ffi_vec_i16_to_rust(_ items: [Int16], _ buf: inout ContiguousArray<UInt8>) {
    for item in items {
        _ffi_write(item, &buf)
    }
}

private func _ffi_vec_i32_to_rust(_ items: [Int32], _ buf: inout ContiguousArray<UInt8>) {
    for item in items {
        _ffi_write(item, &buf)
    }
}

private func _ffi_vec_i64_to_rust(_ items: [Int64], _ buf: inout ContiguousArray<UInt8>) {
    for item in items {
        _ffi_write(item, &buf)
    }
}

private func _ffi_vec_i8_to_rust(_ items: [Int8], _ buf: inout ContiguousArray<UInt8>) {
    for item in items {
        _ffi_write(item, &buf)
    }
}

private func _ffi_vec_isize_to_rust(_ items: [Int], _ buf: inout ContiguousArray<UInt8>) {
    for item in items {
        _ffi_write(item, &buf)
    }
}

private func _ffi_vec_to_rust(_ vec: ContiguousArray<UInt8>) -> UnsafeRawPointer? {
    vec.withUnsafeBytes { vec in
        let buf = UnsafeMutableRawBufferPointer(start: _ffi_alloc(vec.count), count: vec.count)
        buf.copyMemory(from: UnsafeRawBufferPointer(start: vec.baseAddress, count: vec.count))
        return UnsafeRawPointer(buf.baseAddress)
    }
}

private func _ffi_vec_u16_to_rust(_ items: [UInt16], _ buf: inout ContiguousArray<UInt8>) {
    for item in items {
        _ffi_write(item, &buf)
    }
}

private func _ffi_vec_u32_to_rust(_ items: [UInt32], _ buf: inout ContiguousArray<UInt8>) {
    for item in items {
        _ffi_write(item, &buf)
    }
}

private func _ffi_vec_u64_to_rust(_ items: [UInt64], _ buf: inout ContiguousArray<UInt8>) {
    for item in items {
        _ffi_write(item, &buf)
    }
}

private func _ffi_vec_u8_to_rust(_ items: [UInt8], _ buf: inout ContiguousArray<UInt8>) {
    for item in items {
        _ffi_write(item, &buf)
    }
}

private func _ffi_vec_usize_to_rust(_ items: [UInt], _ buf: inout ContiguousArray<UInt8>) {
    for item in items {
        _ffi_write(item, &buf)
    }
}

private func _ffi_vec_vec_i32_to_rust(_ items: [[Int32]], _ buf: inout ContiguousArray<UInt8>) {
    for item in items {
        _ffi_write(UInt(item.count), &buf)
        _ffi_vec_i32_to_rust(item, &buf)
    }
}

private func _ffi_write<T>(_ val: T, _ buf: inout ContiguousArray<UInt8>) {
    var val = val
    withUnsafeBytes(of: &val) { val in
        buf.append(contentsOf: val)
    }
}
