// This file was generated by miniffi v0.1.0. Do not edit.

export async function instantiate(bytes: BufferSource, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }> {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiate(bytes, { env });
    _ffi_exports = (await promise).instance.exports as any;
    return { memory: _ffi_exports.memory };
}

export async function instantiateStreaming(source: Response | PromiseLike<Response>, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }> {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiateStreaming(source, { env });
    _ffi_exports = (await promise).instance.exports as any;
    return { memory: _ffi_exports.memory };
}

export interface Getter {
    get_adder(): Adder;
}

export interface Adder {
    add(x: number, y: number): number;
}

export function rust_mem_leaked(): number {
    return _ffi_exports._ffi_fn_rust_mem_leaked();
}

export function set_getter(getter: Getter): number {
    return _ffi_exports._ffi_fn_set_getter(_ffi_handle_alloc(getter));
}

let _ffi_handles: Map<number, any> = /* @__PURE__ */ new Map;
let _ffi_next_handle = 0;

function _ffi_handle_alloc(obj: any): number {
    _ffi_handles.set(++_ffi_next_handle, obj);
    return _ffi_next_handle;
}

let _ffi_exports: {
    memory: WebAssembly.Memory,
    _ffi_fn_rust_mem_leaked: () => number,
    _ffi_fn_set_getter: (getter_ptr: number) => number,
};

const _ffi_imports = {
    _ffi_js_Adder__add(self: number, x: number, y: number): number {
        return _ffi_handles.get(self).add(x, y);
    },

    _ffi_js_Getter__get_adder(self: number): number {
        return _ffi_handle_alloc(_ffi_handles.get(self).get_adder());
    },

    _ffi_js_drop(handle: number): void {
        _ffi_handles.delete(handle);
    },
};
