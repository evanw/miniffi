// This file was generated by miniffi v0.1.0. Do not edit.

export async function instantiate(bytes: BufferSource, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }> {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiate(bytes, { env });
    _ffi_exports = (await promise).instance.exports as any;
    return { memory: _ffi_exports.memory };
}

export async function instantiateStreaming(source: Response | PromiseLike<Response>, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }> {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiateStreaming(source, { env });
    _ffi_exports = (await promise).instance.exports as any;
    return { memory: _ffi_exports.memory };
}

export interface Imported {
    run(exported: Exported): number;
}

export interface Exported {
    add(x: number, y: number): number;
}

export function rust_mem_leaked(): number {
    return _ffi_exports._ffi_fn_rust_mem_leaked();
}

export function get_counter(): number {
    return _ffi_exports._ffi_fn_get_counter();
}

export function set_imported(imported: Imported): number {
    return _ffi_exports._ffi_fn_set_imported(_ffi_handle_alloc(imported));
}

let _ffi_reg_Rc_Exported = new FinalizationRegistry((ptr: number) => _ffi_exports._ffi_rs_drop_Rc_Exported(ptr));
let _ffi_handles: Map<number, any> = /* @__PURE__ */ new Map;
let _ffi_next_handle = 0;

const _ffi_Rc_Exported = class Exported implements Exported {
    declare readonly _: number;

    constructor(_: number) {
        Object.defineProperty(this, "_", { value: _ });
        _ffi_reg_Rc_Exported.register(this, _);
    }

    add(x: number, y: number): number {
        return _ffi_exports._ffi_Rc_Exported__add(this._, x, y);
    }
};

function _ffi_handle_alloc(obj: any): number {
    _ffi_handles.set(++_ffi_next_handle, obj);
    return _ffi_next_handle;
}

let _ffi_exports: {
    memory: WebAssembly.Memory,
    _ffi_Rc_Exported__add: (_self: number, x: number, y: number) => number,
    _ffi_fn_get_counter: () => number,
    _ffi_fn_rust_mem_leaked: () => number,
    _ffi_fn_set_imported: (imported_ptr: number) => number,
    _ffi_rs_drop_Rc_Exported: (ptr: number) => void,
};

const _ffi_imports = {
    _ffi_js_Imported__run(self: number, exported_ptr: number): number {
        return _ffi_handles.get(self).run(new _ffi_Rc_Exported(exported_ptr));
    },

    _ffi_js_drop(handle: number): void {
        _ffi_handles.delete(handle);
    },
};
