// This file was generated by miniffi v0.1.0. Do not edit.

protocol Platform: AnyObject {
    func create_window() -> Window
}

protocol Window: AnyObject {
    func get_title() -> String
    func set_title(_ title: String)
    func get_size() -> (Int32, Int32)
    func set_size(_ width: Int32, _ height: Int32)
    func set_handler(_ handler: Handler)
    func child_window() -> Window
}

protocol Handler: AnyObject {
    func on_draw(_ canvas: Canvas)
}

protocol Canvas: AnyObject {
    func draw_text_runs(_ runs: [TextRun])
}

struct TextRun {
    var text: String
    var rect: TextRect
}

struct TextRect {
    var x: Int32
    var y: Int32
    var w: Int32
    var h: Int32
}

func rust_mem_leaked() -> UInt {
    return _ffi_fn_rust_mem_leaked()
}

func create_app(_ platform: Platform) {
    _ffi_fn_create_app(UnsafeRawPointer(Unmanaged.passRetained(platform as AnyObject).toOpaque()))
}

private class _ffi_Box_Handler : Handler {
    private var _ffi: UnsafeRawPointer?

    init(_ ptr: UnsafeRawPointer?) {
        _ffi = ptr
    }

    deinit {
        _ffi_rs_drop_Box_Handler(_ffi)
    }

    func on_draw(_ canvas: Canvas) {
        _ffi_Box_Handler__on_draw(_ffi, UnsafeRawPointer(Unmanaged.passRetained(canvas as AnyObject).toOpaque()))
    }
}

private func _ffi_read<T>(_ ptr: inout UnsafeRawPointer) -> T {
    let val = ptr.loadUnaligned(fromByteOffset: 0, as: T.self)
    ptr = ptr.advanced(by: MemoryLayout<T>.size)
    return val
}

private func _ffi_string_from_rust(_ ptr: UnsafeRawPointer?, _ len: Int, _ cap: UInt) -> String {
    let buf = UnsafeBufferPointer(start: ptr!.assumingMemoryBound(to: UInt8.self), count: len)
    let str = String(decoding: buf, as: UTF8.self)
    _ffi_dealloc(ptr, cap)
    return str
}

private func _ffi_string_to_rust(_ str: String) -> (UnsafeRawPointer?, UInt) {
    var str = str
    return str.withUTF8 { str in
        let buf = UnsafeMutableRawBufferPointer(start: _ffi_alloc(str.count), count: str.count)
        buf.copyMemory(from: UnsafeRawBufferPointer(start: str.baseAddress, count: str.count))
        return (UnsafeRawPointer(buf.baseAddress), UInt(buf.count))
    }
}

@_cdecl("_ffi_swift_Canvas__draw_text_runs")
func _ffi_swift_Canvas__draw_text_runs(_self: UnsafeRawPointer?, buf_ptr: UnsafeRawPointer?, buf_cap: UInt, runs_len: UInt) {
    let _self = Unmanaged<AnyObject>.fromOpaque(_self!).takeUnretainedValue() as! Canvas
    var buf_end = buf_ptr!
    _self.draw_text_runs(_ffi_vec_TextRun_from_rust(Int(runs_len), &buf_end))
    _ffi_dealloc(buf_ptr, buf_cap)
}

@_cdecl("_ffi_swift_Platform__create_window")
func _ffi_swift_Platform__create_window(_self: UnsafeRawPointer?) -> UnsafeRawPointer? {
    let _self = Unmanaged<AnyObject>.fromOpaque(_self!).takeUnretainedValue() as! Platform
    return UnsafeRawPointer(Unmanaged.passRetained(_self.create_window() as AnyObject).toOpaque())
}

@_cdecl("_ffi_swift_Window__child_window")
func _ffi_swift_Window__child_window(_self: UnsafeRawPointer?) -> UnsafeRawPointer? {
    let _self = Unmanaged<AnyObject>.fromOpaque(_self!).takeUnretainedValue() as! Window
    return UnsafeRawPointer(Unmanaged.passRetained(_self.child_window() as AnyObject).toOpaque())
}

@_cdecl("_ffi_swift_Window__get_size")
func _ffi_swift_Window__get_size(_self: UnsafeRawPointer?) -> _ffi_ret_2_i32 {
    let _self = Unmanaged<AnyObject>.fromOpaque(_self!).takeUnretainedValue() as! Window
    let ret = _self.get_size()
    return _ffi_ret_2_i32(_0: ret.0, _1: ret.1)
}

@_cdecl("_ffi_swift_Window__get_title")
func _ffi_swift_Window__get_title(_self: UnsafeRawPointer?) -> _ffi_ret_ptr_usize {
    let _self = Unmanaged<AnyObject>.fromOpaque(_self!).takeUnretainedValue() as! Window
    let (ret_ptr, ret_len) = _ffi_string_to_rust(_self.get_title());
    return _ffi_ret_ptr_usize(_0: ret_ptr, _1: ret_len)
}

@_cdecl("_ffi_swift_Window__set_handler")
func _ffi_swift_Window__set_handler(_self: UnsafeRawPointer?, handler_ptr: UnsafeRawPointer?) {
    let _self = Unmanaged<AnyObject>.fromOpaque(_self!).takeUnretainedValue() as! Window
    _self.set_handler(_ffi_Box_Handler(handler_ptr))
}

@_cdecl("_ffi_swift_Window__set_size")
func _ffi_swift_Window__set_size(_self: UnsafeRawPointer?, width: Int32, height: Int32) {
    let _self = Unmanaged<AnyObject>.fromOpaque(_self!).takeUnretainedValue() as! Window
    _self.set_size(width, height)
}

@_cdecl("_ffi_swift_Window__set_title")
func _ffi_swift_Window__set_title(_self: UnsafeRawPointer?, title_ptr: UnsafeRawPointer?, title_len: UInt, title_cap: UInt) {
    let _self = Unmanaged<AnyObject>.fromOpaque(_self!).takeUnretainedValue() as! Window
    _self.set_title(_ffi_string_from_rust(title_ptr, Int(title_len), title_cap))
}

@_cdecl("_ffi_swift_drop")
func _ffi_swift_drop(ptr: UnsafeRawPointer?) {
    _ = Unmanaged<AnyObject>.fromOpaque(ptr!).takeRetainedValue()
}

private func _ffi_vec_TextRun_from_rust(_ len: Int, _ end: inout UnsafeRawPointer) -> [TextRun] {
    var items: [TextRun] = []
    items.reserveCapacity(len)
    while items.count < len {
        items.append(TextRun(
            text: _ffi_string_from_rust(_ffi_read(&end) as UnsafeRawPointer?, Int(_ffi_read(&end) as UInt), _ffi_read(&end) as UInt),
            rect: TextRect(
                x: _ffi_read(&end) as Int32,
                y: _ffi_read(&end) as Int32,
                w: _ffi_read(&end) as Int32,
                h: _ffi_read(&end) as Int32
            )
        ))
    }
    return items
}
