// This file was generated by miniffi v0.1.0. Do not edit.

#include "ffi.h"

extern "C" {

uintptr_t _ffi_fn_rust_mem_leaked();
int32_t _ffi_fn_set_getter(const void* getter_ptr);

} // extern "C"

extern "C" {

int32_t _ffi_cpp_Rc_Adder__add(std::shared_ptr<rust::Adder>* _self, int32_t x, int32_t y) {
    return _self->get()->add(x, y);
}

const void* _ffi_cpp_Rc_Getter__get_adder(std::shared_ptr<rust::Getter>* _self) {
    return new std::shared_ptr<rust::Adder>(_self->get()->get_adder());
}

void _ffi_cpp_drop_Rc_Adder(std::shared_ptr<rust::Adder>* self) {
    delete self;
}

void _ffi_cpp_drop_Rc_Getter(std::shared_ptr<rust::Getter>* self) {
    delete self;
}

} // extern "C"

uintptr_t rust::rust_mem_leaked() {
    return _ffi_fn_rust_mem_leaked();
}

int32_t rust::set_getter(std::shared_ptr<rust::Getter> getter) {
    auto getter_ptr = new std::shared_ptr<rust::Getter>(getter);
    return _ffi_fn_set_getter(getter_ptr);
}
