// This file was generated by miniffi v0.1.0. Do not edit.

export async function instantiate(bytes: BufferSource, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }> {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiate(bytes, { env });
    _ffi_exports = (await promise).instance.exports as any;
    return { memory: _ffi_exports.memory };
}

export async function instantiateStreaming(source: Response | PromiseLike<Response>, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }> {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiateStreaming(source, { env });
    _ffi_exports = (await promise).instance.exports as any;
    return { memory: _ffi_exports.memory };
}

export interface Tree {
    value: number,
    left: Tree | null,
    right: Tree | null,
}

export function rust_mem_leaked(): number {
    return _ffi_exports._ffi_fn_rust_mem_leaked();
}

export function sum_tree(tree: Tree): number {
    let buf = _ffi_new_WriteBuf();
    let has_tree_left = tree.left !== null;
    if (tree.left !== null) {
        let tree_left_val = tree.left;
        _ffi_box_Tree_to_rust(tree_left_val, buf);
    }
    let has_tree_right = tree.right !== null;
    if (tree.right !== null) {
        let tree_right_val = tree.right;
        _ffi_box_Tree_to_rust(tree_right_val, buf);
    }
    return _ffi_exports._ffi_fn_sum_tree(tree.value, _ffi_buf_to_rust(buf), has_tree_left, has_tree_right);
}

export function check_nested(x: number): number {
    let buf = _ffi_new_WriteBuf();
    _ffi_box_box_box_i32_to_rust(x, buf);
    return _ffi_exports._ffi_fn_check_nested(_ffi_buf_to_rust(buf));
}

let _ffi_new_WriteBuf = (): _ffi_WriteBuf => ({ u8: new Uint8Array(16), dv: null, off: 0 });
let _ffi_u8: Uint8Array;

interface _ffi_WriteBuf {
    u8: Uint8Array,
    dv: DataView | null,
    off: number,
}

function _ffi_box_Tree_to_rust(val: Tree, buf: _ffi_WriteBuf): void {
    _ffi_write_i32(buf, val.value);
    _ffi_write_i8(buf, +(val.left !== null));
    if (val.left !== null) {
        let val_left_val = val.left;
        _ffi_box_Tree_to_rust(val_left_val, buf);
    }
    _ffi_write_i8(buf, +(val.right !== null));
    if (val.right !== null) {
        let val_right_val = val.right;
        _ffi_box_Tree_to_rust(val_right_val, buf);
    }
}

function _ffi_box_box_box_i32_to_rust(val: number, buf: _ffi_WriteBuf): void {
    _ffi_box_box_i32_to_rust(val, buf);
}

function _ffi_box_box_i32_to_rust(val: number, buf: _ffi_WriteBuf): void {
    _ffi_box_i32_to_rust(val, buf);
}

function _ffi_box_i32_to_rust(val: number, buf: _ffi_WriteBuf): void {
    _ffi_write_i32(buf, val);
}

function _ffi_update_u8(): Uint8Array {
    let buffer = _ffi_exports.memory.buffer;
    if (!_ffi_u8 || _ffi_u8.buffer !== buffer) _ffi_u8 = new Uint8Array(buffer);
    return _ffi_u8;
}

function _ffi_buf_to_rust({ u8, off }: _ffi_WriteBuf): number {
    let ptr = _ffi_exports._ffi_alloc(off);
    _ffi_update_u8().set(u8.length > off ? u8.subarray(0, off) : u8, ptr);
    return ptr;
}

function _ffi_grow(buf: _ffi_WriteBuf, n: number): number {
    let off = buf.off;
    let u8 = buf.u8;
    if (off + n > u8.length) {
        (buf.u8 = new Uint8Array((off + n) << 1)).set(u8);
        buf.dv = null;
    }
    buf.off += n;
    if (!buf.dv) buf.dv = new DataView(buf.u8.buffer);
    return off;
}

function _ffi_write_i32(buf: _ffi_WriteBuf, val: number): void {
    let ptr = _ffi_grow(buf, 4);
    buf.dv!.setInt32(ptr, val, true);
}

function _ffi_write_i8(buf: _ffi_WriteBuf, val: number): void {
    let ptr = _ffi_grow(buf, 1);
    buf.dv!.setInt8(ptr, val);
}

let _ffi_exports: {
    memory: WebAssembly.Memory,
    _ffi_fn_check_nested: (buf_ptr: number) => number,
    _ffi_fn_rust_mem_leaked: () => number,
    _ffi_fn_sum_tree: (tree_value: number, buf_ptr: number, has_tree_left: boolean, has_tree_right: boolean) => number,
    _ffi_alloc: (len: number) => number,
};

const _ffi_imports = {};
