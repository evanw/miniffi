// This file was generated by miniffi v0.1.0. Do not edit.

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_rust_mem_leaked() -> usize {
    rust_mem_leaked()
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_alignas(alignas2: i32) -> i32 {
    test_alignas(alignas2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_alignof(alignof2: i32) -> i32 {
    test_alignof(alignof2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_and(and2: i32) -> i32 {
    test_and(and2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_and_eq(and_eq2: i32) -> i32 {
    test_and_eq(and_eq2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_asm(asm2: i32) -> i32 {
    test_asm(asm2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_associatedtype(associatedtype2: i32) -> i32 {
    test_associatedtype(associatedtype2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_associativity(associativity2: i32) -> i32 {
    test_associativity(associativity2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_atomic_cancel(atomic_cancel2: i32) -> i32 {
    test_atomic_cancel(atomic_cancel2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_atomic_commit(atomic_commit2: i32) -> i32 {
    test_atomic_commit(atomic_commit2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_atomic_noexcept(atomic_noexcept2: i32) -> i32 {
    test_atomic_noexcept(atomic_noexcept2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_auto(auto2: i32) -> i32 {
    test_auto(auto2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_bitand(bitand2: i32) -> i32 {
    test_bitand(bitand2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_bitor(bitor2: i32) -> i32 {
    test_bitor(bitor2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_bool(bool2: i32) -> i32 {
    test_bool(bool2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_boolean(boolean: i32) -> i32 {
    test_boolean(boolean)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_borrowing(borrowing2: i32) -> i32 {
    test_borrowing(borrowing2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_byte(byte: i32) -> i32 {
    test_byte(byte)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_case(case2: i32) -> i32 {
    test_case(case2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_catch(catch2: i32) -> i32 {
    test_catch(catch2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_char(char2: i32) -> i32 {
    test_char(char2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_char16_t(char16_t2: i32) -> i32 {
    test_char16_t(char16_t2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_char32_t(char32_t2: i32) -> i32 {
    test_char32_t(char32_t2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_char8_t(char8_t2: i32) -> i32 {
    test_char8_t(char8_t2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_class(class2: i32) -> i32 {
    test_class(class2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_co_await(co_await2: i32) -> i32 {
    test_co_await(co_await2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_co_return(co_return2: i32) -> i32 {
    test_co_return(co_return2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_co_yield(co_yield2: i32) -> i32 {
    test_co_yield(co_yield2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_compl(compl2: i32) -> i32 {
    test_compl(compl2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_concept(concept2: i32) -> i32 {
    test_concept(concept2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_const_cast(const_cast2: i32) -> i32 {
    test_const_cast(const_cast2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_consteval(consteval2: i32) -> i32 {
    test_consteval(consteval2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_constexpr(constexpr2: i32) -> i32 {
    test_constexpr(constexpr2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_constinit(constinit2: i32) -> i32 {
    test_constinit(constinit2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_consuming(consuming2: i32) -> i32 {
    test_consuming(consuming2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_contract_assert(contract_assert2: i32) -> i32 {
    test_contract_assert(contract_assert2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_convenience(convenience2: i32) -> i32 {
    test_convenience(convenience2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_debugger(debugger: i32) -> i32 {
    test_debugger(debugger)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_decltype(decltype2: i32) -> i32 {
    test_decltype(decltype2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_default(default2: i32) -> i32 {
    test_default(default2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_defer(defer2: i32) -> i32 {
    test_defer(defer2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_deinit(deinit2: i32) -> i32 {
    test_deinit(deinit2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_delete(delete2: i32) -> i32 {
    test_delete(delete2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_double(double2: i32) -> i32 {
    test_double(double2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_dynamic(dynamic2: i32) -> i32 {
    test_dynamic(dynamic2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_dynamic_cast(dynamic_cast2: i32) -> i32 {
    test_dynamic_cast(dynamic_cast2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_explicit(explicit2: i32) -> i32 {
    test_explicit(explicit2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_export(export2: i32) -> i32 {
    test_export(export2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_extends(extends: i32) -> i32 {
    test_extends(extends)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_extension(extension2: i32) -> i32 {
    test_extension(extension2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_fallthrough(fallthrough2: i32) -> i32 {
    test_fallthrough(fallthrough2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_fileprivate(fileprivate2: i32) -> i32 {
    test_fileprivate(fileprivate2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_finally(finally: i32) -> i32 {
    test_finally(finally)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_float(float2: i32) -> i32 {
    test_float(float2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_friend(friend2: i32) -> i32 {
    test_friend(friend2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_func(func2: i32) -> i32 {
    test_func(func2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_function(function: i32) -> i32 {
    test_function(function)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_get(get2: i32) -> i32 {
    test_get(get2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_goto(goto2: i32) -> i32 {
    test_goto(goto2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_guard(guard2: i32) -> i32 {
    test_guard(guard2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_implements(implements: i32) -> i32 {
    test_implements(implements)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_import(import2: i32) -> i32 {
    test_import(import2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_indirect(indirect2: i32) -> i32 {
    test_indirect(indirect2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_infix(infix2: i32) -> i32 {
    test_infix(infix2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_init(init2: i32) -> i32 {
    test_init(init2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_inline(inline2: i32) -> i32 {
    test_inline(inline2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_inout(inout2: i32) -> i32 {
    test_inout(inout2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_instanceof(instanceof: i32) -> i32 {
    test_instanceof(instanceof)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_int(int2: i32) -> i32 {
    test_int(int2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_interface(interface: i32) -> i32 {
    test_interface(interface)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_internal(internal2: i32) -> i32 {
    test_internal(internal2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_is(is2: i32) -> i32 {
    test_is(is2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_lazy(lazy2: i32) -> i32 {
    test_lazy(lazy2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_left(left2: i32) -> i32 {
    test_left(left2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_long(long2: i32) -> i32 {
    test_long(long2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_mutable(mutable2: i32) -> i32 {
    test_mutable(mutable2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_mutating(mutating2: i32) -> i32 {
    test_mutating(mutating2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_namespace(namespace2: i32) -> i32 {
    test_namespace(namespace2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_native(native: i32) -> i32 {
    test_native(native)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_new(new2: i32) -> i32 {
    test_new(new2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_nil(nil2: i32) -> i32 {
    test_nil(nil2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_noexcept(noexcept2: i32) -> i32 {
    test_noexcept(noexcept2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_none(none2: i32) -> i32 {
    test_none(none2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_nonisolated(nonisolated2: i32) -> i32 {
    test_nonisolated(nonisolated2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_nonmutating(nonmutating2: i32) -> i32 {
    test_nonmutating(nonmutating2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_not(not2: i32) -> i32 {
    test_not(not2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_not_eq(not_eq2: i32) -> i32 {
    test_not_eq(not_eq2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_null(null: i32) -> i32 {
    test_null(null)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_nullptr(nullptr2: i32) -> i32 {
    test_nullptr(nullptr2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_open(open2: i32) -> i32 {
    test_open(open2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_operator(operator2: i32) -> i32 {
    test_operator(operator2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_optional(optional2: i32) -> i32 {
    test_optional(optional2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_or(or2: i32) -> i32 {
    test_or(or2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_or_eq(or_eq2: i32) -> i32 {
    test_or_eq(or_eq2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_package(package2: i32) -> i32 {
    test_package(package2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_postfix(postfix2: i32) -> i32 {
    test_postfix(postfix2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_precedence(precedence2: i32) -> i32 {
    test_precedence(precedence2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_precedencegroup(precedencegroup2: i32) -> i32 {
    test_precedencegroup(precedencegroup2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_prefix(prefix2: i32) -> i32 {
    test_prefix(prefix2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_private(private2: i32) -> i32 {
    test_private(private2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_protected(protected2: i32) -> i32 {
    test_protected(protected2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_protocol(protocol2: i32) -> i32 {
    test_protocol(protocol2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_public(public2: i32) -> i32 {
    test_public(public2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_reflexpr(reflexpr2: i32) -> i32 {
    test_reflexpr(reflexpr2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_register(register2: i32) -> i32 {
    test_register(register2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_reinterpret_cast(reinterpret_cast2: i32) -> i32 {
    test_reinterpret_cast(reinterpret_cast2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_repeat(repeat2: i32) -> i32 {
    test_repeat(repeat2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_required(required2: i32) -> i32 {
    test_required(required2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_requires(requires2: i32) -> i32 {
    test_requires(requires2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_rethrows(rethrows2: i32) -> i32 {
    test_rethrows(rethrows2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_right(right2: i32) -> i32 {
    test_right(right2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_set(set2: i32) -> i32 {
    test_set(set2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_short(short2: i32) -> i32 {
    test_short(short2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_signed(signed2: i32) -> i32 {
    test_signed(signed2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_sizeof(sizeof2: i32) -> i32 {
    test_sizeof(sizeof2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_some(some2: i32) -> i32 {
    test_some(some2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_static_assert(static_assert2: i32) -> i32 {
    test_static_assert(static_assert2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_static_cast(static_cast2: i32) -> i32 {
    test_static_cast(static_cast2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_subscript(subscript2: i32) -> i32 {
    test_subscript(subscript2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_switch(switch2: i32) -> i32 {
    test_switch(switch2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_synchronized(synchronized2: i32) -> i32 {
    test_synchronized(synchronized2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_template(template2: i32) -> i32 {
    test_template(template2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_this(this2: i32) -> i32 {
    test_this(this2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_thread_local(thread_local2: i32) -> i32 {
    test_thread_local(thread_local2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_throw(throw2: i32) -> i32 {
    test_throw(throw2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_throws(throws2: i32) -> i32 {
    test_throws(throws2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_transient(transient: i32) -> i32 {
    test_transient(transient)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_typealias(typealias2: i32) -> i32 {
    test_typealias(typealias2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_typedef(typedef2: i32) -> i32 {
    test_typedef(typedef2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_typeid(typeid2: i32) -> i32 {
    test_typeid(typeid2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_typename(typename2: i32) -> i32 {
    test_typename(typename2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_undefined(undefined: i32) -> i32 {
    test_undefined(undefined)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_union(union2: i32) -> i32 {
    test_union(union2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_unowned(unowned2: i32) -> i32 {
    test_unowned(unowned2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_unsigned(unsigned2: i32) -> i32 {
    test_unsigned(unsigned2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_using(using2: i32) -> i32 {
    test_using(using2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_var(var2: i32) -> i32 {
    test_var(var2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_void(void2: i32) -> i32 {
    test_void(void2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_volatile(volatile2: i32) -> i32 {
    test_volatile(volatile2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_wchar_t(wchar_t2: i32) -> i32 {
    test_wchar_t(wchar_t2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_weak(weak2: i32) -> i32 {
    test_weak(weak2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_with(with: i32) -> i32 {
    test_with(with)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_xor(xor2: i32) -> i32 {
    test_xor(xor2)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_test_xor_eq(xor_eq2: i32) -> i32 {
    test_xor_eq(xor_eq2)
}
