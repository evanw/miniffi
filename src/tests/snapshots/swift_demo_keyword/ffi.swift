// This file was generated by miniffi v0.1.0. Do not edit.

func rust_mem_leaked() -> UInt {
    return _ffi_fn_rust_mem_leaked()
}

func test_alignas(_ alignas2: Int32) -> Int32 {
    return _ffi_fn_test_alignas(alignas2)
}

func test_alignof(_ alignof2: Int32) -> Int32 {
    return _ffi_fn_test_alignof(alignof2)
}

func test_and(_ and2: Int32) -> Int32 {
    return _ffi_fn_test_and(and2)
}

func test_and_eq(_ and_eq2: Int32) -> Int32 {
    return _ffi_fn_test_and_eq(and_eq2)
}

func test_asm(_ asm2: Int32) -> Int32 {
    return _ffi_fn_test_asm(asm2)
}

func test_associatedtype(_ associatedtype2: Int32) -> Int32 {
    return _ffi_fn_test_associatedtype(associatedtype2)
}

func test_associativity(_ associativity2: Int32) -> Int32 {
    return _ffi_fn_test_associativity(associativity2)
}

func test_atomic_cancel(_ atomic_cancel2: Int32) -> Int32 {
    return _ffi_fn_test_atomic_cancel(atomic_cancel2)
}

func test_atomic_commit(_ atomic_commit2: Int32) -> Int32 {
    return _ffi_fn_test_atomic_commit(atomic_commit2)
}

func test_atomic_noexcept(_ atomic_noexcept2: Int32) -> Int32 {
    return _ffi_fn_test_atomic_noexcept(atomic_noexcept2)
}

func test_auto(_ auto2: Int32) -> Int32 {
    return _ffi_fn_test_auto(auto2)
}

func test_bitand(_ bitand2: Int32) -> Int32 {
    return _ffi_fn_test_bitand(bitand2)
}

func test_bitor(_ bitor2: Int32) -> Int32 {
    return _ffi_fn_test_bitor(bitor2)
}

func test_bool(_ bool2: Int32) -> Int32 {
    return _ffi_fn_test_bool(bool2)
}

func test_boolean(_ boolean: Int32) -> Int32 {
    return _ffi_fn_test_boolean(boolean)
}

func test_borrowing(_ borrowing2: Int32) -> Int32 {
    return _ffi_fn_test_borrowing(borrowing2)
}

func test_byte(_ byte: Int32) -> Int32 {
    return _ffi_fn_test_byte(byte)
}

func test_case(_ case2: Int32) -> Int32 {
    return _ffi_fn_test_case(case2)
}

func test_catch(_ catch2: Int32) -> Int32 {
    return _ffi_fn_test_catch(catch2)
}

func test_char(_ char2: Int32) -> Int32 {
    return _ffi_fn_test_char(char2)
}

func test_char16_t(_ char16_t2: Int32) -> Int32 {
    return _ffi_fn_test_char16_t(char16_t2)
}

func test_char32_t(_ char32_t2: Int32) -> Int32 {
    return _ffi_fn_test_char32_t(char32_t2)
}

func test_char8_t(_ char8_t2: Int32) -> Int32 {
    return _ffi_fn_test_char8_t(char8_t2)
}

func test_class(_ class2: Int32) -> Int32 {
    return _ffi_fn_test_class(class2)
}

func test_co_await(_ co_await2: Int32) -> Int32 {
    return _ffi_fn_test_co_await(co_await2)
}

func test_co_return(_ co_return2: Int32) -> Int32 {
    return _ffi_fn_test_co_return(co_return2)
}

func test_co_yield(_ co_yield2: Int32) -> Int32 {
    return _ffi_fn_test_co_yield(co_yield2)
}

func test_compl(_ compl2: Int32) -> Int32 {
    return _ffi_fn_test_compl(compl2)
}

func test_concept(_ concept2: Int32) -> Int32 {
    return _ffi_fn_test_concept(concept2)
}

func test_const_cast(_ const_cast2: Int32) -> Int32 {
    return _ffi_fn_test_const_cast(const_cast2)
}

func test_consteval(_ consteval2: Int32) -> Int32 {
    return _ffi_fn_test_consteval(consteval2)
}

func test_constexpr(_ constexpr2: Int32) -> Int32 {
    return _ffi_fn_test_constexpr(constexpr2)
}

func test_constinit(_ constinit2: Int32) -> Int32 {
    return _ffi_fn_test_constinit(constinit2)
}

func test_consuming(_ consuming2: Int32) -> Int32 {
    return _ffi_fn_test_consuming(consuming2)
}

func test_contract_assert(_ contract_assert2: Int32) -> Int32 {
    return _ffi_fn_test_contract_assert(contract_assert2)
}

func test_convenience(_ convenience2: Int32) -> Int32 {
    return _ffi_fn_test_convenience(convenience2)
}

func test_debugger(_ debugger: Int32) -> Int32 {
    return _ffi_fn_test_debugger(debugger)
}

func test_decltype(_ decltype2: Int32) -> Int32 {
    return _ffi_fn_test_decltype(decltype2)
}

func test_default(_ default2: Int32) -> Int32 {
    return _ffi_fn_test_default(default2)
}

func test_defer(_ defer2: Int32) -> Int32 {
    return _ffi_fn_test_defer(defer2)
}

func test_deinit(_ deinit2: Int32) -> Int32 {
    return _ffi_fn_test_deinit(deinit2)
}

func test_delete(_ delete2: Int32) -> Int32 {
    return _ffi_fn_test_delete(delete2)
}

func test_double(_ double2: Int32) -> Int32 {
    return _ffi_fn_test_double(double2)
}

func test_dynamic(_ dynamic2: Int32) -> Int32 {
    return _ffi_fn_test_dynamic(dynamic2)
}

func test_dynamic_cast(_ dynamic_cast2: Int32) -> Int32 {
    return _ffi_fn_test_dynamic_cast(dynamic_cast2)
}

func test_explicit(_ explicit2: Int32) -> Int32 {
    return _ffi_fn_test_explicit(explicit2)
}

func test_export(_ export2: Int32) -> Int32 {
    return _ffi_fn_test_export(export2)
}

func test_extends(_ extends: Int32) -> Int32 {
    return _ffi_fn_test_extends(extends)
}

func test_extension(_ extension2: Int32) -> Int32 {
    return _ffi_fn_test_extension(extension2)
}

func test_fallthrough(_ fallthrough2: Int32) -> Int32 {
    return _ffi_fn_test_fallthrough(fallthrough2)
}

func test_fileprivate(_ fileprivate2: Int32) -> Int32 {
    return _ffi_fn_test_fileprivate(fileprivate2)
}

func test_finally(_ finally: Int32) -> Int32 {
    return _ffi_fn_test_finally(finally)
}

func test_float(_ float2: Int32) -> Int32 {
    return _ffi_fn_test_float(float2)
}

func test_friend(_ friend2: Int32) -> Int32 {
    return _ffi_fn_test_friend(friend2)
}

func test_func(_ func2: Int32) -> Int32 {
    return _ffi_fn_test_func(func2)
}

func test_function(_ function: Int32) -> Int32 {
    return _ffi_fn_test_function(function)
}

func test_get(_ get2: Int32) -> Int32 {
    return _ffi_fn_test_get(get2)
}

func test_goto(_ goto2: Int32) -> Int32 {
    return _ffi_fn_test_goto(goto2)
}

func test_guard(_ guard2: Int32) -> Int32 {
    return _ffi_fn_test_guard(guard2)
}

func test_implements(_ implements: Int32) -> Int32 {
    return _ffi_fn_test_implements(implements)
}

func test_import(_ import2: Int32) -> Int32 {
    return _ffi_fn_test_import(import2)
}

func test_indirect(_ indirect2: Int32) -> Int32 {
    return _ffi_fn_test_indirect(indirect2)
}

func test_infix(_ infix2: Int32) -> Int32 {
    return _ffi_fn_test_infix(infix2)
}

func test_init(_ init2: Int32) -> Int32 {
    return _ffi_fn_test_init(init2)
}

func test_inline(_ inline2: Int32) -> Int32 {
    return _ffi_fn_test_inline(inline2)
}

func test_inout(_ inout2: Int32) -> Int32 {
    return _ffi_fn_test_inout(inout2)
}

func test_instanceof(_ instanceof: Int32) -> Int32 {
    return _ffi_fn_test_instanceof(instanceof)
}

func test_int(_ int2: Int32) -> Int32 {
    return _ffi_fn_test_int(int2)
}

func test_interface(_ interface: Int32) -> Int32 {
    return _ffi_fn_test_interface(interface)
}

func test_internal(_ internal2: Int32) -> Int32 {
    return _ffi_fn_test_internal(internal2)
}

func test_is(_ is2: Int32) -> Int32 {
    return _ffi_fn_test_is(is2)
}

func test_lazy(_ lazy2: Int32) -> Int32 {
    return _ffi_fn_test_lazy(lazy2)
}

func test_left(_ left2: Int32) -> Int32 {
    return _ffi_fn_test_left(left2)
}

func test_long(_ long2: Int32) -> Int32 {
    return _ffi_fn_test_long(long2)
}

func test_mutable(_ mutable2: Int32) -> Int32 {
    return _ffi_fn_test_mutable(mutable2)
}

func test_mutating(_ mutating2: Int32) -> Int32 {
    return _ffi_fn_test_mutating(mutating2)
}

func test_namespace(_ namespace2: Int32) -> Int32 {
    return _ffi_fn_test_namespace(namespace2)
}

func test_native(_ native: Int32) -> Int32 {
    return _ffi_fn_test_native(native)
}

func test_new(_ new2: Int32) -> Int32 {
    return _ffi_fn_test_new(new2)
}

func test_nil(_ nil2: Int32) -> Int32 {
    return _ffi_fn_test_nil(nil2)
}

func test_noexcept(_ noexcept2: Int32) -> Int32 {
    return _ffi_fn_test_noexcept(noexcept2)
}

func test_none(_ none2: Int32) -> Int32 {
    return _ffi_fn_test_none(none2)
}

func test_nonisolated(_ nonisolated2: Int32) -> Int32 {
    return _ffi_fn_test_nonisolated(nonisolated2)
}

func test_nonmutating(_ nonmutating2: Int32) -> Int32 {
    return _ffi_fn_test_nonmutating(nonmutating2)
}

func test_not(_ not2: Int32) -> Int32 {
    return _ffi_fn_test_not(not2)
}

func test_not_eq(_ not_eq2: Int32) -> Int32 {
    return _ffi_fn_test_not_eq(not_eq2)
}

func test_null(_ null: Int32) -> Int32 {
    return _ffi_fn_test_null(null)
}

func test_nullptr(_ nullptr2: Int32) -> Int32 {
    return _ffi_fn_test_nullptr(nullptr2)
}

func test_open(_ open2: Int32) -> Int32 {
    return _ffi_fn_test_open(open2)
}

func test_operator(_ operator2: Int32) -> Int32 {
    return _ffi_fn_test_operator(operator2)
}

func test_optional(_ optional2: Int32) -> Int32 {
    return _ffi_fn_test_optional(optional2)
}

func test_or(_ or2: Int32) -> Int32 {
    return _ffi_fn_test_or(or2)
}

func test_or_eq(_ or_eq2: Int32) -> Int32 {
    return _ffi_fn_test_or_eq(or_eq2)
}

func test_package(_ package2: Int32) -> Int32 {
    return _ffi_fn_test_package(package2)
}

func test_postfix(_ postfix2: Int32) -> Int32 {
    return _ffi_fn_test_postfix(postfix2)
}

func test_precedence(_ precedence2: Int32) -> Int32 {
    return _ffi_fn_test_precedence(precedence2)
}

func test_precedencegroup(_ precedencegroup2: Int32) -> Int32 {
    return _ffi_fn_test_precedencegroup(precedencegroup2)
}

func test_prefix(_ prefix2: Int32) -> Int32 {
    return _ffi_fn_test_prefix(prefix2)
}

func test_private(_ private2: Int32) -> Int32 {
    return _ffi_fn_test_private(private2)
}

func test_protected(_ protected2: Int32) -> Int32 {
    return _ffi_fn_test_protected(protected2)
}

func test_protocol(_ protocol2: Int32) -> Int32 {
    return _ffi_fn_test_protocol(protocol2)
}

func test_public(_ public2: Int32) -> Int32 {
    return _ffi_fn_test_public(public2)
}

func test_reflexpr(_ reflexpr2: Int32) -> Int32 {
    return _ffi_fn_test_reflexpr(reflexpr2)
}

func test_register(_ register2: Int32) -> Int32 {
    return _ffi_fn_test_register(register2)
}

func test_reinterpret_cast(_ reinterpret_cast2: Int32) -> Int32 {
    return _ffi_fn_test_reinterpret_cast(reinterpret_cast2)
}

func test_repeat(_ repeat2: Int32) -> Int32 {
    return _ffi_fn_test_repeat(repeat2)
}

func test_required(_ required2: Int32) -> Int32 {
    return _ffi_fn_test_required(required2)
}

func test_requires(_ requires2: Int32) -> Int32 {
    return _ffi_fn_test_requires(requires2)
}

func test_rethrows(_ rethrows2: Int32) -> Int32 {
    return _ffi_fn_test_rethrows(rethrows2)
}

func test_right(_ right2: Int32) -> Int32 {
    return _ffi_fn_test_right(right2)
}

func test_set(_ set2: Int32) -> Int32 {
    return _ffi_fn_test_set(set2)
}

func test_short(_ short2: Int32) -> Int32 {
    return _ffi_fn_test_short(short2)
}

func test_signed(_ signed2: Int32) -> Int32 {
    return _ffi_fn_test_signed(signed2)
}

func test_sizeof(_ sizeof2: Int32) -> Int32 {
    return _ffi_fn_test_sizeof(sizeof2)
}

func test_some(_ some2: Int32) -> Int32 {
    return _ffi_fn_test_some(some2)
}

func test_static_assert(_ static_assert2: Int32) -> Int32 {
    return _ffi_fn_test_static_assert(static_assert2)
}

func test_static_cast(_ static_cast2: Int32) -> Int32 {
    return _ffi_fn_test_static_cast(static_cast2)
}

func test_subscript(_ subscript2: Int32) -> Int32 {
    return _ffi_fn_test_subscript(subscript2)
}

func test_switch(_ switch2: Int32) -> Int32 {
    return _ffi_fn_test_switch(switch2)
}

func test_synchronized(_ synchronized2: Int32) -> Int32 {
    return _ffi_fn_test_synchronized(synchronized2)
}

func test_template(_ template2: Int32) -> Int32 {
    return _ffi_fn_test_template(template2)
}

func test_this(_ this2: Int32) -> Int32 {
    return _ffi_fn_test_this(this2)
}

func test_thread_local(_ thread_local2: Int32) -> Int32 {
    return _ffi_fn_test_thread_local(thread_local2)
}

func test_throw(_ throw2: Int32) -> Int32 {
    return _ffi_fn_test_throw(throw2)
}

func test_throws(_ throws2: Int32) -> Int32 {
    return _ffi_fn_test_throws(throws2)
}

func test_transient(_ transient: Int32) -> Int32 {
    return _ffi_fn_test_transient(transient)
}

func test_typealias(_ typealias2: Int32) -> Int32 {
    return _ffi_fn_test_typealias(typealias2)
}

func test_typedef(_ typedef2: Int32) -> Int32 {
    return _ffi_fn_test_typedef(typedef2)
}

func test_typeid(_ typeid2: Int32) -> Int32 {
    return _ffi_fn_test_typeid(typeid2)
}

func test_typename(_ typename2: Int32) -> Int32 {
    return _ffi_fn_test_typename(typename2)
}

func test_undefined(_ undefined: Int32) -> Int32 {
    return _ffi_fn_test_undefined(undefined)
}

func test_union(_ union2: Int32) -> Int32 {
    return _ffi_fn_test_union(union2)
}

func test_unowned(_ unowned2: Int32) -> Int32 {
    return _ffi_fn_test_unowned(unowned2)
}

func test_unsigned(_ unsigned2: Int32) -> Int32 {
    return _ffi_fn_test_unsigned(unsigned2)
}

func test_using(_ using2: Int32) -> Int32 {
    return _ffi_fn_test_using(using2)
}

func test_var(_ var2: Int32) -> Int32 {
    return _ffi_fn_test_var(var2)
}

func test_void(_ void2: Int32) -> Int32 {
    return _ffi_fn_test_void(void2)
}

func test_volatile(_ volatile2: Int32) -> Int32 {
    return _ffi_fn_test_volatile(volatile2)
}

func test_wchar_t(_ wchar_t2: Int32) -> Int32 {
    return _ffi_fn_test_wchar_t(wchar_t2)
}

func test_weak(_ weak2: Int32) -> Int32 {
    return _ffi_fn_test_weak(weak2)
}

func test_with(_ with: Int32) -> Int32 {
    return _ffi_fn_test_with(with)
}

func test_xor(_ xor2: Int32) -> Int32 {
    return _ffi_fn_test_xor(xor2)
}

func test_xor_eq(_ xor_eq2: Int32) -> Int32 {
    return _ffi_fn_test_xor_eq(xor_eq2)
}
