// This file was generated by miniffi v0.1.0. Do not edit.

#include "ffi.h"

extern "C" {

int32_t _ffi_fn_empty_tuple(int32_t x, int32_t y);
float _ffi_fn_multiply_pairs(float ab_0, float ab_1, float cd_0, float cd_1);
int32_t _ffi_fn_nesting(int32_t x_0, int32_t x_2_0, int32_t x_2_1_0);
uintptr_t _ffi_fn_rust_mem_leaked();
int32_t _ffi_fn_single_element_tuple(int32_t x_0, int32_t y_0);

} // extern "C"

int32_t rust::empty_tuple(int32_t x, std::tuple<> foo, int32_t y) {
    (void)foo;
    return _ffi_fn_empty_tuple(x, y);
}

float rust::multiply_pairs(std::tuple<float, float> ab, std::tuple<float, float> cd) {
    return _ffi_fn_multiply_pairs(std::get<0>(ab), std::get<1>(ab), std::get<0>(cd), std::get<1>(cd));
}

int32_t rust::nesting(std::tuple<int32_t, std::tuple<>, std::tuple<int32_t, std::tuple<int32_t>>> x) {
    (void)std::get<1>(x);
    return _ffi_fn_nesting(std::get<0>(x), std::get<0>(std::get<2>(x)), std::get<0>(std::get<1>(std::get<2>(x))));
}

uintptr_t rust::rust_mem_leaked() {
    return _ffi_fn_rust_mem_leaked();
}

int32_t rust::single_element_tuple(std::tuple<int32_t> x, std::tuple<int32_t> y) {
    return _ffi_fn_single_element_tuple(std::get<0>(x), std::get<0>(y));
}
