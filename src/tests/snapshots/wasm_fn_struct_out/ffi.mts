// This file was generated by miniffi v0.1.0. Do not edit.

export async function instantiate(bytes: BufferSource, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }> {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiate(bytes, { env });
    _ffi_exports = (await promise).instance.exports as any;
    return { memory: _ffi_exports.memory };
}

export async function instantiateStreaming(source: Response | PromiseLike<Response>, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }> {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiateStreaming(source, { env });
    _ffi_exports = (await promise).instance.exports as any;
    return { memory: _ffi_exports.memory };
}

export interface EmptyStruct {
}

export interface SingleElementStruct {
    0: number,
}

export interface PairStruct {
    x: number,
    y: number,
}

export function rust_mem_leaked(): number {
    return _ffi_exports._ffi_fn_rust_mem_leaked();
}

export function empty_struct(): EmptyStruct {
    _ffi_exports._ffi_fn_empty_struct();
    return {};
}

export function single_element_struct(x: number): SingleElementStruct {
    let ret_0 = _ffi_exports._ffi_fn_single_element_struct(x);
    return { 0: ret_0 };
}

export function make_pair(x: number, y: number): PairStruct {
    let multi_ret = _ffi_exports._ffi_fn_make_pair(x, y);
    let ret_x = _ffi_update_dv().getFloat32(multi_ret, true);
    let ret_y = _ffi_dv.getFloat32(multi_ret + 4, true);
    return { x: ret_x, y: ret_y };
}

let _ffi_dv: DataView;

function _ffi_update_dv(): DataView {
    let buffer = _ffi_exports.memory.buffer;
    if (!_ffi_dv || _ffi_dv.buffer !== buffer) _ffi_dv = new DataView(buffer);
    return _ffi_dv;
}

let _ffi_exports: {
    memory: WebAssembly.Memory,
    _ffi_fn_empty_struct: () => void,
    _ffi_fn_make_pair: (x: number, y: number) => number,
    _ffi_fn_rust_mem_leaked: () => number,
    _ffi_fn_single_element_struct: (x: number) => number,
};

const _ffi_imports = {};
