// This file was generated by miniffi v0.1.0. Do not edit.

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_rust_mem_leaked() -> usize {
    rust_mem_leaked()
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_set_getter(getter_ptr: *const u8) -> i32 {
    set_getter(std::rc::Rc::new(_ffi_rs_Getter(getter_ptr)))
}

#[allow(non_camel_case_types)]
struct _ffi_rs_Adder(*const u8);

impl Drop for _ffi_rs_Adder {
    fn drop(&mut self) {
        unsafe extern "C" { fn _ffi_swift_drop(_: *const u8); }
        unsafe { _ffi_swift_drop(self.0) };
    }
}

impl Adder for _ffi_rs_Adder {
    fn add(&self, x: i32, y: i32) -> i32 {
        unsafe extern "C" { fn _ffi_swift_Adder__add(_: *const u8, x: i32, y: i32) -> i32; }
        unsafe { _ffi_swift_Adder__add(self.0, x, y) }
    }
}

#[allow(non_camel_case_types)]
struct _ffi_rs_Getter(*const u8);

impl Drop for _ffi_rs_Getter {
    fn drop(&mut self) {
        unsafe extern "C" { fn _ffi_swift_drop(_: *const u8); }
        unsafe { _ffi_swift_drop(self.0) };
    }
}

impl Getter for _ffi_rs_Getter {
    fn get_adder(&self) -> std::rc::Rc<dyn Adder> {
        unsafe extern "C" { fn _ffi_swift_Getter__get_adder(_: *const u8) -> *const u8; }
        let ret_ptr = unsafe { _ffi_swift_Getter__get_adder(self.0) };
        std::rc::Rc::new(_ffi_rs_Adder(ret_ptr))
    }
}
