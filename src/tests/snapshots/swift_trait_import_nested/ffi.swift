// This file was generated by miniffi v0.1.0. Do not edit.

protocol Getter: AnyObject {
    func get_adder() -> Adder
}

protocol Adder: AnyObject {
    func add(_ x: Int32, _ y: Int32) -> Int32
}

func rust_mem_leaked() -> UInt {
    return _ffi_fn_rust_mem_leaked()
}

func set_getter(_ getter: Getter) -> Int32 {
    return _ffi_fn_set_getter(UnsafeRawPointer(Unmanaged.passRetained(getter as AnyObject).toOpaque()))
}

@_cdecl("_ffi_swift_Adder__add")
func _ffi_swift_Adder__add(_self: UnsafeRawPointer?, x: Int32, y: Int32) -> Int32 {
    let _self = Unmanaged<AnyObject>.fromOpaque(_self!).takeUnretainedValue() as! Adder
    return _self.add(x, y)
}

@_cdecl("_ffi_swift_Getter__get_adder")
func _ffi_swift_Getter__get_adder(_self: UnsafeRawPointer?) -> UnsafeRawPointer? {
    let _self = Unmanaged<AnyObject>.fromOpaque(_self!).takeUnretainedValue() as! Getter
    return UnsafeRawPointer(Unmanaged.passRetained(_self.get_adder() as AnyObject).toOpaque())
}

@_cdecl("_ffi_swift_drop")
func _ffi_swift_drop(ptr: UnsafeRawPointer?) {
    _ = Unmanaged<AnyObject>.fromOpaque(ptr!).takeRetainedValue()
}
