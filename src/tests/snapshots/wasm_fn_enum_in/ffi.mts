// This file was generated by miniffi v0.1.0. Do not edit.

export async function instantiate(bytes: BufferSource, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }> {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiate(bytes, { env });
    _ffi_exports = (await promise).instance.exports as any;
    return { memory: _ffi_exports.memory };
}

export async function instantiateStreaming(source: Response | PromiseLike<Response>, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }> {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiateStreaming(source, { env });
    _ffi_exports = (await promise).instance.exports as any;
    return { memory: _ffi_exports.memory };
}

export const enum Foo {
    Zero,
    One,
    Hundred = 100,
}

export const enum Big {
    Min = -2147483648,
    Max = 2147483647,
}

export function rust_mem_leaked(): number {
    return _ffi_exports._ffi_fn_rust_mem_leaked();
}

export function foo_to_i32(foo: Foo): number {
    return _ffi_exports._ffi_fn_foo_to_i32(foo);
}

export function big_to_i32(big: Big): number {
    return _ffi_exports._ffi_fn_big_to_i32(big);
}

let _ffi_exports: {
    memory: WebAssembly.Memory,
    _ffi_fn_big_to_i32: (big_raw: number) => number,
    _ffi_fn_foo_to_i32: (foo_raw: number) => number,
    _ffi_fn_rust_mem_leaked: () => number,
};

const _ffi_imports = {};
