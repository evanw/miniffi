// This file was generated by miniffi v0.1.0. Do not edit.

#include "ffi.h"

extern "C" {

uintptr_t _ffi_fn_rust_mem_leaked();
int32_t _ffi_fn_set_empty_struct(const void* struct_in_ptr);
float _ffi_fn_set_multiply_pairs(const void* struct_in_ptr);
int32_t _ffi_fn_set_single_element_struct(const void* struct_in_ptr);

} // extern "C"

extern "C" {

int32_t _ffi_cpp_Rc_StructIn__empty_struct(std::shared_ptr<rust::StructIn>* _self, int32_t x, int32_t y) {
    auto foo = rust::EmptyStruct{};
    return _self->get()->empty_struct(x, std::move(foo), y);
}

float _ffi_cpp_Rc_StructIn__multiply_pairs(std::shared_ptr<rust::StructIn>* _self, float ab_x, float ab_y, float cd_x, float cd_y) {
    auto ab = rust::PairStruct{ab_x, ab_y};
    auto cd = rust::PairStruct{cd_x, cd_y};
    return _self->get()->multiply_pairs(std::move(ab), std::move(cd));
}

int32_t _ffi_cpp_Rc_StructIn__single_element_struct(std::shared_ptr<rust::StructIn>* _self, int32_t x_0, int32_t y_0) {
    auto x = rust::SingleElementStruct{x_0};
    auto y = rust::SingleElementStruct{y_0};
    return _self->get()->single_element_struct(std::move(x), std::move(y));
}

void _ffi_cpp_drop_Rc_StructIn(std::shared_ptr<rust::StructIn>* self) {
    delete self;
}

} // extern "C"

uintptr_t rust::rust_mem_leaked() {
    return _ffi_fn_rust_mem_leaked();
}

int32_t rust::set_empty_struct(std::shared_ptr<rust::StructIn> struct_in) {
    auto struct_in_ptr = new std::shared_ptr<rust::StructIn>(struct_in);
    return _ffi_fn_set_empty_struct(struct_in_ptr);
}

float rust::set_multiply_pairs(std::shared_ptr<rust::StructIn> struct_in) {
    auto struct_in_ptr = new std::shared_ptr<rust::StructIn>(struct_in);
    return _ffi_fn_set_multiply_pairs(struct_in_ptr);
}

int32_t rust::set_single_element_struct(std::shared_ptr<rust::StructIn> struct_in) {
    auto struct_in_ptr = new std::shared_ptr<rust::StructIn>(struct_in);
    return _ffi_fn_set_single_element_struct(struct_in_ptr);
}
