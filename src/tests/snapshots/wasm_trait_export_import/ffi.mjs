// This file was generated by miniffi v0.1.0. Do not edit.

export async function instantiate(bytes, imports) {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiate(bytes, { env });
    _ffi_exports = (await promise).instance.exports;
    return { memory: _ffi_exports.memory };
}

export async function instantiateStreaming(source, imports) {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiateStreaming(source, { env });
    _ffi_exports = (await promise).instance.exports;
    return { memory: _ffi_exports.memory };
}

export function rust_mem_leaked() {
    return _ffi_exports._ffi_fn_rust_mem_leaked();
}

export function get_exported() {
    let ret_ptr = _ffi_exports._ffi_fn_get_exported();
    return new _ffi_Rc_Exported(ret_ptr);
}

export function get_counter() {
    return _ffi_exports._ffi_fn_get_counter();
}

let _ffi_reg_Rc_Exported = new FinalizationRegistry((ptr) => _ffi_exports._ffi_rs_drop_Rc_Exported(ptr));
let _ffi_handles = /* @__PURE__ */ new Map;
let _ffi_next_handle = 0;

const _ffi_Rc_Exported = class Exported {
    constructor(_) {
        Object.defineProperty(this, "_", { value: _ });
        _ffi_reg_Rc_Exported.register(this, _);
    }

    run(imported) {
        return _ffi_exports._ffi_Rc_Exported__run(this._, _ffi_handle_alloc(imported));
    }
};

function _ffi_handle_alloc(obj) {
    _ffi_handles.set(++_ffi_next_handle, obj);
    return _ffi_next_handle;
}

let _ffi_exports;

const _ffi_imports = {
    _ffi_js_Imported__add(self, x, y) {
        return _ffi_handles.get(self).add(x, y);
    },

    _ffi_js_drop(handle) {
        _ffi_handles.delete(handle);
    },
};
