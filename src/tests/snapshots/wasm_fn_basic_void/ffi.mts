// This file was generated by miniffi v0.1.0. Do not edit.

export async function instantiate(bytes: BufferSource, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }> {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiate(bytes, { env });
    _ffi_exports = (await promise).instance.exports as any;
    return { memory: _ffi_exports.memory };
}

export async function instantiateStreaming(source: Response | PromiseLike<Response>, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }> {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiateStreaming(source, { env });
    _ffi_exports = (await promise).instance.exports as any;
    return { memory: _ffi_exports.memory };
}

export function rust_mem_leaked(): number {
    return _ffi_exports._ffi_fn_rust_mem_leaked();
}

export function add_void(x: number, y: number): void {
    _ffi_exports._ffi_fn_add_void(x, y);
}

export function add_empty_tuple(x: number, y: number): undefined {
    _ffi_exports._ffi_fn_add_empty_tuple(x, y);
    return undefined;
}

export function get_result(): number {
    return _ffi_exports._ffi_fn_get_result();
}

let _ffi_exports: {
    memory: WebAssembly.Memory,
    _ffi_fn_add_empty_tuple: (x: number, y: number) => void,
    _ffi_fn_add_void: (x: number, y: number) => void,
    _ffi_fn_get_result: () => number,
    _ffi_fn_rust_mem_leaked: () => number,
};

const _ffi_imports = {};
