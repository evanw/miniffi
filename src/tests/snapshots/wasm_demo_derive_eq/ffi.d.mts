// This file was generated by miniffi v0.1.0. Do not edit.

export function instantiate(bytes: BufferSource, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }>;
export function instantiateStreaming(source: Response | PromiseLike<Response>, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }>;

export type EnumBoxTup =
    | { readonly $: "Foo", 0: [number, number] }
    | { readonly $: "Bar" }
    | { readonly $: "Baz", x: number, y: number }

export type EnumVecTup =
    | { readonly $: "Foo", 0: [number, number][] }
    | { readonly $: "Bar" }
    | { readonly $: "Baz", x: number, y: number }

export type EnumOptTup =
    | { readonly $: "Foo", 0: [number, number] | null }
    | { readonly $: "Bar" }
    | { readonly $: "Baz", x: number, y: number }

export interface EmptyStruct {
}

export interface BoxTup0 {
    0: undefined,
}

export interface BoxTup1 {
    0: [number],
}

export interface BoxTup2 {
    0: [number, number],
}

export interface VecTup0 {
    0: undefined[],
}

export interface VecTup1 {
    0: [number][],
}

export interface VecTup2 {
    0: [number, number][],
}

export interface OptTup0 {
    0: undefined | null,
}

export interface OptTup1 {
    0: [number] | null,
}

export interface OptTup2 {
    0: [number, number] | null,
}

export interface TupBox {
    0: [number, boolean],
}

export interface VecBox {
    0: number[],
}

export interface BoxVec {
    0: number[],
}

export interface OptBox {
    0: number | null,
}

export interface BoxOpt {
    0: number | null,
}

export interface VecBoxVec {
    0: number[][],
}

export interface BoxVecBox {
    0: number[],
}

export interface OptBoxOpt {
    0: number | null,
}

export interface BoxOptBox {
    0: number | null,
}

export function rust_mem_leaked(): number;
export function empty_tuple(x: undefined): undefined;
export function empty_struct(x: EmptyStruct): EmptyStruct;
export function box_tup_0(x: BoxTup0): BoxTup0;
export function box_tup_1(x: BoxTup1): BoxTup1;
export function box_tup_2(x: BoxTup2): BoxTup2;
export function vec_tup_0(x: VecTup0): VecTup0;
export function vec_tup_1(x: VecTup1): VecTup1;
export function vec_tup_2(x: VecTup2): VecTup2;
export function opt_tup_0(x: OptTup0): OptTup0;
export function opt_tup_1(x: OptTup1): OptTup1;
export function opt_tup_2(x: OptTup2): OptTup2;
export function enum_box_tup(x: EnumBoxTup): EnumBoxTup;
export function enum_vec_tup(x: EnumVecTup): EnumVecTup;
export function enum_opt_tup(x: EnumOptTup): EnumOptTup;
export function tup_box(x: TupBox): TupBox;
export function vec_box(x: VecBox): VecBox;
export function box_vec(x: BoxVec): BoxVec;
export function opt_box(x: OptBox): OptBox;
export function box_opt(x: BoxOpt): BoxOpt;
export function vec_box_vec(x: VecBoxVec): VecBoxVec;
export function box_vec_box(x: BoxVecBox): BoxVecBox;
export function opt_box_opt(x: OptBoxOpt): OptBoxOpt;
export function box_opt_box(x: BoxOptBox): BoxOptBox;
