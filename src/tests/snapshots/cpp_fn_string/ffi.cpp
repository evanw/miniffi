// This file was generated by miniffi v0.1.0. Do not edit.

#include "ffi.h"

struct _ffi_ret_ptr_2_usize {
    const char* _0;
    uintptr_t _1;
    uintptr_t _2;
};

extern "C" {

void* _ffi_alloc(uintptr_t len);
_ffi_ret_ptr_2_usize _ffi_fn_get_string();
void _ffi_dealloc(const void* ptr, uintptr_t capacity);
int32_t _ffi_fn_get_string_len();
void _ffi_fn_reset();
uintptr_t _ffi_fn_rust_mem_leaked();
void _ffi_fn_set_str(const void* x_ptr, uintptr_t x_len);
void _ffi_fn_set_string(const void* x_ptr, uintptr_t x_len);

} // extern "C"

namespace {

const void* _ffi_string_to_rust(const std::string& str, uintptr_t &len) {
    len = str.size();
    return memcpy(_ffi_alloc(len), str.data(), len);
}

std::string _ffi_string_from_rust(const char* ptr, uintptr_t len, uintptr_t cap) {
    std::string str(ptr, len);
    _ffi_dealloc(ptr, cap);
    return str;
}

} // namespace

std::string rust::get_string() {
    auto multi_ret = _ffi_fn_get_string();
    auto ret_ptr = multi_ret._0;
    auto ret_len = multi_ret._1;
    auto ret_cap = multi_ret._2;
    return _ffi_string_from_rust(ret_ptr, ret_len, ret_cap);
}

int32_t rust::get_string_len() {
    return _ffi_fn_get_string_len();
}

void rust::reset() {
    _ffi_fn_reset();
}

uintptr_t rust::rust_mem_leaked() {
    return _ffi_fn_rust_mem_leaked();
}

void rust::set_str(std::string x) {
    uintptr_t x_len;
    const void* x_ptr = _ffi_string_to_rust(x, x_len);
    _ffi_fn_set_str(x_ptr, x_len);
}

void rust::set_string(std::string x) {
    uintptr_t x_len;
    const void* x_ptr = _ffi_string_to_rust(x, x_len);
    _ffi_fn_set_string(x_ptr, x_len);
}
