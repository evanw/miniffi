// This file was generated by miniffi v0.1.0. Do not edit.

#include "ffi.h"

struct _ffi_ret_2_i32 {
    int32_t _0;
    int32_t _1;
};

struct _ffi_ret_ptr_usize {
    const void* _0;
    uintptr_t _1;
};

extern "C" {

void _ffi_dealloc(const void* ptr, uintptr_t capacity);
void _ffi_drop_Box_Handler(const void* ptr);
void* _ffi_alloc(uintptr_t len);
void _ffi_Box_Handler__on_draw(const void* _self, const void* canvas_ptr);
void _ffi_fn_create_app(const void* platform_ptr);
uintptr_t _ffi_fn_rust_mem_leaked();

} // extern "C"

namespace {

template <typename T>
T _ffi_read(const uint8_t* &ptr) {
    T val;
    memcpy(&val, ptr, sizeof(T));
    ptr += sizeof(T);
    return val;
}

std::string _ffi_string_from_rust(const char* ptr, uintptr_t len, uintptr_t cap) {
    std::string str(ptr, len);
    _ffi_dealloc(ptr, cap);
    return str;
}

std::vector<rust::TextRun> _ffi_vec_TextRun_from_rust(uintptr_t len, const uint8_t*& end) {
    std::vector<rust::TextRun> items;
    items.reserve(len);
    while (items.size() < len) {
        auto item_text_ptr = _ffi_read<const char*>(end);
        auto item_text_len = _ffi_read<uintptr_t>(end);
        auto item_text_cap = _ffi_read<uintptr_t>(end);
        auto item_text = _ffi_string_from_rust(item_text_ptr, item_text_len, item_text_cap);
        auto item_rect_x = _ffi_read<int32_t>(end);
        auto item_rect_y = _ffi_read<int32_t>(end);
        auto item_rect_w = _ffi_read<int32_t>(end);
        auto item_rect_h = _ffi_read<int32_t>(end);
        auto item_rect = rust::TextRect{item_rect_x, item_rect_y, item_rect_w, item_rect_h};
        auto item = rust::TextRun{std::move(item_text), std::move(item_rect)};
        items.emplace_back(std::move(item));
    }
    return items;
}

struct _ffi_Box_Handler final : rust::Handler {
    _ffi_Box_Handler(const void* ptr) : _self(ptr) {}
    virtual ~_ffi_Box_Handler() { _ffi_drop_Box_Handler(_self); }
    virtual void on_draw(std::unique_ptr<rust::Canvas> canvas);
    const void* _self;
};

const void* _ffi_string_to_rust(const std::string& str, uintptr_t &len) {
    len = str.size();
    return memcpy(_ffi_alloc(len), str.data(), len);
}

} // namespace

extern "C" {

void _ffi_cpp_Box_Canvas__draw_text_runs(rust::Canvas* _self, const void* buf_ptr, uintptr_t buf_cap, uintptr_t runs_len) {
    auto buf_end = (const uint8_t*)buf_ptr;
    auto runs = _ffi_vec_TextRun_from_rust(runs_len, buf_end);
    _self->draw_text_runs(std::move(runs));
    _ffi_dealloc(buf_ptr, buf_cap);
}

const void* _ffi_cpp_Box_Platform__create_window(rust::Platform* _self) {
    return new std::shared_ptr<rust::Window>(_self->create_window());
}

const void* _ffi_cpp_Rc_Window__child_window(std::shared_ptr<rust::Window>* _self) {
    return new std::shared_ptr<rust::Window>(_self->get()->child_window());
}

_ffi_ret_2_i32 _ffi_cpp_Rc_Window__get_size(std::shared_ptr<rust::Window>* _self) {
    auto ret = _self->get()->get_size();
    auto ret_0 = std::get<0>(ret);
    auto ret_1 = std::get<1>(ret);
    return _ffi_ret_2_i32{ret_0, ret_1};
}

_ffi_ret_ptr_usize _ffi_cpp_Rc_Window__get_title(std::shared_ptr<rust::Window>* _self) {
    uintptr_t ret_len;
    const void* ret_ptr = _ffi_string_to_rust(_self->get()->get_title(), ret_len);
    return _ffi_ret_ptr_usize{ret_ptr, ret_len};
}

void _ffi_cpp_Rc_Window__set_handler(std::shared_ptr<rust::Window>* _self, const void* handler_ptr) {
    auto handler = std::unique_ptr<rust::Handler>(new _ffi_Box_Handler(handler_ptr));
    _self->get()->set_handler(std::move(handler));
}

void _ffi_cpp_Rc_Window__set_size(std::shared_ptr<rust::Window>* _self, int32_t width, int32_t height) {
    _self->get()->set_size(width, height);
}

void _ffi_cpp_Rc_Window__set_title(std::shared_ptr<rust::Window>* _self, const char* title_ptr, uintptr_t title_len, uintptr_t title_cap) {
    auto title = _ffi_string_from_rust(title_ptr, title_len, title_cap);
    _self->get()->set_title(std::move(title));
}

void _ffi_cpp_drop_Box_Canvas(rust::Canvas* self) {
    delete self;
}

void _ffi_cpp_drop_Box_Platform(rust::Platform* self) {
    delete self;
}

void _ffi_cpp_drop_Rc_Window(std::shared_ptr<rust::Window>* self) {
    delete self;
}

} // extern "C"

void _ffi_Box_Handler::on_draw(std::unique_ptr<rust::Canvas> canvas) {
    auto canvas_ptr = canvas.release();
    _ffi_Box_Handler__on_draw(_self, canvas_ptr);
}

void rust::create_app(std::unique_ptr<rust::Platform> platform) {
    auto platform_ptr = platform.release();
    _ffi_fn_create_app(platform_ptr);
}

uintptr_t rust::rust_mem_leaked() {
    return _ffi_fn_rust_mem_leaked();
}
