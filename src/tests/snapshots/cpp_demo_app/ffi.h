// This file was generated by miniffi v0.1.0. Do not edit.

#pragma once

#include <memory>
#include <stdint.h>
#include <vector>
#include <string>
#include <tuple>

namespace rust {

struct TextRun;
struct Canvas;
struct Window;
struct Handler;

struct Canvas {
    virtual ~Canvas() {}
    virtual void draw_text_runs(std::vector<TextRun> runs) = 0;
};

struct Handler {
    virtual ~Handler() {}
    virtual void on_draw(std::unique_ptr<Canvas> canvas) = 0;
};

struct Platform {
    virtual ~Platform() {}
    virtual std::shared_ptr<Window> create_window() = 0;
};

struct TextRect {
    int32_t x = 0;
    int32_t y = 0;
    int32_t w = 0;
    int32_t h = 0;
};

struct TextRun {
    std::string text;
    TextRect rect;
};

struct Window {
    virtual ~Window() {}
    virtual std::string get_title() = 0;
    virtual void set_title(std::string title) = 0;
    virtual std::tuple<int32_t, int32_t> get_size() = 0;
    virtual void set_size(int32_t width, int32_t height) = 0;
    virtual void set_handler(std::unique_ptr<Handler> handler) = 0;
    virtual std::shared_ptr<Window> child_window() = 0;
};

uintptr_t rust_mem_leaked();

void create_app(std::unique_ptr<Platform> platform);

} // namespace rust
