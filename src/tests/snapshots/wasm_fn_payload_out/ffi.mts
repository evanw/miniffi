// This file was generated by miniffi v0.1.0. Do not edit.

export async function instantiate(bytes: BufferSource, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }> {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiate(bytes, { env });
    _ffi_exports = (await promise).instance.exports as any;
    return { memory: _ffi_exports.memory };
}

export async function instantiateStreaming(source: Response | PromiseLike<Response>, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }> {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiateStreaming(source, { env });
    _ffi_exports = (await promise).instance.exports as any;
    return { memory: _ffi_exports.memory };
}

export type Foo =
    | { readonly $: "Empty" }
    | { readonly $: "Single", 0: number }
    | { readonly $: "Point", x: number, y: number }
    | { readonly $: "Nested", 0: Foo }

export function rust_mem_leaked(): number {
    return _ffi_exports._ffi_fn_rust_mem_leaked();
}

export function get_tests(): Foo[] {
    let multi_ret = _ffi_exports._ffi_fn_get_tests();
    let buf_ptr = _ffi_update_dv().getInt32(multi_ret, true);
    let buf_cap = _ffi_dv.getUint32(multi_ret + 4, true);
    let ret_len = _ffi_dv.getUint32(multi_ret + 8, true);
    let buf = _ffi_new_ReadBuf(buf_ptr);
    let ret = _ffi_vec_Foo_from_rust(ret_len, buf);
    _ffi_exports._ffi_dealloc(buf_ptr, buf_cap);
    return ret;
}

let _ffi_dv: DataView;
let _ffi_new_ReadBuf = (off: number): _ffi_ReadBuf => ({ dv: _ffi_update_dv(), off });
let _ffi_enum_Foo__Empty: Foo = { $: "Empty" };

interface _ffi_ReadBuf {
    dv: DataView,
    off: number,
}

function _ffi_update_dv(): DataView {
    let buffer = _ffi_exports.memory.buffer;
    if (!_ffi_dv || _ffi_dv.buffer !== buffer) _ffi_dv = new DataView(buffer);
    return _ffi_dv;
}

function _ffi_box_Foo_from_rust(buf: _ffi_ReadBuf): Foo {
    return _ffi_enum_Foo_from_rust(buf);
}

function _ffi_enum_Foo_from_rust(buf: _ffi_ReadBuf): Foo {
    switch (_ffi_read_i32(buf)) {
        case 0: return _ffi_enum_Foo__Empty;
        case 1: return { $: "Single", 0: _ffi_read_i32(buf) };
        case 2: return { $: "Point", x: _ffi_read_i32(buf), y: _ffi_read_i32(buf) };
        case 3: return { $: "Nested", 0: _ffi_box_Foo_from_rust(buf) };
        default: throw Error();
    }
}

function _ffi_read_i32(buf: _ffi_ReadBuf): number {
    let val = buf.dv.getInt32(buf.off, true);
    buf.off += 4;
    return val;
}

function _ffi_vec_Foo_from_rust(len: number, buf: _ffi_ReadBuf): Foo[] {
    let items: Foo[] = [];
    while (items.length < len) {
        items.push(_ffi_enum_Foo_from_rust(buf));
    }
    return items;
}

let _ffi_exports: {
    memory: WebAssembly.Memory,
    _ffi_dealloc: (ptr: number, capacity: number) => void,
    _ffi_fn_get_tests: () => number,
    _ffi_fn_rust_mem_leaked: () => number,
};

const _ffi_imports = {};
