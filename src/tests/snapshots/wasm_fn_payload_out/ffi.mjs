// This file was generated by miniffi v0.1.0. Do not edit.

export async function instantiate(bytes, imports) {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiate(bytes, { env });
    _ffi_exports = (await promise).instance.exports;
    return { memory: _ffi_exports.memory };
}

export async function instantiateStreaming(source, imports) {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiateStreaming(source, { env });
    _ffi_exports = (await promise).instance.exports;
    return { memory: _ffi_exports.memory };
}

export function rust_mem_leaked() {
    return _ffi_exports._ffi_fn_rust_mem_leaked();
}

export function get_tests() {
    let multi_ret = _ffi_exports._ffi_fn_get_tests();
    let buf_ptr = _ffi_update_dv().getInt32(multi_ret, true);
    let buf_cap = _ffi_dv.getUint32(multi_ret + 4, true);
    let ret_len = _ffi_dv.getUint32(multi_ret + 8, true);
    let buf = _ffi_new_ReadBuf(buf_ptr);
    let ret = _ffi_vec_Foo_from_rust(ret_len, buf);
    _ffi_exports._ffi_dealloc(buf_ptr, buf_cap);
    return ret;
}

let _ffi_dv;
let _ffi_new_ReadBuf = (off) => ({ dv: _ffi_update_dv(), off });
let _ffi_enum_Foo__Empty = { $: "Empty" };

function _ffi_update_dv() {
    let buffer = _ffi_exports.memory.buffer;
    if (!_ffi_dv || _ffi_dv.buffer !== buffer) _ffi_dv = new DataView(buffer);
    return _ffi_dv;
}

function _ffi_box_Foo_from_rust(buf) {
    return _ffi_enum_Foo_from_rust(buf);
}

function _ffi_enum_Foo_from_rust(buf) {
    switch (_ffi_read_i32(buf)) {
        case 0: return _ffi_enum_Foo__Empty;
        case 1: return { $: "Single", 0: _ffi_read_i32(buf) };
        case 2: return { $: "Point", x: _ffi_read_i32(buf), y: _ffi_read_i32(buf) };
        case 3: return { $: "Nested", 0: _ffi_box_Foo_from_rust(buf) };
        default: throw Error();
    }
}

function _ffi_read_i32(buf) {
    let val = buf.dv.getInt32(buf.off, true);
    buf.off += 4;
    return val;
}

function _ffi_vec_Foo_from_rust(len, buf) {
    let items = [];
    while (items.length < len) {
        items.push(_ffi_enum_Foo_from_rust(buf));
    }
    return items;
}

let _ffi_exports;

const _ffi_imports = {};
