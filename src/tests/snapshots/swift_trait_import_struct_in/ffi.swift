// This file was generated by miniffi v0.1.0. Do not edit.

protocol StructIn: AnyObject {
    func empty_struct(_ x: Int32, _ foo: EmptyStruct, _ y: Int32) -> Int32
    func single_element_struct(_ x: SingleElementStruct, _ y: SingleElementStruct) -> Int32
    func multiply_pairs(_ ab: PairStruct, _ cd: PairStruct) -> Float32
}

struct EmptyStruct {
}

struct SingleElementStruct {
    var _0: Int32
}

struct PairStruct {
    var x: Float32
    var y: Float32
}

func rust_mem_leaked() -> UInt {
    return _ffi_fn_rust_mem_leaked()
}

func set_empty_struct(_ struct_in: StructIn) -> Int32 {
    return _ffi_fn_set_empty_struct(UnsafeRawPointer(Unmanaged.passRetained(struct_in as AnyObject).toOpaque()))
}

func set_single_element_struct(_ struct_in: StructIn) -> Int32 {
    return _ffi_fn_set_single_element_struct(UnsafeRawPointer(Unmanaged.passRetained(struct_in as AnyObject).toOpaque()))
}

func set_multiply_pairs(_ struct_in: StructIn) -> Float32 {
    return _ffi_fn_set_multiply_pairs(UnsafeRawPointer(Unmanaged.passRetained(struct_in as AnyObject).toOpaque()))
}

@_cdecl("_ffi_swift_StructIn__empty_struct")
func _ffi_swift_StructIn__empty_struct(_self: UnsafeRawPointer?, x: Int32, y: Int32) -> Int32 {
    let _self = Unmanaged<AnyObject>.fromOpaque(_self!).takeUnretainedValue() as! StructIn
    return _self.empty_struct(x, EmptyStruct(), y)
}

@_cdecl("_ffi_swift_StructIn__multiply_pairs")
func _ffi_swift_StructIn__multiply_pairs(_self: UnsafeRawPointer?, ab_x: Float32, ab_y: Float32, cd_x: Float32, cd_y: Float32) -> Float32 {
    let _self = Unmanaged<AnyObject>.fromOpaque(_self!).takeUnretainedValue() as! StructIn
    return _self.multiply_pairs(PairStruct(x: ab_x, y: ab_y), PairStruct(x: cd_x, y: cd_y))
}

@_cdecl("_ffi_swift_StructIn__single_element_struct")
func _ffi_swift_StructIn__single_element_struct(_self: UnsafeRawPointer?, x_0: Int32, y_0: Int32) -> Int32 {
    let _self = Unmanaged<AnyObject>.fromOpaque(_self!).takeUnretainedValue() as! StructIn
    return _self.single_element_struct(SingleElementStruct(_0: x_0), SingleElementStruct(_0: y_0))
}

@_cdecl("_ffi_swift_drop")
func _ffi_swift_drop(ptr: UnsafeRawPointer?) {
    _ = Unmanaged<AnyObject>.fromOpaque(ptr!).takeRetainedValue()
}
