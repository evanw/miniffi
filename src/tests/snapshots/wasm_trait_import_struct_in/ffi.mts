// This file was generated by miniffi v0.1.0. Do not edit.

export async function instantiate(bytes: BufferSource, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }> {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiate(bytes, { env });
    _ffi_exports = (await promise).instance.exports as any;
    return { memory: _ffi_exports.memory };
}

export async function instantiateStreaming(source: Response | PromiseLike<Response>, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }> {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiateStreaming(source, { env });
    _ffi_exports = (await promise).instance.exports as any;
    return { memory: _ffi_exports.memory };
}

export interface StructIn {
    empty_struct(x: number, foo: EmptyStruct, y: number): number;
    single_element_struct(x: SingleElementStruct, y: SingleElementStruct): number;
    multiply_pairs(ab: PairStruct, cd: PairStruct): number;
}

export interface EmptyStruct {
}

export interface SingleElementStruct {
    0: number,
}

export interface PairStruct {
    x: number,
    y: number,
}

export function rust_mem_leaked(): number {
    return _ffi_exports._ffi_fn_rust_mem_leaked();
}

export function set_empty_struct(struct_in: StructIn): number {
    return _ffi_exports._ffi_fn_set_empty_struct(_ffi_handle_alloc(struct_in));
}

export function set_single_element_struct(struct_in: StructIn): number {
    return _ffi_exports._ffi_fn_set_single_element_struct(_ffi_handle_alloc(struct_in));
}

export function set_multiply_pairs(struct_in: StructIn): number {
    return _ffi_exports._ffi_fn_set_multiply_pairs(_ffi_handle_alloc(struct_in));
}

let _ffi_handles: Map<number, any> = /* @__PURE__ */ new Map;
let _ffi_next_handle = 0;

function _ffi_handle_alloc(obj: any): number {
    _ffi_handles.set(++_ffi_next_handle, obj);
    return _ffi_next_handle;
}

let _ffi_exports: {
    memory: WebAssembly.Memory,
    _ffi_fn_rust_mem_leaked: () => number,
    _ffi_fn_set_empty_struct: (struct_in_ptr: number) => number,
    _ffi_fn_set_multiply_pairs: (struct_in_ptr: number) => number,
    _ffi_fn_set_single_element_struct: (struct_in_ptr: number) => number,
};

const _ffi_imports = {
    _ffi_js_StructIn__empty_struct(self: number, x: number, y: number): number {
        return _ffi_handles.get(self).empty_struct(x, {}, y);
    },

    _ffi_js_StructIn__multiply_pairs(self: number, ab_x: number, ab_y: number, cd_x: number, cd_y: number): number {
        return _ffi_handles.get(self).multiply_pairs({ x: ab_x, y: ab_y }, { x: cd_x, y: cd_y });
    },

    _ffi_js_StructIn__single_element_struct(self: number, x_0: number, y_0: number): number {
        return _ffi_handles.get(self).single_element_struct({ 0: x_0 }, { 0: y_0 });
    },

    _ffi_js_drop(handle: number): void {
        _ffi_handles.delete(handle);
    },
};
