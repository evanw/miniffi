// This file was generated by miniffi v0.1.0. Do not edit.

export async function instantiate(bytes, imports) {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiate(bytes, { env });
    _ffi_exports = (await promise).instance.exports;
    return { memory: _ffi_exports.memory };
}

export async function instantiateStreaming(source, imports) {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiateStreaming(source, { env });
    _ffi_exports = (await promise).instance.exports;
    return { memory: _ffi_exports.memory };
}

export function rust_mem_leaked() {
    return _ffi_exports._ffi_fn_rust_mem_leaked();
}

export function set_empty_struct(struct_in) {
    return _ffi_exports._ffi_fn_set_empty_struct(_ffi_handle_alloc(struct_in));
}

export function set_single_element_struct(struct_in) {
    return _ffi_exports._ffi_fn_set_single_element_struct(_ffi_handle_alloc(struct_in));
}

export function set_multiply_pairs(struct_in) {
    return _ffi_exports._ffi_fn_set_multiply_pairs(_ffi_handle_alloc(struct_in));
}

let _ffi_handles = /* @__PURE__ */ new Map;
let _ffi_next_handle = 0;

function _ffi_handle_alloc(obj) {
    _ffi_handles.set(++_ffi_next_handle, obj);
    return _ffi_next_handle;
}

let _ffi_exports;

const _ffi_imports = {
    _ffi_js_StructIn__empty_struct(self, x, y) {
        return _ffi_handles.get(self).empty_struct(x, {}, y);
    },

    _ffi_js_StructIn__multiply_pairs(self, ab_x, ab_y, cd_x, cd_y) {
        return _ffi_handles.get(self).multiply_pairs({ x: ab_x, y: ab_y }, { x: cd_x, y: cd_y });
    },

    _ffi_js_StructIn__single_element_struct(self, x_0, y_0) {
        return _ffi_handles.get(self).single_element_struct({ 0: x_0 }, { 0: y_0 });
    },

    _ffi_js_drop(handle) {
        _ffi_handles.delete(handle);
    },
};
