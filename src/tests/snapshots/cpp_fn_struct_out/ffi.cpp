// This file was generated by miniffi v0.1.0. Do not edit.

#include "ffi.h"

struct _ffi_ret_2_f32 {
    float _0;
    float _1;
};

extern "C" {

void _ffi_fn_empty_struct();
_ffi_ret_2_f32 _ffi_fn_make_pair(float x, float y);
uintptr_t _ffi_fn_rust_mem_leaked();
int32_t _ffi_fn_single_element_struct(int32_t x);

} // extern "C"

bool rust::PairStruct::operator == (const rust::PairStruct& p) const {
    return x == p.x && y == p.y;
}

bool rust::SingleElementStruct::operator == (const rust::SingleElementStruct& s) const {
    return _0 == s._0;
}

rust::EmptyStruct rust::empty_struct() {
    _ffi_fn_empty_struct();
    return rust::EmptyStruct{};
}

rust::PairStruct rust::make_pair(float x, float y) {
    auto multi_ret = _ffi_fn_make_pair(x, y);
    auto ret_x = multi_ret._0;
    auto ret_y = multi_ret._1;
    return rust::PairStruct{ret_x, ret_y};
}

uintptr_t rust::rust_mem_leaked() {
    return _ffi_fn_rust_mem_leaked();
}

rust::SingleElementStruct rust::single_element_struct(int32_t x) {
    auto ret_0 = _ffi_fn_single_element_struct(x);
    return rust::SingleElementStruct{ret_0};
}
