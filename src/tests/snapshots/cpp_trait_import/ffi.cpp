// This file was generated by miniffi v0.1.0. Do not edit.

#include "ffi.h"

extern "C" {

uintptr_t _ffi_fn_rust_mem_leaked();
int32_t _ffi_fn_set_adder_box(const void* adder_ptr);
int32_t _ffi_fn_set_adder_rc(const void* adder_ptr);

} // extern "C"

extern "C" {

int32_t _ffi_cpp_Box_Adder__add(rust::Adder* _self, int32_t y) {
    return _self->add(y);
}

int32_t _ffi_cpp_Rc_Adder__add(std::shared_ptr<rust::Adder>* _self, int32_t y) {
    return _self->get()->add(y);
}

void _ffi_cpp_drop_Box_Adder(rust::Adder* self) {
    delete self;
}

void _ffi_cpp_drop_Rc_Adder(std::shared_ptr<rust::Adder>* self) {
    delete self;
}

} // extern "C"

uintptr_t rust::rust_mem_leaked() {
    return _ffi_fn_rust_mem_leaked();
}

int32_t rust::set_adder_box(std::unique_ptr<rust::Adder> adder) {
    auto adder_ptr = adder.release();
    return _ffi_fn_set_adder_box(adder_ptr);
}

int32_t rust::set_adder_rc(std::shared_ptr<rust::Adder> adder) {
    auto adder_ptr = new std::shared_ptr<rust::Adder>(adder);
    return _ffi_fn_set_adder_rc(adder_ptr);
}
