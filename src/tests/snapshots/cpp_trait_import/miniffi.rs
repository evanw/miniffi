// This file was generated by miniffi v0.1.0. Do not edit.

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_rust_mem_leaked() -> usize {
    rust_mem_leaked()
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_set_adder_box(adder_ptr: *const u8) -> i32 {
    set_adder_box(Box::new(_ffi_rs_Box_Adder(adder_ptr)))
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_set_adder_rc(adder_ptr: *const u8) -> i32 {
    set_adder_rc(std::rc::Rc::new(_ffi_rs_Rc_Adder(adder_ptr)))
}

#[allow(non_camel_case_types)]
struct _ffi_rs_Box_Adder(*const u8);

impl Drop for _ffi_rs_Box_Adder {
    fn drop(&mut self) {
        unsafe extern "C" { fn _ffi_cpp_drop_Box_Adder(_: *const u8); }
        unsafe { _ffi_cpp_drop_Box_Adder(self.0) };
    }
}

impl Adder for _ffi_rs_Box_Adder {
    fn add(&self, y: i32) -> i32 {
        unsafe extern "C" { fn _ffi_cpp_Box_Adder__add(_: *const u8, y: i32) -> i32; }
        unsafe { _ffi_cpp_Box_Adder__add(self.0, y) }
    }
}

#[allow(non_camel_case_types)]
struct _ffi_rs_Rc_Adder(*const u8);

impl Drop for _ffi_rs_Rc_Adder {
    fn drop(&mut self) {
        unsafe extern "C" { fn _ffi_cpp_drop_Rc_Adder(_: *const u8); }
        unsafe { _ffi_cpp_drop_Rc_Adder(self.0) };
    }
}

impl Adder for _ffi_rs_Rc_Adder {
    fn add(&self, y: i32) -> i32 {
        unsafe extern "C" { fn _ffi_cpp_Rc_Adder__add(_: *const u8, y: i32) -> i32; }
        unsafe { _ffi_cpp_Rc_Adder__add(self.0, y) }
    }
}
