// This file was generated by miniffi v0.1.0. Do not edit.

#include "ffi.h"

extern "C" {

void _ffi_drop_Rc_Exported(const void* ptr);
int32_t _ffi_Rc_Exported__add(const void* _self, int32_t x, int32_t y);
uint32_t _ffi_fn_get_counter();
uintptr_t _ffi_fn_rust_mem_leaked();
int32_t _ffi_fn_set_imported(const void* imported_ptr);

} // extern "C"

namespace {

struct _ffi_Rc_Exported final : rust::Exported {
    _ffi_Rc_Exported(const void* ptr) : _self(ptr) {}
    virtual ~_ffi_Rc_Exported() { _ffi_drop_Rc_Exported(_self); }
    virtual int32_t add(int32_t x, int32_t y);
    const void* _self;
};

} // namespace

extern "C" {

int32_t _ffi_cpp_Rc_Imported__run(std::shared_ptr<rust::Imported>* _self, const void* exported_ptr) {
    auto exported = std::make_shared<_ffi_Rc_Exported>(exported_ptr);
    return _self->get()->run(std::move(exported));
}

void _ffi_cpp_drop_Rc_Imported(std::shared_ptr<rust::Imported>* self) {
    delete self;
}

} // extern "C"

int32_t _ffi_Rc_Exported::add(int32_t x, int32_t y) {
    return _ffi_Rc_Exported__add(_self, x, y);
}

uint32_t rust::get_counter() {
    return _ffi_fn_get_counter();
}

uintptr_t rust::rust_mem_leaked() {
    return _ffi_fn_rust_mem_leaked();
}

int32_t rust::set_imported(std::shared_ptr<rust::Imported> imported) {
    auto imported_ptr = new std::shared_ptr<rust::Imported>(imported);
    return _ffi_fn_set_imported(imported_ptr);
}
