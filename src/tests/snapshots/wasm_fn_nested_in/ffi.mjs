// This file was generated by miniffi v0.1.0. Do not edit.

export async function instantiate(bytes, imports) {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiate(bytes, { env });
    _ffi_exports = (await promise).instance.exports;
    return { memory: _ffi_exports.memory };
}

export async function instantiateStreaming(source, imports) {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiateStreaming(source, { env });
    _ffi_exports = (await promise).instance.exports;
    return { memory: _ffi_exports.memory };
}

export function rust_mem_leaked() {
    return _ffi_exports._ffi_fn_rust_mem_leaked();
}

export function test(x) {
    let x_1_ptr_ptr = _ffi_handle_alloc(x[1].ptr);
    let buf = _ffi_new_WriteBuf();
    let x_2_len = x[2].length;
    _ffi_vec_i32_Foo_to_rust(x[2], buf);
    return _ffi_exports._ffi_fn_test(x[0], x_1_ptr_ptr, _ffi_buf_to_rust(buf), x_2_len);
}

let _ffi_new_WriteBuf = () => ({ u8: new Uint8Array(16), dv: null, off: 0 });
let _ffi_u8;
let _ffi_handles = /* @__PURE__ */ new Map;
let _ffi_next_handle = 0;

function _ffi_update_u8() {
    let buffer = _ffi_exports.memory.buffer;
    if (!_ffi_u8 || _ffi_u8.buffer !== buffer) _ffi_u8 = new Uint8Array(buffer);
    return _ffi_u8;
}

function _ffi_buf_to_rust({ u8, off }) {
    let ptr = _ffi_exports._ffi_alloc(off);
    _ffi_update_u8().set(u8.length > off ? u8.subarray(0, off) : u8, ptr);
    return ptr;
}

function _ffi_handle_alloc(obj) {
    _ffi_handles.set(++_ffi_next_handle, obj);
    return _ffi_next_handle;
}

function _ffi_vec_i32_Foo_to_rust(items, buf) {
    for (const item of items) {
        _ffi_write_i32(buf, item[0]);
        _ffi_write_i32(buf, _ffi_handle_alloc(item[1].ptr));
    }
}

function _ffi_grow(buf, n) {
    let off = buf.off;
    let u8 = buf.u8;
    if (off + n > u8.length) {
        (buf.u8 = new Uint8Array((off + n) << 1)).set(u8);
        buf.dv = null;
    }
    buf.off += n;
    if (!buf.dv) buf.dv = new DataView(buf.u8.buffer);
    return off;
}

function _ffi_write_i32(buf, val) {
    let ptr = _ffi_grow(buf, 4);
    buf.dv.setInt32(ptr, val, true);
}

let _ffi_exports;

const _ffi_imports = {
    _ffi_js_Bar__get(self) {
        return _ffi_handles.get(self).get();
    },

    _ffi_js_drop(handle) {
        _ffi_handles.delete(handle);
    },
};
