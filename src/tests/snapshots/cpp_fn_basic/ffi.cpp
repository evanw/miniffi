// This file was generated by miniffi v0.1.0. Do not edit.

#include "ffi.h"

extern "C" {

bool _ffi_fn_add_bool(bool x, bool y);
float _ffi_fn_add_f32(float x, float y);
double _ffi_fn_add_f64(double x, double y);
int16_t _ffi_fn_add_i16(int16_t x, int16_t y);
int32_t _ffi_fn_add_i32(int32_t x, int32_t y);
int64_t _ffi_fn_add_i64(int64_t x, int64_t y);
int8_t _ffi_fn_add_i8(int8_t x, int8_t y);
intptr_t _ffi_fn_add_isize(intptr_t x, intptr_t y);
uint16_t _ffi_fn_add_u16(uint16_t x, uint16_t y);
uint32_t _ffi_fn_add_u32(uint32_t x, uint32_t y);
uint64_t _ffi_fn_add_u64(uint64_t x, uint64_t y);
uint8_t _ffi_fn_add_u8(uint8_t x, uint8_t y);
uintptr_t _ffi_fn_add_usize(uintptr_t x, uintptr_t y);
uintptr_t _ffi_fn_rust_mem_leaked();

} // extern "C"

bool rust::add_bool(bool x, bool y) {
    return _ffi_fn_add_bool(x, y);
}

float rust::add_f32(float x, float y) {
    return _ffi_fn_add_f32(x, y);
}

double rust::add_f64(double x, double y) {
    return _ffi_fn_add_f64(x, y);
}

int16_t rust::add_i16(int16_t x, int16_t y) {
    return _ffi_fn_add_i16(x, y);
}

int32_t rust::add_i32(int32_t x, int32_t y) {
    return _ffi_fn_add_i32(x, y);
}

int64_t rust::add_i64(int64_t x, int64_t y) {
    return _ffi_fn_add_i64(x, y);
}

int8_t rust::add_i8(int8_t x, int8_t y) {
    return _ffi_fn_add_i8(x, y);
}

intptr_t rust::add_isize(intptr_t x, intptr_t y) {
    return _ffi_fn_add_isize(x, y);
}

uint16_t rust::add_u16(uint16_t x, uint16_t y) {
    return _ffi_fn_add_u16(x, y);
}

uint32_t rust::add_u32(uint32_t x, uint32_t y) {
    return _ffi_fn_add_u32(x, y);
}

uint64_t rust::add_u64(uint64_t x, uint64_t y) {
    return _ffi_fn_add_u64(x, y);
}

uint8_t rust::add_u8(uint8_t x, uint8_t y) {
    return _ffi_fn_add_u8(x, y);
}

uintptr_t rust::add_usize(uintptr_t x, uintptr_t y) {
    return _ffi_fn_add_usize(x, y);
}

uintptr_t rust::rust_mem_leaked() {
    return _ffi_fn_rust_mem_leaked();
}
