// This file was generated by miniffi v0.1.0. Do not edit.

#include "ffi.h"

struct _ffi_ret_i32_ptr {
    int32_t _0;
    const void* _1;
};

extern "C" {

void _ffi_drop_Rc_Bar(const void* ptr);
int32_t _ffi_Rc_Bar__get(const void* _self);
uintptr_t _ffi_fn_rust_mem_leaked();
_ffi_ret_i32_ptr _ffi_fn_test(int32_t x);

} // extern "C"

namespace {

struct _ffi_Rc_Bar final : rust::Bar {
    _ffi_Rc_Bar(const void* ptr) : _self(ptr) {}
    virtual ~_ffi_Rc_Bar() { _ffi_drop_Rc_Bar(_self); }
    virtual int32_t get();
    const void* _self;
};

} // namespace

int32_t _ffi_Rc_Bar::get() {
    return _ffi_Rc_Bar__get(_self);
}

uintptr_t rust::rust_mem_leaked() {
    return _ffi_fn_rust_mem_leaked();
}

std::tuple<int32_t, rust::Foo> rust::test(int32_t x) {
    auto multi_ret = _ffi_fn_test(x);
    auto ret_0 = multi_ret._0;
    auto ret_1_ptr_ptr = multi_ret._1;
    auto ret_1_ptr = std::make_shared<_ffi_Rc_Bar>(ret_1_ptr_ptr);
    auto ret_1 = rust::Foo{std::move(ret_1_ptr)};
    return std::make_tuple(ret_0, std::move(ret_1));
}
