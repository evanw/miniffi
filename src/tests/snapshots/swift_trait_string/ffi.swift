// This file was generated by miniffi v0.1.0. Do not edit.

protocol Test: AnyObject {
    func get_string() -> String
    func set_string(_ x: String)
    func set_str(_ x: String)
}

func rust_mem_leaked() -> UInt {
    return _ffi_fn_rust_mem_leaked()
}

func get_test() -> Test {
    let ret_ptr = _ffi_fn_get_test()
    return _ffi_Rc_Test(ret_ptr)
}

func set_test(_ test: Test) -> String {
    let multi_ret = _ffi_fn_set_test(UnsafeRawPointer(Unmanaged.passRetained(test as AnyObject).toOpaque()))
    let ret_ptr = multi_ret._0
    let ret_len = multi_ret._1
    let ret_cap = multi_ret._2
    return _ffi_string_from_rust(ret_ptr, Int(ret_len), ret_cap)
}

private class _ffi_Rc_Test : Test {
    private var _ffi: UnsafeRawPointer?

    init(_ ptr: UnsafeRawPointer?) {
        _ffi = ptr
    }

    deinit {
        _ffi_rs_drop_Rc_Test(_ffi)
    }

    func get_string() -> String {
        let multi_ret = _ffi_Rc_Test__get_string(_ffi)
        let ret_ptr = multi_ret._0
        let ret_len = multi_ret._1
        let ret_cap = multi_ret._2
        return _ffi_string_from_rust(ret_ptr, Int(ret_len), ret_cap)
    }

    func set_string(_ x: String) {
        let (x_ptr, x_len) = _ffi_string_to_rust(x);
        _ffi_Rc_Test__set_string(_ffi, x_ptr, x_len)
    }

    func set_str(_ x: String) {
        let (x_ptr, x_len) = _ffi_string_to_rust(x);
        _ffi_Rc_Test__set_str(_ffi, x_ptr, x_len)
    }
}

private func _ffi_string_from_rust(_ ptr: UnsafeRawPointer?, _ len: Int, _ cap: UInt) -> String {
    let buf = UnsafeBufferPointer(start: ptr!.assumingMemoryBound(to: UInt8.self), count: len)
    let str = String(decoding: buf, as: UTF8.self)
    _ffi_dealloc(ptr, cap)
    return str
}

private func _ffi_string_to_rust(_ str: String) -> (UnsafeRawPointer?, UInt) {
    var str = str
    return str.withUTF8 { str in
        let buf = UnsafeMutableRawBufferPointer(start: _ffi_alloc(str.count), count: str.count)
        buf.copyMemory(from: UnsafeRawBufferPointer(start: str.baseAddress, count: str.count))
        return (UnsafeRawPointer(buf.baseAddress), UInt(buf.count))
    }
}

@_cdecl("_ffi_swift_Test__get_string")
func _ffi_swift_Test__get_string(_self: UnsafeRawPointer?) -> _ffi_ret_ptr_usize {
    let _self = Unmanaged<AnyObject>.fromOpaque(_self!).takeUnretainedValue() as! Test
    let (ret_ptr, ret_len) = _ffi_string_to_rust(_self.get_string());
    return _ffi_ret_ptr_usize(_0: ret_ptr, _1: ret_len)
}

@_cdecl("_ffi_swift_Test__set_str")
func _ffi_swift_Test__set_str(_self: UnsafeRawPointer?, x_ptr: UnsafeRawPointer?, x_len: UInt, x_cap: UInt) {
    let _self = Unmanaged<AnyObject>.fromOpaque(_self!).takeUnretainedValue() as! Test
    _self.set_str(_ffi_string_from_rust(x_ptr, Int(x_len), x_cap))
}

@_cdecl("_ffi_swift_Test__set_string")
func _ffi_swift_Test__set_string(_self: UnsafeRawPointer?, x_ptr: UnsafeRawPointer?, x_len: UInt, x_cap: UInt) {
    let _self = Unmanaged<AnyObject>.fromOpaque(_self!).takeUnretainedValue() as! Test
    _self.set_string(_ffi_string_from_rust(x_ptr, Int(x_len), x_cap))
}

@_cdecl("_ffi_swift_drop")
func _ffi_swift_drop(ptr: UnsafeRawPointer?) {
    _ = Unmanaged<AnyObject>.fromOpaque(ptr!).takeRetainedValue()
}
