// This file was generated by miniffi v0.1.0. Do not edit.

export async function instantiate(bytes: BufferSource, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }> {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiate(bytes, { env });
    _ffi_exports = (await promise).instance.exports as any;
    return { memory: _ffi_exports.memory };
}

export async function instantiateStreaming(source: Response | PromiseLike<Response>, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }> {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiateStreaming(source, { env });
    _ffi_exports = (await promise).instance.exports as any;
    return { memory: _ffi_exports.memory };
}

export type NestedBox =
    | { readonly $: "Foo" }
    | { readonly $: "Bar", 0: NestedBox }

export type NestedVec =
    | { readonly $: "Foo" }
    | { readonly $: "Bar", 0: NestedVec[] }

export type NestedOption =
    | { readonly $: "Foo" }
    | { readonly $: "Bar", 0: NestedOption | null }

export type NestedTuple =
    | { readonly $: "Foo" }
    | { readonly $: "Bar", 0: [number, NestedTuple] }

export type NestedStruct =
    | { readonly $: "Foo" }
    | { readonly $: "Bar", 0: [number, InnerStruct] }

export type NestedEnum =
    | { readonly $: "Foo" }
    | { readonly $: "Bar", 0: [number, InnerEnum] }

export type InnerEnum =
    | { readonly $: "Foo", 0: NestedEnum }

export interface InnerStruct {
    x: NestedStruct,
}

export function rust_mem_leaked(): number {
    return _ffi_exports._ffi_fn_rust_mem_leaked();
}

let _ffi_exports: {
    memory: WebAssembly.Memory,
    _ffi_fn_rust_mem_leaked: () => number,
};

const _ffi_imports = {};
