// This file was generated by miniffi v0.1.0. Do not edit.

export async function instantiate(bytes, imports) {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiate(bytes, { env });
    _ffi_exports = (await promise).instance.exports;
    return { memory: _ffi_exports.memory };
}

export async function instantiateStreaming(source, imports) {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiateStreaming(source, { env });
    _ffi_exports = (await promise).instance.exports;
    return { memory: _ffi_exports.memory };
}

export function rust_mem_leaked() {
    return _ffi_exports._ffi_fn_rust_mem_leaked();
}

export function add_bool(x, y) {
    let ret = _ffi_exports._ffi_fn_add_bool(x, y);
    return !!ret;
}

export function add_u8(x, y) {
    return _ffi_exports._ffi_fn_add_u8(x, y);
}

export function add_u16(x, y) {
    return _ffi_exports._ffi_fn_add_u16(x, y);
}

export function add_u32(x, y) {
    return _ffi_exports._ffi_fn_add_u32(x, y);
}

export function add_usize(x, y) {
    return _ffi_exports._ffi_fn_add_usize(x, y);
}

export function add_u64(x, y) {
    return _ffi_exports._ffi_fn_add_u64(x, y);
}

export function add_i8(x, y) {
    return _ffi_exports._ffi_fn_add_i8(x, y);
}

export function add_i16(x, y) {
    return _ffi_exports._ffi_fn_add_i16(x, y);
}

export function add_i32(x, y) {
    return _ffi_exports._ffi_fn_add_i32(x, y);
}

export function add_isize(x, y) {
    return _ffi_exports._ffi_fn_add_isize(x, y);
}

export function add_i64(x, y) {
    return _ffi_exports._ffi_fn_add_i64(x, y);
}

export function add_f32(x, y) {
    return _ffi_exports._ffi_fn_add_f32(x, y);
}

export function add_f64(x, y) {
    return _ffi_exports._ffi_fn_add_f64(x, y);
}

let _ffi_exports;

const _ffi_imports = {};
