// This file was generated by miniffi v0.1.0. Do not edit.

export async function instantiate(bytes: BufferSource, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }> {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiate(bytes, { env });
    _ffi_exports = (await promise).instance.exports as any;
    return { memory: _ffi_exports.memory };
}

export async function instantiateStreaming(source: Response | PromiseLike<Response>, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }> {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiateStreaming(source, { env });
    _ffi_exports = (await promise).instance.exports as any;
    return { memory: _ffi_exports.memory };
}

export function rust_mem_leaked(): number {
    return _ffi_exports._ffi_fn_rust_mem_leaked();
}

export function add_bool(x: boolean, y: boolean): boolean {
    let ret = _ffi_exports._ffi_fn_add_bool(x, y);
    return !!ret;
}

export function add_u8(x: number, y: number): number {
    return _ffi_exports._ffi_fn_add_u8(x, y);
}

export function add_u16(x: number, y: number): number {
    return _ffi_exports._ffi_fn_add_u16(x, y);
}

export function add_u32(x: number, y: number): number {
    return _ffi_exports._ffi_fn_add_u32(x, y);
}

export function add_usize(x: number, y: number): number {
    return _ffi_exports._ffi_fn_add_usize(x, y);
}

export function add_u64(x: bigint, y: bigint): bigint {
    return _ffi_exports._ffi_fn_add_u64(x, y);
}

export function add_i8(x: number, y: number): number {
    return _ffi_exports._ffi_fn_add_i8(x, y);
}

export function add_i16(x: number, y: number): number {
    return _ffi_exports._ffi_fn_add_i16(x, y);
}

export function add_i32(x: number, y: number): number {
    return _ffi_exports._ffi_fn_add_i32(x, y);
}

export function add_isize(x: number, y: number): number {
    return _ffi_exports._ffi_fn_add_isize(x, y);
}

export function add_i64(x: bigint, y: bigint): bigint {
    return _ffi_exports._ffi_fn_add_i64(x, y);
}

export function add_f32(x: number, y: number): number {
    return _ffi_exports._ffi_fn_add_f32(x, y);
}

export function add_f64(x: number, y: number): number {
    return _ffi_exports._ffi_fn_add_f64(x, y);
}

let _ffi_exports: {
    memory: WebAssembly.Memory,
    _ffi_fn_add_bool: (x: boolean, y: boolean) => boolean,
    _ffi_fn_add_f32: (x: number, y: number) => number,
    _ffi_fn_add_f64: (x: number, y: number) => number,
    _ffi_fn_add_i16: (x: number, y: number) => number,
    _ffi_fn_add_i32: (x: number, y: number) => number,
    _ffi_fn_add_i64: (x: bigint, y: bigint) => bigint,
    _ffi_fn_add_i8: (x: number, y: number) => number,
    _ffi_fn_add_isize: (x: number, y: number) => number,
    _ffi_fn_add_u16: (x: number, y: number) => number,
    _ffi_fn_add_u32: (x: number, y: number) => number,
    _ffi_fn_add_u64: (x: bigint, y: bigint) => bigint,
    _ffi_fn_add_u8: (x: number, y: number) => number,
    _ffi_fn_add_usize: (x: number, y: number) => number,
    _ffi_fn_rust_mem_leaked: () => number,
};

const _ffi_imports = {};
