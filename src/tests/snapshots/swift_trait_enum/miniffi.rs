// This file was generated by miniffi v0.1.0. Do not edit.

#[unsafe(no_mangle)]
extern "C" fn _ffi_Box_Foo__get_enum(_self: *const u8) -> i32 {
    let _self = unsafe { &*(_self as *const Box<dyn Foo>) };
    _self.get_enum() as i32
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_Box_Foo__set_enum(_self: *const u8, bar_raw: i32) {
    let _self = unsafe { &*(_self as *const Box<dyn Foo>) };
    _self.set_enum(_ffi_enum_Bar_from_swift(bar_raw));
}

#[allow(non_snake_case)]
fn _ffi_enum_Bar_from_swift(val: i32) -> Bar {
    match val {
        0 => Bar::A,
        1 => Bar::B,
        2 => Bar::C,
        _ => panic!(),
    }
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_get_foo() -> *const u8 {
    Box::into_raw(Box::new(get_foo())) as *const u8
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_rust_mem_leaked() -> usize {
    rust_mem_leaked()
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_rs_drop_Box_Foo(ptr: *const u8) {
    drop(unsafe { Box::from_raw(ptr as *mut Box<dyn Foo>) });
}
