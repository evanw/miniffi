// This file was generated by miniffi v0.1.0. Do not edit.

export async function instantiate(bytes, imports) {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiate(bytes, { env });
    _ffi_exports = (await promise).instance.exports;
    return { memory: _ffi_exports.memory };
}

export async function instantiateStreaming(source, imports) {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiateStreaming(source, { env });
    _ffi_exports = (await promise).instance.exports;
    return { memory: _ffi_exports.memory };
}

export function rust_mem_leaked() {
    return _ffi_exports._ffi_fn_rust_mem_leaked();
}

export function set_adder_rc(adder) {
    return _ffi_exports._ffi_fn_set_adder_rc(_ffi_handle_alloc(adder));
}

export function set_adder_box(adder) {
    return _ffi_exports._ffi_fn_set_adder_box(_ffi_handle_alloc(adder));
}

let _ffi_handles = /* @__PURE__ */ new Map;
let _ffi_next_handle = 0;

function _ffi_handle_alloc(obj) {
    _ffi_handles.set(++_ffi_next_handle, obj);
    return _ffi_next_handle;
}

let _ffi_exports;

const _ffi_imports = {
    _ffi_js_Adder__add(self, y) {
        return _ffi_handles.get(self).add(y);
    },

    _ffi_js_drop(handle) {
        _ffi_handles.delete(handle);
    },
};
