// This file was generated by miniffi v0.1.0. Do not edit.

export async function instantiate(bytes: BufferSource, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }> {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiate(bytes, { env });
    _ffi_exports = (await promise).instance.exports as any;
    return { memory: _ffi_exports.memory };
}

export async function instantiateStreaming(source: Response | PromiseLike<Response>, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }> {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiateStreaming(source, { env });
    _ffi_exports = (await promise).instance.exports as any;
    return { memory: _ffi_exports.memory };
}

export interface TupleIn {
    empty_tuple(x: number, foo: undefined, y: number): number;
    single_element_tuple(x: [number], y: [number]): number;
    multiply_pairs(ab: [number, number], cd: [number, number]): number;
}

export function rust_mem_leaked(): number {
    return _ffi_exports._ffi_fn_rust_mem_leaked();
}

export function set_empty_tuple(tuple_in: TupleIn): number {
    return _ffi_exports._ffi_fn_set_empty_tuple(_ffi_handle_alloc(tuple_in));
}

export function set_single_element_tuple(tuple_in: TupleIn): number {
    return _ffi_exports._ffi_fn_set_single_element_tuple(_ffi_handle_alloc(tuple_in));
}

export function set_multiply_pairs(tuple_in: TupleIn): number {
    return _ffi_exports._ffi_fn_set_multiply_pairs(_ffi_handle_alloc(tuple_in));
}

let _ffi_handles: Map<number, any> = /* @__PURE__ */ new Map;
let _ffi_next_handle = 0;

function _ffi_handle_alloc(obj: any): number {
    _ffi_handles.set(++_ffi_next_handle, obj);
    return _ffi_next_handle;
}

let _ffi_exports: {
    memory: WebAssembly.Memory,
    _ffi_fn_rust_mem_leaked: () => number,
    _ffi_fn_set_empty_tuple: (tuple_in_ptr: number) => number,
    _ffi_fn_set_multiply_pairs: (tuple_in_ptr: number) => number,
    _ffi_fn_set_single_element_tuple: (tuple_in_ptr: number) => number,
};

const _ffi_imports = {
    _ffi_js_TupleIn__empty_tuple(self: number, x: number, y: number): number {
        return _ffi_handles.get(self).empty_tuple(x, undefined, y);
    },

    _ffi_js_TupleIn__multiply_pairs(self: number, ab_0: number, ab_1: number, cd_0: number, cd_1: number): number {
        return _ffi_handles.get(self).multiply_pairs([ab_0, ab_1], [cd_0, cd_1]);
    },

    _ffi_js_TupleIn__single_element_tuple(self: number, x_0: number, y_0: number): number {
        return _ffi_handles.get(self).single_element_tuple([x_0], [y_0]);
    },

    _ffi_js_drop(handle: number): void {
        _ffi_handles.delete(handle);
    },
};
