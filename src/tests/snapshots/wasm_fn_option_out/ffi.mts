// This file was generated by miniffi v0.1.0. Do not edit.

export async function instantiate(bytes: BufferSource, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }> {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiate(bytes, { env });
    _ffi_exports = (await promise).instance.exports as any;
    return { memory: _ffi_exports.memory };
}

export async function instantiateStreaming(source: Response | PromiseLike<Response>, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }> {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiateStreaming(source, { env });
    _ffi_exports = (await promise).instance.exports as any;
    return { memory: _ffi_exports.memory };
}

export function rust_mem_leaked(): number {
    return _ffi_exports._ffi_fn_rust_mem_leaked();
}

export function opt_int(x: boolean, y: number): number | null {
    let multi_ret = _ffi_exports._ffi_fn_opt_int(x, y);
    let buf_ptr = _ffi_update_dv().getInt32(multi_ret, true);
    let buf_cap = _ffi_dv.getUint32(multi_ret + 4, true);
    let has_ret = _ffi_dv.getUint8(multi_ret + 8);
    let buf = _ffi_new_ReadBuf(buf_ptr);
    let ret: number | null = has_ret ? _ffi_read_i32(buf) : null;
    _ffi_exports._ffi_dealloc(buf_ptr, buf_cap);
    return ret;
}

export function opt_opt_int(x: boolean, y: boolean, z: number): number | null {
    let multi_ret = _ffi_exports._ffi_fn_opt_opt_int(x, y, z);
    let buf_ptr = _ffi_update_dv().getInt32(multi_ret, true);
    let buf_cap = _ffi_dv.getUint32(multi_ret + 4, true);
    let has_ret = _ffi_dv.getUint8(multi_ret + 8);
    let buf = _ffi_new_ReadBuf(buf_ptr);
    let ret: number | null = has_ret ? _ffi_read_u8(buf) ? _ffi_read_i32(buf) : null : null;
    _ffi_exports._ffi_dealloc(buf_ptr, buf_cap);
    return ret;
}

export function vec_opt_int(n: number): (number | null)[] {
    let multi_ret = _ffi_exports._ffi_fn_vec_opt_int(n);
    let buf_ptr = _ffi_update_dv().getInt32(multi_ret, true);
    let buf_cap = _ffi_dv.getUint32(multi_ret + 4, true);
    let ret_len = _ffi_dv.getUint32(multi_ret + 8, true);
    let buf = _ffi_new_ReadBuf(buf_ptr);
    let ret = _ffi_vec_option_i32_from_rust(ret_len, buf);
    _ffi_exports._ffi_dealloc(buf_ptr, buf_cap);
    return ret;
}

export function opt_vec_opt_string(n: number): (string | null)[] | null {
    let multi_ret = _ffi_exports._ffi_fn_opt_vec_opt_string(n);
    let buf_ptr = _ffi_update_dv().getInt32(multi_ret, true);
    let buf_cap = _ffi_dv.getUint32(multi_ret + 4, true);
    let has_ret = _ffi_dv.getUint8(multi_ret + 8);
    let buf = _ffi_new_ReadBuf(buf_ptr);
    let ret: (string | null)[] | null = has_ret ? _ffi_vec_option_string_from_rust(_ffi_read_u32(buf), buf) : null;
    _ffi_exports._ffi_dealloc(buf_ptr, buf_cap);
    return ret;
}

let _ffi_dv: DataView;
let _ffi_new_ReadBuf = (off: number): _ffi_ReadBuf => ({ dv: _ffi_update_dv(), off });
let _ffi_decoder = /* @__PURE__ */ new TextDecoder;

interface _ffi_ReadBuf {
    dv: DataView,
    off: number,
}

function _ffi_update_dv(): DataView {
    let buffer = _ffi_exports.memory.buffer;
    if (!_ffi_dv || _ffi_dv.buffer !== buffer) _ffi_dv = new DataView(buffer);
    return _ffi_dv;
}

function _ffi_read_i32(buf: _ffi_ReadBuf): number {
    let val = buf.dv.getInt32(buf.off, true);
    buf.off += 4;
    return val;
}

function _ffi_read_u32(buf: _ffi_ReadBuf): number {
    let val = buf.dv.getUint32(buf.off, true);
    buf.off += 4;
    return val;
}

function _ffi_read_u8(buf: _ffi_ReadBuf): number {
    return buf.dv.getUint8(buf.off++);
}

function _ffi_string_from_rust(ptr: number, len: number, cap: number): string {
    let str = _ffi_decoder.decode(new Uint8Array(_ffi_exports.memory.buffer, ptr, len));
    _ffi_exports._ffi_dealloc(ptr, cap);
    return str;
}

function _ffi_vec_option_i32_from_rust(len: number, buf: _ffi_ReadBuf): (number | null)[] {
    let items: (number | null)[] = [];
    while (items.length < len) {
        items.push(_ffi_read_u8(buf) ? _ffi_read_i32(buf) : null);
    }
    return items;
}

function _ffi_vec_option_string_from_rust(len: number, buf: _ffi_ReadBuf): (string | null)[] {
    let items: (string | null)[] = [];
    while (items.length < len) {
        items.push(_ffi_read_u8(buf) ? _ffi_string_from_rust(_ffi_read_i32(buf), _ffi_read_u32(buf), _ffi_read_u32(buf)) : null);
    }
    return items;
}

let _ffi_exports: {
    memory: WebAssembly.Memory,
    _ffi_dealloc: (ptr: number, capacity: number) => void,
    _ffi_fn_opt_int: (x: boolean, y: number) => number,
    _ffi_fn_opt_opt_int: (x: boolean, y: boolean, z: number) => number,
    _ffi_fn_opt_vec_opt_string: (n: number) => number,
    _ffi_fn_rust_mem_leaked: () => number,
    _ffi_fn_vec_opt_int: (n: number) => number,
};

const _ffi_imports = {};
