// This file was generated by miniffi v0.1.0. Do not edit.

#include "ffi.h"

extern "C" {

void _ffi_drop_Box_Foo(const void* ptr);
int32_t _ffi_Box_Foo__get_enum(const void* _self);
void _ffi_Box_Foo__set_enum(const void* _self, int32_t bar_raw);
const void* _ffi_fn_get_foo();
uintptr_t _ffi_fn_rust_mem_leaked();

} // extern "C"

namespace {

struct _ffi_Box_Foo final : rust::Foo {
    _ffi_Box_Foo(const void* ptr) : _self(ptr) {}
    virtual ~_ffi_Box_Foo() { _ffi_drop_Box_Foo(_self); }
    virtual void set_enum(rust::Bar bar);
    virtual rust::Bar get_enum();
    const void* _self;
};

} // namespace

rust::Bar _ffi_Box_Foo::get_enum() {
    auto ret_raw = _ffi_Box_Foo__get_enum(_self);
    return rust::Bar(ret_raw);
}

void _ffi_Box_Foo::set_enum(rust::Bar bar) {
    _ffi_Box_Foo__set_enum(_self, int32_t(bar));
}

std::unique_ptr<rust::Foo> rust::get_foo() {
    auto ret_ptr = _ffi_fn_get_foo();
    return std::unique_ptr<rust::Foo>(new _ffi_Box_Foo(ret_ptr));
}

uintptr_t rust::rust_mem_leaked() {
    return _ffi_fn_rust_mem_leaked();
}
