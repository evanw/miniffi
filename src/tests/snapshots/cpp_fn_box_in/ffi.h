// This file was generated by miniffi v0.1.0. Do not edit.

#pragma once

#include <memory>
#include <stdint.h>
#include <optional>

namespace rust {

struct Tree;

struct Tree {
    int32_t value = 0;
    std::optional<std::unique_ptr<Tree>> left;
    std::optional<std::unique_ptr<Tree>> right;
    bool operator == (const Tree&) const;
    bool operator != (const Tree& t) const { return !(*this == t); }
};

uintptr_t rust_mem_leaked();

int32_t sum_tree(Tree tree);

int32_t check_nested(std::unique_ptr<std::unique_ptr<std::unique_ptr<int32_t>>> x);

} // namespace rust
