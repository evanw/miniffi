// This file was generated by miniffi v0.1.0. Do not edit.

#[unsafe(no_mangle)]
extern "C" fn _ffi_Box_Adder__add(_self: *const u8, x: i32) -> i32 {
    let _self = unsafe { &*(_self as *const Box<dyn Adder>) };
    _self.add(x)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_Rc_Adder__add(_self: *const u8, x: i32) -> i32 {
    let _self = unsafe { &*(_self as *const std::rc::Rc<dyn Adder>) };
    _self.add(x)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_get_adder_box(x: i32) -> *const u8 {
    Box::into_raw(Box::new(get_adder_box(x))) as *const u8
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_get_adder_rc(x: i32) -> *const u8 {
    Box::into_raw(Box::new(get_adder_rc(x))) as *const u8
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_get_counter() -> u32 {
    get_counter()
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_rust_mem_leaked() -> usize {
    rust_mem_leaked()
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_rs_drop_Box_Adder(ptr: *const u8) {
    drop(unsafe { Box::from_raw(ptr as *mut Box<dyn Adder>) });
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_rs_drop_Rc_Adder(ptr: *const u8) {
    drop(unsafe { Box::from_raw(ptr as *mut std::rc::Rc<dyn Adder>) });
}
