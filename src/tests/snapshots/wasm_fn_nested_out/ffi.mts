// This file was generated by miniffi v0.1.0. Do not edit.

export async function instantiate(bytes: BufferSource, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }> {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiate(bytes, { env });
    _ffi_exports = (await promise).instance.exports as any;
    return { memory: _ffi_exports.memory };
}

export async function instantiateStreaming(source: Response | PromiseLike<Response>, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }> {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiateStreaming(source, { env });
    _ffi_exports = (await promise).instance.exports as any;
    return { memory: _ffi_exports.memory };
}

export interface Bar {
    get(): number;
}

export interface Foo {
    ptr: Bar,
}

export function rust_mem_leaked(): number {
    return _ffi_exports._ffi_fn_rust_mem_leaked();
}

export function test(x: number): [number, Foo] {
    let multi_ret = _ffi_exports._ffi_fn_test(x);
    let ret_0 = _ffi_update_dv().getInt32(multi_ret, true);
    let ret_1_ptr_ptr = _ffi_dv.getInt32(multi_ret + 4, true);
    return [ret_0, { ptr: new _ffi_Rc_Bar(ret_1_ptr_ptr) }];
}

let _ffi_reg_Rc_Bar = new FinalizationRegistry((ptr: number) => _ffi_exports._ffi_rs_drop_Rc_Bar(ptr));
let _ffi_dv: DataView;

const _ffi_Rc_Bar = class Bar implements Bar {
    declare readonly _: number;

    constructor(_: number) {
        Object.defineProperty(this, "_", { value: _ });
        _ffi_reg_Rc_Bar.register(this, _);
    }

    get(): number {
        return _ffi_exports._ffi_Rc_Bar__get(this._);
    }
};

function _ffi_update_dv(): DataView {
    let buffer = _ffi_exports.memory.buffer;
    if (!_ffi_dv || _ffi_dv.buffer !== buffer) _ffi_dv = new DataView(buffer);
    return _ffi_dv;
}

let _ffi_exports: {
    memory: WebAssembly.Memory,
    _ffi_Rc_Bar__get: (_self: number) => number,
    _ffi_fn_rust_mem_leaked: () => number,
    _ffi_fn_test: (x: number) => number,
    _ffi_rs_drop_Rc_Bar: (ptr: number) => void,
};

const _ffi_imports = {};
