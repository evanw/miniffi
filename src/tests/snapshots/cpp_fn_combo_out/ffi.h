// This file was generated by miniffi v0.1.0. Do not edit.

#pragma once

#include <stdint.h>
#include <vector>
#include <tuple>

namespace rust {

struct Foo;
struct Bar;

struct Bar {
    int32_t x = 0;
    std::vector<Foo> y;
    bool operator == (const Bar&) const;
    bool operator != (const Bar& b) const { return !(*this == b); }
};

struct Foo {
    std::tuple<Bar, std::vector<Bar>> x;
    std::vector<std::tuple<std::tuple<>, std::tuple<int32_t>, std::tuple<float, bool>>> y;
    bool operator == (const Foo&) const;
    bool operator != (const Foo& f) const { return !(*this == f); }
};

uintptr_t rust_mem_leaked();

Foo check_combo1();

Foo check_combo2();

} // namespace rust
