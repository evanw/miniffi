// This file was generated by miniffi v0.1.0. Do not edit.

export async function instantiate(bytes: BufferSource, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }> {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiate(bytes, { env });
    _ffi_exports = (await promise).instance.exports as any;
    return { memory: _ffi_exports.memory };
}

export async function instantiateStreaming(source: Response | PromiseLike<Response>, imports?: WebAssembly.ModuleImports): Promise<{ memory: WebAssembly.Memory }> {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiateStreaming(source, { env });
    _ffi_exports = (await promise).instance.exports as any;
    return { memory: _ffi_exports.memory };
}

export function rust_mem_leaked(): number {
    return _ffi_exports._ffi_fn_rust_mem_leaked();
}

export function empty_tuple(x: number, foo: undefined, y: number): number {
    return _ffi_exports._ffi_fn_empty_tuple(x, y);
}

export function single_element_tuple(x: [number], y: [number]): number {
    return _ffi_exports._ffi_fn_single_element_tuple(x[0], y[0]);
}

export function multiply_pairs(ab: [number, number], cd: [number, number]): number {
    return _ffi_exports._ffi_fn_multiply_pairs(ab[0], ab[1], cd[0], cd[1]);
}

export function nesting(x: [number, undefined, [number, [number]]]): number {
    return _ffi_exports._ffi_fn_nesting(x[0], x[2][0], x[2][1][0]);
}

let _ffi_exports: {
    memory: WebAssembly.Memory,
    _ffi_fn_empty_tuple: (x: number, y: number) => number,
    _ffi_fn_multiply_pairs: (ab_0: number, ab_1: number, cd_0: number, cd_1: number) => number,
    _ffi_fn_nesting: (x_0: number, x_2_0: number, x_2_1_0: number) => number,
    _ffi_fn_rust_mem_leaked: () => number,
    _ffi_fn_single_element_tuple: (x_0: number, y_0: number) => number,
};

const _ffi_imports = {};
