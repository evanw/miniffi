// This file was generated by miniffi v0.1.0. Do not edit.

export async function instantiate(bytes, imports) {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiate(bytes, { env });
    _ffi_exports = (await promise).instance.exports;
    return { memory: _ffi_exports.memory };
}

export async function instantiateStreaming(source, imports) {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiateStreaming(source, { env });
    _ffi_exports = (await promise).instance.exports;
    return { memory: _ffi_exports.memory };
}

export function rust_mem_leaked() {
    return _ffi_exports._ffi_fn_rust_mem_leaked();
}

export function create_app(platform) {
    _ffi_exports._ffi_fn_create_app(_ffi_handle_alloc(platform));
}

let _ffi_len = 0;
let _ffi_dv;
let _ffi_new_ReadBuf = (off) => ({ dv: _ffi_update_dv(), off });
let _ffi_reg_Box_Handler = new FinalizationRegistry((ptr) => _ffi_exports._ffi_rs_drop_Box_Handler(ptr));
let _ffi_handles = /* @__PURE__ */ new Map;
let _ffi_next_handle = 0;
let _ffi_decoder = /* @__PURE__ */ new TextDecoder;
let _ffi_encoder = /* @__PURE__ */ new TextEncoder;
let _ffi_u8;

function _ffi_update_dv() {
    let buffer = _ffi_exports.memory.buffer;
    if (!_ffi_dv || _ffi_dv.buffer !== buffer) _ffi_dv = new DataView(buffer);
    return _ffi_dv;
}

const _ffi_Box_Handler = class Handler {
    constructor(_) {
        Object.defineProperty(this, "_", { value: _ });
        _ffi_reg_Box_Handler.register(this, _);
    }

    on_draw(canvas) {
        _ffi_exports._ffi_Box_Handler__on_draw(this._, _ffi_handle_alloc(canvas));
    }
};

function _ffi_handle_alloc(obj) {
    _ffi_handles.set(++_ffi_next_handle, obj);
    return _ffi_next_handle;
}

function _ffi_read_i32(buf) {
    let val = buf.dv.getInt32(buf.off, true);
    buf.off += 4;
    return val;
}

function _ffi_read_u32(buf) {
    let val = buf.dv.getUint32(buf.off, true);
    buf.off += 4;
    return val;
}

function _ffi_string_from_rust(ptr, len, cap) {
    let str = _ffi_decoder.decode(new Uint8Array(_ffi_exports.memory.buffer, ptr, len));
    _ffi_exports._ffi_dealloc(ptr, cap);
    return str;
}

function _ffi_update_u8() {
    let buffer = _ffi_exports.memory.buffer;
    if (!_ffi_u8 || _ffi_u8.buffer !== buffer) _ffi_u8 = new Uint8Array(buffer);
    return _ffi_u8;
}

function _ffi_string_to_rust(str) {
    let buf = _ffi_encoder.encode(str);
    let ptr = _ffi_exports._ffi_alloc(_ffi_len = buf.length);
    _ffi_update_u8().set(buf, ptr);
    return ptr;
}

function _ffi_vec_TextRun_from_rust(len, buf) {
    let items = [];
    while (items.length < len) {
        items.push({
            text: _ffi_string_from_rust(_ffi_read_i32(buf), _ffi_read_u32(buf), _ffi_read_u32(buf)),
            rect: { x: _ffi_read_i32(buf), y: _ffi_read_i32(buf), w: _ffi_read_i32(buf), h: _ffi_read_i32(buf) }
        });
    }
    return items;
}

let _ffi_exports;

const _ffi_imports = {
    _ffi_js_Canvas__draw_text_runs(self, buf_ptr, buf_cap, runs_len) {
        let buf = _ffi_new_ReadBuf(buf_ptr);
        _ffi_handles.get(self).draw_text_runs(_ffi_vec_TextRun_from_rust(runs_len, buf));
        _ffi_exports._ffi_dealloc(buf_ptr, buf_cap);
    },

    _ffi_js_Platform__create_window(self) {
        return _ffi_handle_alloc(_ffi_handles.get(self).create_window());
    },

    _ffi_js_Window__child_window(self) {
        return _ffi_handle_alloc(_ffi_handles.get(self).child_window());
    },

    _ffi_js_Window__get_size(self, _ffi_ret_2_i32) {
        let ret = _ffi_handles.get(self).get_size();
        _ffi_update_dv().setInt32(_ffi_ret_2_i32, ret[0], true);
        _ffi_dv.setInt32(_ffi_ret_2_i32 + 4, ret[1], true);
    },

    _ffi_js_Window__get_title(self, _ffi_ret_ptr_usize) {
        let ret_ptr = _ffi_string_to_rust(_ffi_handles.get(self).get_title()), ret_len = _ffi_len;
        _ffi_update_dv().setInt32(_ffi_ret_ptr_usize, ret_ptr, true);
        _ffi_dv.setInt32(_ffi_ret_ptr_usize + 4, ret_len, true);
    },

    _ffi_js_Window__set_handler(self, handler_ptr) {
        _ffi_handles.get(self).set_handler(new _ffi_Box_Handler(handler_ptr));
    },

    _ffi_js_Window__set_size(self, width, height) {
        _ffi_handles.get(self).set_size(width, height);
    },

    _ffi_js_Window__set_title(self, title_ptr, title_len, title_cap) {
        _ffi_handles.get(self).set_title(_ffi_string_from_rust(title_ptr, title_len, title_cap));
    },

    _ffi_js_drop(handle) {
        _ffi_handles.delete(handle);
    },
};
