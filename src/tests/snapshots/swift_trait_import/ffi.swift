// This file was generated by miniffi v0.1.0. Do not edit.

protocol Adder: AnyObject {
    func add(_ y: Int32) -> Int32
}

func rust_mem_leaked() -> UInt {
    return _ffi_fn_rust_mem_leaked()
}

func set_adder_rc(_ adder: Adder) -> Int32 {
    return _ffi_fn_set_adder_rc(UnsafeRawPointer(Unmanaged.passRetained(adder as AnyObject).toOpaque()))
}

func set_adder_box(_ adder: Adder) -> Int32 {
    return _ffi_fn_set_adder_box(UnsafeRawPointer(Unmanaged.passRetained(adder as AnyObject).toOpaque()))
}

@_cdecl("_ffi_swift_Adder__add")
func _ffi_swift_Adder__add(_self: UnsafeRawPointer?, y: Int32) -> Int32 {
    let _self = Unmanaged<AnyObject>.fromOpaque(_self!).takeUnretainedValue() as! Adder
    return _self.add(y)
}

@_cdecl("_ffi_swift_drop")
func _ffi_swift_drop(ptr: UnsafeRawPointer?) {
    _ = Unmanaged<AnyObject>.fromOpaque(ptr!).takeRetainedValue()
}
