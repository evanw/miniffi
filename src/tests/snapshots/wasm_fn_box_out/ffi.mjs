// This file was generated by miniffi v0.1.0. Do not edit.

export async function instantiate(bytes, imports) {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiate(bytes, { env });
    _ffi_exports = (await promise).instance.exports;
    return { memory: _ffi_exports.memory };
}

export async function instantiateStreaming(source, imports) {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiateStreaming(source, { env });
    _ffi_exports = (await promise).instance.exports;
    return { memory: _ffi_exports.memory };
}

export function rust_mem_leaked() {
    return _ffi_exports._ffi_fn_rust_mem_leaked();
}

export function get_tree() {
    let multi_ret = _ffi_exports._ffi_fn_get_tree();
    let ret_value = _ffi_update_dv().getInt32(multi_ret, true);
    let buf_ptr = _ffi_dv.getInt32(multi_ret + 4, true);
    let buf_cap = _ffi_dv.getUint32(multi_ret + 8, true);
    let has_ret_left = _ffi_dv.getUint8(multi_ret + 12);
    let has_ret_right = _ffi_dv.getUint8(multi_ret + 13);
    let buf = _ffi_new_ReadBuf(buf_ptr);
    let ret = {
        value: ret_value,
        left: has_ret_left ? _ffi_box_Tree_from_rust(buf) : null,
        right: has_ret_right ? _ffi_box_Tree_from_rust(buf) : null
    };
    _ffi_exports._ffi_dealloc(buf_ptr, buf_cap);
    return ret;
}

export function check_nested(x) {
    let multi_ret = _ffi_exports._ffi_fn_check_nested(x);
    let buf_ptr = _ffi_update_dv().getInt32(multi_ret, true);
    let buf_cap = _ffi_dv.getUint32(multi_ret + 4, true);
    let buf = _ffi_new_ReadBuf(buf_ptr);
    let ret = { 0: _ffi_box_box_box_i32_from_rust(buf) };
    _ffi_exports._ffi_dealloc(buf_ptr, buf_cap);
    return ret;
}

let _ffi_dv;
let _ffi_new_ReadBuf = (off) => ({ dv: _ffi_update_dv(), off });

function _ffi_update_dv() {
    let buffer = _ffi_exports.memory.buffer;
    if (!_ffi_dv || _ffi_dv.buffer !== buffer) _ffi_dv = new DataView(buffer);
    return _ffi_dv;
}

function _ffi_box_Tree_from_rust(buf) {
    return {
        value: _ffi_read_i32(buf),
        left: _ffi_read_u8(buf) ? _ffi_box_Tree_from_rust(buf) : null,
        right: _ffi_read_u8(buf) ? _ffi_box_Tree_from_rust(buf) : null
    };
}

function _ffi_box_box_box_i32_from_rust(buf) {
    return _ffi_box_box_i32_from_rust(buf);
}

function _ffi_box_box_i32_from_rust(buf) {
    return _ffi_box_i32_from_rust(buf);
}

function _ffi_box_i32_from_rust(buf) {
    return _ffi_read_i32(buf);
}

function _ffi_read_i32(buf) {
    let val = buf.dv.getInt32(buf.off, true);
    buf.off += 4;
    return val;
}

function _ffi_read_u8(buf) {
    return buf.dv.getUint8(buf.off++);
}

let _ffi_exports;

const _ffi_imports = {};
