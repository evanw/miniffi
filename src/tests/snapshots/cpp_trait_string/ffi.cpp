// This file was generated by miniffi v0.1.0. Do not edit.

#include "ffi.h"

struct _ffi_ret_ptr_2_usize {
    const char* _0;
    uintptr_t _1;
    uintptr_t _2;
};

struct _ffi_ret_ptr_usize {
    const void* _0;
    uintptr_t _1;
};

extern "C" {

void _ffi_dealloc(const void* ptr, uintptr_t capacity);
void _ffi_drop_Rc_Test(const void* ptr);
void* _ffi_alloc(uintptr_t len);
_ffi_ret_ptr_2_usize _ffi_Rc_Test__get_string(const void* _self);
void _ffi_Rc_Test__set_str(const void* _self, const void* x_ptr, uintptr_t x_len);
void _ffi_Rc_Test__set_string(const void* _self, const void* x_ptr, uintptr_t x_len);
const void* _ffi_fn_get_test();
uintptr_t _ffi_fn_rust_mem_leaked();
_ffi_ret_ptr_2_usize _ffi_fn_set_test(const void* test_ptr);

} // extern "C"

namespace {

std::string _ffi_string_from_rust(const char* ptr, uintptr_t len, uintptr_t cap) {
    std::string str(ptr, len);
    _ffi_dealloc(ptr, cap);
    return str;
}

struct _ffi_Rc_Test final : rust::Test {
    _ffi_Rc_Test(const void* ptr) : _self(ptr) {}
    virtual ~_ffi_Rc_Test() { _ffi_drop_Rc_Test(_self); }
    virtual std::string get_string();
    virtual void set_string(std::string x);
    virtual void set_str(std::string x);
    const void* _self;
};

const void* _ffi_string_to_rust(const std::string& str, uintptr_t &len) {
    len = str.size();
    return memcpy(_ffi_alloc(len), str.data(), len);
}

} // namespace

extern "C" {

_ffi_ret_ptr_usize _ffi_cpp_Rc_Test__get_string(std::shared_ptr<rust::Test>* _self) {
    uintptr_t ret_len;
    const void* ret_ptr = _ffi_string_to_rust(_self->get()->get_string(), ret_len);
    return _ffi_ret_ptr_usize{ret_ptr, ret_len};
}

void _ffi_cpp_Rc_Test__set_str(std::shared_ptr<rust::Test>* _self, const char* x_ptr, uintptr_t x_len, uintptr_t x_cap) {
    auto x = _ffi_string_from_rust(x_ptr, x_len, x_cap);
    _self->get()->set_str(std::move(x));
}

void _ffi_cpp_Rc_Test__set_string(std::shared_ptr<rust::Test>* _self, const char* x_ptr, uintptr_t x_len, uintptr_t x_cap) {
    auto x = _ffi_string_from_rust(x_ptr, x_len, x_cap);
    _self->get()->set_string(std::move(x));
}

void _ffi_cpp_drop_Rc_Test(std::shared_ptr<rust::Test>* self) {
    delete self;
}

} // extern "C"

std::string _ffi_Rc_Test::get_string() {
    auto multi_ret = _ffi_Rc_Test__get_string(_self);
    auto ret_ptr = multi_ret._0;
    auto ret_len = multi_ret._1;
    auto ret_cap = multi_ret._2;
    return _ffi_string_from_rust(ret_ptr, ret_len, ret_cap);
}

void _ffi_Rc_Test::set_str(std::string x) {
    uintptr_t x_len;
    const void* x_ptr = _ffi_string_to_rust(x, x_len);
    _ffi_Rc_Test__set_str(_self, x_ptr, x_len);
}

void _ffi_Rc_Test::set_string(std::string x) {
    uintptr_t x_len;
    const void* x_ptr = _ffi_string_to_rust(x, x_len);
    _ffi_Rc_Test__set_string(_self, x_ptr, x_len);
}

std::shared_ptr<rust::Test> rust::get_test() {
    auto ret_ptr = _ffi_fn_get_test();
    return std::make_shared<_ffi_Rc_Test>(ret_ptr);
}

uintptr_t rust::rust_mem_leaked() {
    return _ffi_fn_rust_mem_leaked();
}

std::string rust::set_test(std::shared_ptr<rust::Test> test) {
    auto test_ptr = new std::shared_ptr<rust::Test>(test);
    auto multi_ret = _ffi_fn_set_test(test_ptr);
    auto ret_ptr = multi_ret._0;
    auto ret_len = multi_ret._1;
    auto ret_cap = multi_ret._2;
    return _ffi_string_from_rust(ret_ptr, ret_len, ret_cap);
}
