// This file was generated by miniffi v0.1.0. Do not edit.

#[unsafe(no_mangle)]
extern "C" fn _ffi_Rc_Test__get_string(_self: *const u8) -> _ffi_ret_ptr_2_usize {
    let _self = unsafe { &*(_self as *const std::rc::Rc<dyn Test>) };
    let (ret_ptr, ret_len, ret_cap) = _ffi_string_to_host(_self.get_string());
    _ffi_ret_ptr_2_usize(ret_ptr, ret_len, ret_cap)
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_Rc_Test__set_str(_self: *const u8, x_ptr: *const u8, x_len: usize) {
    let _self = unsafe { &*(_self as *const std::rc::Rc<dyn Test>) };
    _self.set_str(&_ffi_string_from_host(x_ptr, x_len));
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_Rc_Test__set_string(_self: *const u8, x_ptr: *const u8, x_len: usize) {
    let _self = unsafe { &*(_self as *const std::rc::Rc<dyn Test>) };
    _self.set_string(_ffi_string_from_host(x_ptr, x_len));
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_drop_Rc_Test(ptr: *const u8) {
    drop(unsafe { Box::from_raw(ptr as *mut std::rc::Rc<dyn Test>) });
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_get_test() -> *const u8 {
    Box::into_raw(Box::new(get_test())) as *const u8
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_rust_mem_leaked() -> usize {
    rust_mem_leaked()
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_fn_set_test(test_ptr: *const u8) -> _ffi_ret_ptr_2_usize {
    let (ret_ptr, ret_len, ret_cap) = _ffi_string_to_host(set_test(std::rc::Rc::new(_ffi_rs_Rc_Test(test_ptr))));
    _ffi_ret_ptr_2_usize(ret_ptr, ret_len, ret_cap)
}

#[repr(C)]
struct _ffi_ret_ptr_2_usize(*const u8, usize, usize);

#[repr(C)]
struct _ffi_ret_ptr_usize(*const u8, usize);

#[allow(non_camel_case_types)]
struct _ffi_rs_Rc_Test(*const u8);

impl Drop for _ffi_rs_Rc_Test {
    fn drop(&mut self) {
        unsafe extern "C" { fn _ffi_cpp_drop_Rc_Test(_: *const u8); }
        unsafe { _ffi_cpp_drop_Rc_Test(self.0) };
    }
}

impl Test for _ffi_rs_Rc_Test {
    fn get_string(&self) -> String {
        unsafe extern "C" { fn _ffi_cpp_Rc_Test__get_string(_: *const u8) -> _ffi_ret_ptr_usize; }
        let multi_ret = unsafe { _ffi_cpp_Rc_Test__get_string(self.0) };
        let ret_ptr = multi_ret.0;
        let ret_len = multi_ret.1;
        _ffi_string_from_host(ret_ptr, ret_len)
    }

    fn set_string(&self, x: String) {
        unsafe extern "C" { fn _ffi_cpp_Rc_Test__set_string(_: *const u8, x_ptr: *const u8, x_len: usize, x_cap: usize); }
        let (x_ptr, x_len, x_cap) = _ffi_string_to_host(x);
        unsafe { _ffi_cpp_Rc_Test__set_string(self.0, x_ptr, x_len, x_cap) };
    }

    fn set_str(&self, x: &str) {
        unsafe extern "C" { fn _ffi_cpp_Rc_Test__set_str(_: *const u8, x_ptr: *const u8, x_len: usize, x_cap: usize); }
        let (x_ptr, x_len, x_cap) = _ffi_string_to_host(x.into());
        unsafe { _ffi_cpp_Rc_Test__set_str(self.0, x_ptr, x_len, x_cap) };
    }
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_alloc(len: usize) -> *const u8 {
    Box::into_raw(Box::<[u8]>::new_uninit_slice(len)) as *const u8
}

fn _ffi_string_from_host(ptr: *const u8, len: usize) -> String {
    unsafe { String::from_raw_parts(ptr as *mut u8, len, len) }
}

#[unsafe(no_mangle)]
extern "C" fn _ffi_dealloc(ptr: *mut u8, capacity: usize) {
    drop(unsafe { Vec::from_raw_parts(ptr, 0, capacity) });
}

fn _ffi_string_to_host(buf: String) -> (*const u8, usize, usize) {
    let buf = std::mem::ManuallyDrop::new(buf.into_bytes());
    (buf.as_ptr(), buf.len(), buf.capacity())
}
