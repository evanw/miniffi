// This file was generated by miniffi v0.1.0. Do not edit.

func rust_mem_leaked() -> UInt {
    return _ffi_fn_rust_mem_leaked()
}

func opt_int(_ x: Bool, _ y: Int32) -> Int32? {
    let multi_ret = _ffi_fn_opt_int(x, y)
    let buf_ptr = multi_ret._0
    let buf_cap = multi_ret._1
    let has_ret = multi_ret._2
    var buf_end = buf_ptr!
    let ret = has_ret ? _ffi_read(&buf_end) as Int32 : nil
    _ffi_dealloc(buf_ptr, buf_cap)
    return ret
}

func opt_opt_int(_ x: Bool, _ y: Bool, _ z: Int32) -> Int32?? {
    let multi_ret = _ffi_fn_opt_opt_int(x, y, z)
    let buf_ptr = multi_ret._0
    let buf_cap = multi_ret._1
    let has_ret = multi_ret._2
    var buf_end = buf_ptr!
    let ret = has_ret ? Optional.some(_ffi_read(&buf_end) as Bool ? _ffi_read(&buf_end) as Int32 : nil) : nil
    _ffi_dealloc(buf_ptr, buf_cap)
    return ret
}

func vec_opt_int(_ n: Int32) -> [Int32?] {
    let multi_ret = _ffi_fn_vec_opt_int(n)
    let buf_ptr = multi_ret._0
    let buf_cap = multi_ret._1
    let ret_len = multi_ret._2
    var buf_end = buf_ptr!
    let ret = _ffi_vec_option_i32_from_rust(Int(ret_len), &buf_end)
    _ffi_dealloc(buf_ptr, buf_cap)
    return ret
}

func opt_vec_opt_string(_ n: Int32) -> [String?]? {
    let multi_ret = _ffi_fn_opt_vec_opt_string(n)
    let buf_ptr = multi_ret._0
    let buf_cap = multi_ret._1
    let has_ret = multi_ret._2
    var buf_end = buf_ptr!
    let ret = has_ret ? _ffi_vec_option_string_from_rust(Int(_ffi_read(&buf_end) as UInt), &buf_end) : nil
    _ffi_dealloc(buf_ptr, buf_cap)
    return ret
}

private func _ffi_read<T>(_ ptr: inout UnsafeRawPointer) -> T {
    let val = ptr.loadUnaligned(fromByteOffset: 0, as: T.self)
    ptr = ptr.advanced(by: MemoryLayout<T>.size)
    return val
}

private func _ffi_string_from_rust(_ ptr: UnsafeRawPointer?, _ len: Int, _ cap: UInt) -> String {
    let buf = UnsafeBufferPointer(start: ptr!.assumingMemoryBound(to: UInt8.self), count: len)
    let str = String(decoding: buf, as: UTF8.self)
    _ffi_dealloc(ptr, cap)
    return str
}

private func _ffi_vec_option_i32_from_rust(_ len: Int, _ end: inout UnsafeRawPointer) -> [Int32?] {
    var items: [Int32?] = []
    items.reserveCapacity(len)
    while items.count < len {
        items.append(_ffi_read(&end) as Bool ? _ffi_read(&end) as Int32 : nil)
    }
    return items
}

private func _ffi_vec_option_string_from_rust(_ len: Int, _ end: inout UnsafeRawPointer) -> [String?] {
    var items: [String?] = []
    items.reserveCapacity(len)
    while items.count < len {
        items.append(_ffi_read(&end) as Bool ? _ffi_string_from_rust(_ffi_read(&end) as UnsafeRawPointer?, Int(_ffi_read(&end) as UInt), _ffi_read(&end) as UInt) : nil)
    }
    return items
}
