// This file was generated by miniffi v0.1.0. Do not edit.

export async function instantiate(bytes, imports) {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiate(bytes, { env });
    _ffi_exports = (await promise).instance.exports;
    return { memory: _ffi_exports.memory };
}

export async function instantiateStreaming(source, imports) {
    let env = Object.assign({}, imports, _ffi_imports);
    let promise = WebAssembly.instantiateStreaming(source, { env });
    _ffi_exports = (await promise).instance.exports;
    return { memory: _ffi_exports.memory };
}

export function rust_mem_leaked() {
    return _ffi_exports._ffi_fn_rust_mem_leaked();
}

export function sum_u8(values) {
    let buf = _ffi_new_WriteBuf();
    let values_len = values.length;
    _ffi_vec_u8_to_rust(values, buf);
    return _ffi_exports._ffi_fn_sum_u8(_ffi_buf_to_rust(buf), values_len);
}

export function sum_u16(values) {
    let buf = _ffi_new_WriteBuf();
    let values_len = values.length;
    _ffi_vec_u16_to_rust(values, buf);
    return _ffi_exports._ffi_fn_sum_u16(_ffi_buf_to_rust(buf), values_len);
}

export function sum_u32(values) {
    let buf = _ffi_new_WriteBuf();
    let values_len = values.length;
    _ffi_vec_u32_to_rust(values, buf);
    return _ffi_exports._ffi_fn_sum_u32(_ffi_buf_to_rust(buf), values_len);
}

export function sum_usize(values) {
    let buf = _ffi_new_WriteBuf();
    let values_len = values.length;
    _ffi_vec_usize_to_rust(values, buf);
    return _ffi_exports._ffi_fn_sum_usize(_ffi_buf_to_rust(buf), values_len);
}

export function sum_u64(values) {
    let buf = _ffi_new_WriteBuf();
    let values_len = values.length;
    _ffi_vec_u64_to_rust(values, buf);
    return _ffi_exports._ffi_fn_sum_u64(_ffi_buf_to_rust(buf), values_len);
}

export function sum_i8(values) {
    let buf = _ffi_new_WriteBuf();
    let values_len = values.length;
    _ffi_vec_i8_to_rust(values, buf);
    return _ffi_exports._ffi_fn_sum_i8(_ffi_buf_to_rust(buf), values_len);
}

export function sum_i16(values) {
    let buf = _ffi_new_WriteBuf();
    let values_len = values.length;
    _ffi_vec_i16_to_rust(values, buf);
    return _ffi_exports._ffi_fn_sum_i16(_ffi_buf_to_rust(buf), values_len);
}

export function sum_i32(values) {
    let buf = _ffi_new_WriteBuf();
    let values_len = values.length;
    _ffi_vec_i32_to_rust(values, buf);
    return _ffi_exports._ffi_fn_sum_i32(_ffi_buf_to_rust(buf), values_len);
}

export function sum_isize(values) {
    let buf = _ffi_new_WriteBuf();
    let values_len = values.length;
    _ffi_vec_isize_to_rust(values, buf);
    return _ffi_exports._ffi_fn_sum_isize(_ffi_buf_to_rust(buf), values_len);
}

export function sum_i64(values) {
    let buf = _ffi_new_WriteBuf();
    let values_len = values.length;
    _ffi_vec_i64_to_rust(values, buf);
    return _ffi_exports._ffi_fn_sum_i64(_ffi_buf_to_rust(buf), values_len);
}

export function sum_f32(values) {
    let buf = _ffi_new_WriteBuf();
    let values_len = values.length;
    _ffi_vec_f32_to_rust(values, buf);
    return _ffi_exports._ffi_fn_sum_f32(_ffi_buf_to_rust(buf), values_len);
}

export function sum_f64(values) {
    let buf = _ffi_new_WriteBuf();
    let values_len = values.length;
    _ffi_vec_f64_to_rust(values, buf);
    return _ffi_exports._ffi_fn_sum_f64(_ffi_buf_to_rust(buf), values_len);
}

export function check_nested(values) {
    let buf = _ffi_new_WriteBuf();
    let values_len = values.length;
    _ffi_vec_vec_i32_to_rust(values, buf);
    let multi_ret = _ffi_exports._ffi_fn_check_nested(_ffi_buf_to_rust(buf), values_len);
    let ret_ptr = _ffi_update_dv().getInt32(multi_ret, true);
    let ret_len = _ffi_dv.getUint32(multi_ret + 4, true);
    let ret_cap = _ffi_dv.getUint32(multi_ret + 8, true);
    return _ffi_string_from_rust(ret_ptr, ret_len, ret_cap);
}

let _ffi_new_WriteBuf = () => ({ u8: new Uint8Array(16), dv: null, off: 0 });
let _ffi_u8;
let _ffi_decoder = /* @__PURE__ */ new TextDecoder;
let _ffi_dv;

function _ffi_update_u8() {
    let buffer = _ffi_exports.memory.buffer;
    if (!_ffi_u8 || _ffi_u8.buffer !== buffer) _ffi_u8 = new Uint8Array(buffer);
    return _ffi_u8;
}

function _ffi_buf_to_rust({ u8, off }) {
    let ptr = _ffi_exports._ffi_alloc(off);
    _ffi_update_u8().set(u8.length > off ? u8.subarray(0, off) : u8, ptr);
    return ptr;
}

function _ffi_string_from_rust(ptr, len, cap) {
    let str = _ffi_decoder.decode(new Uint8Array(_ffi_exports.memory.buffer, ptr, len));
    _ffi_exports._ffi_dealloc(ptr, cap);
    return str;
}

function _ffi_update_dv() {
    let buffer = _ffi_exports.memory.buffer;
    if (!_ffi_dv || _ffi_dv.buffer !== buffer) _ffi_dv = new DataView(buffer);
    return _ffi_dv;
}

function _ffi_vec_f32_to_rust(items, buf) {
    for (const item of items) {
        _ffi_write_f32(buf, item);
    }
}

function _ffi_vec_f64_to_rust(items, buf) {
    for (const item of items) {
        _ffi_write_f64(buf, item);
    }
}

function _ffi_vec_i16_to_rust(items, buf) {
    for (const item of items) {
        _ffi_write_i16(buf, item);
    }
}

function _ffi_vec_i32_to_rust(items, buf) {
    for (const item of items) {
        _ffi_write_i32(buf, item);
    }
}

function _ffi_vec_i64_to_rust(items, buf) {
    for (const item of items) {
        _ffi_write_i64(buf, item);
    }
}

function _ffi_vec_i8_to_rust(items, buf) {
    for (const item of items) {
        _ffi_write_i8(buf, item);
    }
}

function _ffi_vec_isize_to_rust(items, buf) {
    for (const item of items) {
        _ffi_write_i32(buf, item);
    }
}

function _ffi_vec_u16_to_rust(items, buf) {
    for (const item of items) {
        _ffi_write_i16(buf, item);
    }
}

function _ffi_vec_u32_to_rust(items, buf) {
    for (const item of items) {
        _ffi_write_i32(buf, item);
    }
}

function _ffi_vec_u64_to_rust(items, buf) {
    for (const item of items) {
        _ffi_write_i64(buf, item);
    }
}

function _ffi_vec_u8_to_rust(items, buf) {
    for (const item of items) {
        _ffi_write_i8(buf, item);
    }
}

function _ffi_vec_usize_to_rust(items, buf) {
    for (const item of items) {
        _ffi_write_i32(buf, item);
    }
}

function _ffi_vec_vec_i32_to_rust(items, buf) {
    for (const item of items) {
        _ffi_write_i32(buf, item.length);
        _ffi_vec_i32_to_rust(item, buf);
    }
}

function _ffi_grow(buf, n) {
    let off = buf.off;
    let u8 = buf.u8;
    if (off + n > u8.length) {
        (buf.u8 = new Uint8Array((off + n) << 1)).set(u8);
        buf.dv = null;
    }
    buf.off += n;
    if (!buf.dv) buf.dv = new DataView(buf.u8.buffer);
    return off;
}

function _ffi_write_f32(buf, val) {
    let ptr = _ffi_grow(buf, 4);
    buf.dv.setFloat32(ptr, val, true);
}

function _ffi_write_f64(buf, val) {
    let ptr = _ffi_grow(buf, 8);
    buf.dv.setFloat64(ptr, val, true);
}

function _ffi_write_i16(buf, val) {
    let ptr = _ffi_grow(buf, 2);
    buf.dv.setInt16(ptr, val, true);
}

function _ffi_write_i32(buf, val) {
    let ptr = _ffi_grow(buf, 4);
    buf.dv.setInt32(ptr, val, true);
}

function _ffi_write_i64(buf, val) {
    let ptr = _ffi_grow(buf, 8);
    buf.dv.setBigInt64(ptr, val, true);
}

function _ffi_write_i8(buf, val) {
    let ptr = _ffi_grow(buf, 1);
    buf.dv.setInt8(ptr, val);
}

let _ffi_exports;

const _ffi_imports = {};
